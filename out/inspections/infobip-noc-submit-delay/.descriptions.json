{
  "profile": "Deprecations",
  "groups": [
    {
      "name": "Java 11",
      "inspections": [
        {
          "shortName": "StringRepeatCanBeUsed",
          "displayName": "String.repeat() can be used",
          "enabled": false,
          "description": "<html>\n<body>\nReports loops which could be replaced with single <code>String.repeat()</code> method (available since Java 11). E.g.:\n<pre>\n  for(int i=0; i&lt;count; i++) {\n    sb.append('*');\n  }\n</pre>\nSuch code could be replaced with <code>sb.append(\"*\".repeat(count));</code>\n<!-- tooltip end -->\n<p>\n  By default the inspection may wrap count expression with <code>Math.max(0, count)</code> if it cannot prove statically that count is \n  non-negative. This is done to prevent possible semantics change, as <code>String.repeat()</code> rejects negative numbers.\n  You may disable this behavior via option if you don't like it. Similarly a String to repeat could be wrapped with \n  <code>String.valueOf</code> to prevent possible <code>NullPointerException</code> if it's unknown whether it could be <code>null</code>.\n</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ReadWriteStringCanBeUsed",
          "displayName": "'Files.readString()' or 'Files.writeString()' can be used",
          "enabled": false,
          "description": "<html>\n<body>\nReports code fragments that could be replaced via the <b>Files.readString</b> and <b>Files.writeString</b>\nmethods introduced in Java 11.\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Kotlin Android",
      "inspections": [
        {
          "shortName": "IncorrectScope",
          "displayName": "Unresolved reference, in wrong test scope",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks Kotlin test files for references to classes and members from a different test\ntype.\n<br><br>\nFor example, local unit tests should not reference classes or members from an instrumented test\nclass. For more information about test types,\n<a href=\"https://d.android.com/r/studio-ui/test_types_and_location\">read the documentation</a>.\n</body>\n</html>"
        },
        {
          "shortName": "IllegalIdentifier",
          "displayName": "Illegal Android Identifier",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports identifiers in Android projects which are not accepted by the Android runtime (for example, method names containing spaces).\n</body>\n</html>\n"
        },
        {
          "shortName": "TypeParameterFindViewById",
          "displayName": "Cast can be converted to findViewById with type parameter",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>findViewById</b> calls with type casts which can be converted to <b>findViewById</b> with a type parameter from Android 8.0 (API level 26).\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Maven",
      "inspections": [
        {
          "shortName": "MavenDuplicatePluginInspection",
          "displayName": "Duplicate plugin declaration",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks duplication of plugin declaration in pom.xml\n</body>\n</html>"
        },
        {
          "shortName": "MavenModelInspection",
          "displayName": "Maven Model Inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nInspects a Maven model for resolution problems.\n</body>\n</html>"
        },
        {
          "shortName": "MavenDuplicateDependenciesInspection",
          "displayName": "Duplicate Dependencies",
          "enabled": false,
          "description": "<html>\n<body>\nMaven Duplicate Dependencies Inspection\n</body>\n</html>"
        },
        {
          "shortName": "MavenRedundantGroupId",
          "displayName": "Redundant groupId",
          "enabled": false,
          "description": "<html>\n<body>\nReports that definition of &lt;groupId&gt; is unnecessary, because it's already defined in the parent pom.xml.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MavenCoroutinesDeprecation",
          "displayName": "Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Maven",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>kotlinx.coroutines</b> libraries dependencies in Maven that should be updated in order\nto be compatible with Kotlin 1.3+.\n</body>\n</html>"
        },
        {
          "shortName": "MavenPropertyInParent",
          "displayName": "Usage of properties in parent description",
          "enabled": false,
          "description": "<html>\n<body>\nReports that usage of properties in modules parent definition is prohibited\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Android Lint: Testing",
      "inspections": [
        {
          "shortName": "AndroidLintIgnoreWithoutReason",
          "displayName": "@Ignore without Reason",
          "enabled": false,
          "description": "<html><body>@Ignore without Reason<br><br>Ignoring a test without a reason makes it difficult to figure out the problem later.<br/>\nPlease define an explicit reason why it is ignored, and when it can be resolved.<br><br>Issue id: IgnoreWithoutReason</body></html>"
        }
      ]
    },
    {
      "name": "GPath",
      "inspections": [
        {
          "shortName": "GroovyMapPutCanBeKeyedAccess",
          "displayName": "Call to Map.put can be keyed access",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.util.Map.put()</b> methods. Such calls can be replaced\nby the shorter and clearer keyed access form.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyListSetCanBeKeyedAccess",
          "displayName": "Call to List.set can be keyed access",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.util.List.set()</b> methods. Such calls can be replaced\nby the shorter and clearer keyed access form.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyListGetCanBeKeyedAccess",
          "displayName": "Call to List.get can be keyed access",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.util.List.get()</b> methods. Such calls can be replaced\nby the shorter and clearer keyed access form.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMapGetCanBeKeyedAccess",
          "displayName": "Call to Map.get can be keyed access",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.util.Map.get()</b> methods. Such calls can be replaced\nby the shorter and clearer keyed access form.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Java 10",
      "inspections": [
        {
          "shortName": "RedundantExplicitVariableType",
          "displayName": "Local variable type can be omitted",
          "enabled": false,
          "description": "<html>\n<body>\nReports redundant local variable types. Theses types can be inferred from the context and thus be replaced with <b>var</b>.\n</body>\n</html>"
        },
        {
          "shortName": "VariableTypeCanBeExplicit",
          "displayName": "Variable type can be explicit",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables with a <b>var</b> type that can be replaced with an explicit type.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 5",
      "inspections": [
        {
          "shortName": "IndexOfReplaceableByContains",
          "displayName": "'String.indexOf()' expression is replaceable with 'contains()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>String.indexOf()</b>\nexpressions which can be replaced with a call to the\n<b>String.contains()</b> method available in Java 5 and newer.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WhileCanBeForeach",
          "displayName": "'while' loop replaceable with enhanced 'for' loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>while</b> loops which iterate\nover collections, and can be replaced with an enhanced <b>for</b> loop (i.e. foreach iteration syntax).\n<!--  'foreach' still used in this description so that the inspection continues to be found using this keyword -->\nExample:\n<pre>\n  Iterator it = c.iterator();\n  while(it.hasNext()) {\n    Object obj = it.next();\n    System.out.println(obj);\n  }\n</pre>\nCan be replaced with:\n<pre>\n  for (Object obj : c) {\n    System.out.println(obj);\n  }\n</pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferReplaceableByStringBuilder",
          "displayName": "'StringBuffer' may be 'StringBuilder'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any variables declared as <b>java.lang.StringBuffer</b> which may be\nmore efficiently declared as <b>java.lang.StringBuilder</b>.\n<b>java.lang.StringBuilder</b> is a non-thread-safe replacement for\n<b>java.lang.StringBuffer</b>, available in Java 5 and newer.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryUnboxing",
          "displayName": "Unnecessary unboxing",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"unboxing\", e.g. explicit unwrapping of wrapped primitive values.\nUnboxing is unnecessary under Java 5 and newer, and can be safely removed.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to only report truly superfluous unboxing, where an unboxed value will immediately be implicitly or explicitly boxed.\nIn this case the entire unboxing-boxing step can be removed. Simple explicit unboxing will not be reported.\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "RawUseOfParameterizedType",
          "displayName": "Raw use of parameterized class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of parameterized classes where the type parameters are omitted.\nSuch <i>raw</i> uses of parameterized types are valid in Java, but defeat the purpose of using\ntype parameters, and may mask bugs. This inspection mirrors the <i>rawtypes</i> warning of javac.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore the construction of objects of parameterized types.\n<p>\nUse the second checkbox below to ignore raw types in type casts.\n<p>\nUse the third checkbox to ignore raw types in places where parameterized types would not be compilable\n  (for example in array creation expressions or when overriding a library method)\n<p>\nUse the fourth checkbox to ignore raw types used in the parameters of methods overriding super methods.\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryBoxing",
          "displayName": "Unnecessary boxing",
          "enabled": false,
          "description": "<html>\n<body>\nReports explicit boxing, i.e. wrapping of primitive values in objects.\nExplicit manual boxing is unnecessary under Java 5 and newer, and can be safely removed.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to only report truly superfluous boxing, where a boxed value will immediately be implicitly or explicitly unboxed.\nIn this case the entire boxing-unboxing step can be removed. Simple explicit boxing will not be reported.\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "ForCanBeForeach",
          "displayName": "'for' loop replaceable with enhanced 'for' loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b> loops which iterate\nover collections or arrays, and can be replaced with an enhanced <b>for</b> loop (i.e. the foreach iteration syntax).\n<!--  'foreach' still used in this description so that the inspection continues to be found using this keyword -->\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to find loops involving <b>list.get(index)</b> calls.\nThese loops generally can be replaced with an enhanced <b>for</b> loop, unless they modify underlying list in the process, e.g. by calling <b>list.remove(index)</b>.\nIf latter is the case, the enhanced <b>for</b> loop may throw <b>ConcurrentModificationException</b>.\n<p>\nUse the second checkbox below to ignore collections which do not have type parameters. This prevents the creation of\nenhanced <b>for</b> loop variables of type <b>java.lang.Object</b> and the insertion of casts where the loop variable is used.\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BigDecimalLegacyMethod",
          "displayName": "'BigDecimal' legacy method called",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>divide()</b> or <b>setScale()</b> that use the old <b>int</b> constants for specifying the rounding mode.\nSince JDK 1.5 methods taking a <b>RoundingMode</b> <b>enum</b> parameter are available instead.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MethodCanBeVariableArityMethod",
          "displayName": "Method can be varargs method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with which can be converted to a variable arity method. Example:\n<pre>\n  void process(String name, Object[] objects);\n</pre>\nCan be converted to:\n<pre>\n  void process(String name, Object... objects);\n</pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "CollectionsFieldAccessReplaceableByMethodCall",
          "displayName": "Collections.EMPTY_* field access replaceable with 'Collections.empty*()' method call",
          "enabled": false,
          "description": "<html>\n<body>\nReports any access to the <b>java.util.Collections</b>\nfields <b>EMPTY_LIST</b>, <b>EMPTY_MAP</b>\nor <b>EMPTY_SET</b>. Those expressions can be replaced by method\ncalls to <b>emptyList()</b>,\n<b>emptyMap()</b> and <b>emptySet()</b>.\nSuch method calls prevent \"unchecked\" warnings by the compiler because the type parameters can be inferred.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Migration",
      "inspections": [
        {
          "shortName": "ObsoleteExperimentalCoroutines",
          "displayName": "Experimental coroutines usages are deprecated since 1.3",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports experimental coroutines usages that are incompatible with Kotlin 1.3+ and should be updated.\n</body>\n</html>"
        },
        {
          "shortName": "FromClosedRangeMigration",
          "displayName": "MIN_VALUE step in fromClosedRange() since 1.3",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Since Kotlin 1.3 it's prohibited to call <i>IntProgression.fromClosedRange()</i> and <i>LongProgression.fromClosedRange()</i> with\n  <i>MIN_VALUE</i> step. All such calls should be checked during migration to Kotlin 1.3+.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinDeprecation",
          "displayName": "Usage of redundant or deprecated syntax or deprecated symbols",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection is used during the code cleanup operation (<b>Analyze | Code Cleanup</b>) to automatically\nreplace usages of obsolete language features or unnecessarily verbose code constructs with\ncompact and up-to-date syntax.\n<p>\nDeprecated symbol usages are also replaced with their proposed substitutions.\n</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Memory",
      "inspections": [
        {
          "shortName": "SystemGC",
          "displayName": "Calls to 'System.gc()' or 'Runtime.gc()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>System.gc()</b> or <b>Runtime.gc()</b>.\nWhile occasionally useful in testing, explicitly triggering garbage collection via <b>System.gc()</b> is almost always\na bad idea in production code, and can result in serious performance problems.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticCollection",
          "displayName": "Static collection",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Collection</b> variables declared as <b>static</b>. While\nnot necessarily a problem, static collections are often causes of memory leaks, and are\ntherefore prohibited by some coding standards.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferField",
          "displayName": "StringBuilder field",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields with type\n<b>java.lang.StringBuffer</b> or <b>java.lang.StringBuilder</b>.\nStringBuffer fields can grow without limit, and are often the cause of\nmemory leaks.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReturnOfInnerClass",
          "displayName": "Return of instance of anonymous, local or inner class",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>return</b> statements returning an instance of an anonymous, local, or inner class.\nSuch instances keep an implicit reference to the outer instance.\nWhich means the instance can prevent the outer instance from being garbage collected.\nAny caller of a method which returns such an instance might cause a memory leak by holding on to the instance returned.\n<p>\nUse the checkbox below to ignore returns from <b>protected</b> or package-private methods.\nReturns from <b>private</b> methods are always ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryEmptyArrayUsage",
          "displayName": "Unnecessary zero length array usage",
          "enabled": false,
          "description": "<html>\n<body>\nReports on allocations of arrays with known lengths of zero when there is a constant for that in the class of array's type.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ZeroLengthArrayInitialization",
          "displayName": "Zero-length array allocation",
          "enabled": false,
          "description": "<html>\n<body>\nReports on allocations of arrays with known lengths of zero. Since array lengths in\nJava are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly\nallocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or\nfootprint. Note that this inspection does not report zero-length arrays allocated as static final fields,\nas it is assumed that those arrays are being used to implement array sharing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousInnerClassMayBeStatic",
          "displayName": "Anonymous class may be a named 'static' inner class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any anonymous classes which may safely be made into a named <b>static</b> inner class.\nAn anonymous class may be <b>static</b> if it doesn't explicitly reference its enclosing instance or local classes from its surrounding method.\n<p>\nA <b>static</b> inner class does not keep an implicit reference to its enclosing instance.\nThis prevents a common cause of memory leaks and uses less memory per instance of the class.\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InnerClassMayBeStatic",
          "displayName": "Inner class may be 'static'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any inner classes which may safely be made <b>static</b>.\nAn inner class may be <b>static</b> if it doesn't reference its enclosing instance.\n<p>\nA <b>static</b> inner class does not keep an implicit reference to its enclosing instance.\nThis prevents a common cause of memory leaks and uses less memory per instance of the class.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Dependency issues",
      "inspections": [
        {
          "shortName": "ClassWithTooManyTransitiveDependencies",
          "displayName": "Class with too many transitive dependencies",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which are directly or indirectly dependent\non too many other classes. Such classes may be prone to instability,\nas changes to any of the classes it is dependent on may require changing the class.\nOnly top-level classes are reported by this inspection.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of direct or indirect dependencies\na class may have before triggering this inspection\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithTooManyTransitiveDependents",
          "displayName": "Class with too many transitive dependents",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes on which too many other classes are directly or indirectly dependent. Such classes may be expensive to modify,\nas changes to the class may require changing many other classes. Only top-level classes\nare reported by this inspection.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of direct or indirect dependents\na class may have before triggering this inspection\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CyclicClassDependency",
          "displayName": "Cyclic class dependency",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which are mutually or cyclically dependent on\nother classes. Such cyclic dependencies make for fragile code and high maintenance costs.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "Dependency",
          "displayName": "Illegal package dependencies",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection detects violations of rules specified for dependency validation. <br> <br>\n<!-- tooltip end -->\nUse the \"Configure dependency rules\" button below to customize validation rules.\n</body>\n</html>\n"
        },
        {
          "shortName": "ClassWithTooManyDependencies",
          "displayName": "Class with too many dependencies",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which are directly dependent on too many\nother classes in the project. Such classes may be prone to instability, as modifications\nto any of the classes it is dependent on may require changing the class. Only top-level\nclasses are reported by this inspection.\n<!-- tooltip end -->\n<p>\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<p>\nUse the field below to specify the maximum number of dependencies a class may have.\n\n</body>\n</html>"
        },
        {
          "shortName": "CyclicPackageDependency",
          "displayName": "Cyclic package dependency",
          "enabled": false,
          "description": "<html>\n<body>\nReports any packages which are mutually or cyclically dependent\non other packages. Such cyclic dependencies make for fragile code and high maintenance costs.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithTooManyDependents",
          "displayName": "Class with too many dependents",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes on which too many other classes\nare directly dependent. Such classes may be expensive to modify, as changes to the class may\nrequire changing many other classes. Only top-level classes are reported by this inspection.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of dependents a class may have before\ntriggering this inspection\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Application Servers",
      "inspections": [
        {
          "shortName": "Glassfish",
          "displayName": "GlassFish",
          "enabled": false,
          "description": "<!-- Copyright (c) 2004 - 2009 by Fuhrer Engineering AG, CH-2504 Biel/Bienne, Switzerland -->\n<html>\n<body>\n<table>\n    <tr>\n      <td valign=\"top\">\n\n        Reports various problems in XML descriptors used to deploy your application\n        to a <b><font color=\"#000080\">GlassFish</font></b> application server.\n      </td>\n    </tr>\n    <tr>\n        <td height=\"20\"><font face=\"verdana\" size=\"-2\">Powered by GlassFish Integration</font></td>\n    </tr>\n</table>\n</body>\n</html>\n"
        },
        {
          "shortName": "Weblogic",
          "displayName": "WebLogic",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in XML descriptors and other resources used to deploy your\napplication to a WebLogic server:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>"
        },
        {
          "shortName": "JBoss",
          "displayName": "JBoss",
          "enabled": false,
          "description": "<!-- Copyright (c) 2004 - 2009 by Fuhrer Engineering AG, CH-2504 Biel/Bienne, Switzerland -->\n<html>\n<body>\n<table>\n    <tr>\n      <td valign=\"top\">\n\n        Reports various problems in XML descriptors used to deploy your application\n        to a <b><font color=\"#000080\">JBoss</font></b> application server.\n      </td>\n    </tr>\n    <tr>\n        <td height=\"20\"><font face=\"verdana\" size=\"-2\">Powered by JBoss Integration</font></td>\n    </tr>\n</table>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "EditorConfig",
      "inspections": [
        {
          "shortName": "EditorConfigPairAcceptability",
          "displayName": "Pair unexpected",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports pairs of values that can't be used in current context.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigWildcardRedundancy",
          "displayName": "Wildcard redundancy",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports wildcard patterns that could be safely removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigReferenceCorrectness",
          "displayName": "Correctness of identifier reference",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports invalid referenced identifiers.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigShadowedOption",
          "displayName": "Meaningfulness of EditorConfig option",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports properties which don't affect the resulting code style.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigPartialOverride",
          "displayName": "Partial override",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports header with glob that has suspicious intersection with one of related globs. Example:\n[{foo, bar}] and [{foo, bas}] have non-empty intersection and none of them is subcase of the other.\nThis is likely to be a typo.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigNoMatchingFiles",
          "displayName": "No matching files",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports sections which don't match any files in the project.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigValueUniqueness",
          "displayName": "Uniqueness of value in list",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports repeated values in the list of the prohibited value repetitions.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigShadowingOption",
          "displayName": "Uniqueness of occurrence of EditorConfig option",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports properties that disable any other properties declared earlier in the file.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigEmptySection",
          "displayName": "Emptiness of EditorConfig section",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports sections which don't have any properties.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigValueCorrectness",
          "displayName": "Correctness of EditorConfig value",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports any unexpected values.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigPatternRedundancy",
          "displayName": "Redundancy of pattern enumeration",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports redundancy in patterns.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigCharClassRedundancy",
          "displayName": "Redundant char class",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports the file wildcard patterns with charclasses which have less than two symbols.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigRootDeclarationCorrectness",
          "displayName": "Correctness of root declaration",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports unexpected top-level declarations.\n</body>\n</html>"
        },
        {
          "shortName": "EditorConfigSpaceInHeader",
          "displayName": "Space in header",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports any suspicious spaces in the section's file wildcard pattern. Even though spaces can be used in the wildcard patterns, they are likely to be a typo.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigMissingRequiredDeclaration",
          "displayName": "Missing required declaration",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports declarations that miss required parts.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigHeaderUniqueness",
          "displayName": "Uniqueness of EditorConfig section",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports sections which match the same file patterns.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigCharClassLetterRedundancy",
          "displayName": "Duplicate letter in char class",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports duplicate characters in the section's file wildcard pattern.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigOptionRedundancy",
          "displayName": "Option redundancy",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports options that override other options but have the same properties and values.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigListAcceptability",
          "displayName": "List unexpected",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports lists of values that can't be used in current context.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigEmptyHeader",
          "displayName": "Empty header",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports sections which have an empty file wildcard pattern.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigKeyCorrectness",
          "displayName": "Correctness of EditorConfig key",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports unknown property values.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigPatternEnumerationRedundancy",
          "displayName": "Redundant pattern enumeration",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports pattern enumerations that contain only one possible pattern.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigRootDeclarationUniqueness",
          "displayName": "Uniqueness of top-level declaration",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nChecks that an EditorConfig file has only one top-level declaration.\n</body>\n</html>"
        },
        {
          "shortName": "EditorConfigUnexpectedComma",
          "displayName": "Unexpected comma",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports any commas that are not allowed in the current context.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigDeprecatedDescriptor",
          "displayName": "Deprecation of EditorConfig element",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports deprecated properties.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigUnusedDeclaration",
          "displayName": "Unused declaration",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports unused declarations.\n</body>\n</html>\n"
        },
        {
          "shortName": "EditorConfigNumerousWildcards",
          "displayName": "Too many wildcards",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports sections that contain too many wildcards. They might lead to performance issues.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Javadoc",
      "inspections": [
        {
          "shortName": "JavaDoc",
          "displayName": "Declaration has Javadoc problems",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection points out the following javadoc comment flaws: <br> <br>\n&nbsp;- no javadoc where it is required <br>\n&nbsp;- required tag is missing <br>\n&nbsp;- invalid or incomplete tag <br>\n&nbsp;- javadoc description is missing or incomplete <br> <br>\n<!-- tooltip end -->\nUse tabs and corresponding inspection options below, to define visibility scope where javadoc is required, as well as the\nrequired javadoc tags for classes, methods, fields and inner classes.\n</body>\n</html>\n"
        },
        {
          "shortName": "JavadocHtmlLint",
          "displayName": "HTML problems in Javadoc (DocLint)",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects HTML issues in the Javadoc comments (such as unclosed, empty, or misplaced tags) outlawed since Java 8.\n</body>\n</html>"
        },
        {
          "shortName": "PackageDotHtmlMayBePackageInfo",
          "displayName": "'package.html' may be converted to 'package-info.java'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>package.html</b> files. These files are used for documenting\npackages. Since J2SE 5 it is recommended to use <b>package-info.java</b> files instead, since such\nfiles can also contain package annotations.  In this way, package-info.java becomes the\nsole repository for package level annotations and documentation.\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryInheritDoc",
          "displayName": "Unnecessary {@inheritDoc} Javadoc comment",
          "enabled": false,
          "description": "<html>\n<body>\nReports any Javadoc comments which contain only the <b>{@inheritDoc}</b>\ntag. Since Javadoc copies the super class' comment if no comment is present, a\ncomment containing only an <b>{@inheritDoc}</b> adds nothing.\n<p>\nAlso reports <b>{@inheritDoc}</b> usages in invalid locations, for example on fields.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JavadocReference",
          "displayName": "Declaration has problems in Javadoc references",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection points out unresolved references inside javadoc\n</body>\n</html>\n"
        },
        {
          "shortName": "MissingDeprecatedAnnotation",
          "displayName": "Missing @Deprecated annotation",
          "enabled": true,
          "description": "<html>\n<body>\nReports any module declarations, classes, fields, or methods which have the <b>@deprecated</b>\njavadoc tag but do not have the <b>@java.lang.Deprecated</b> annotation.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n<p>\nUse the checkbox below to warn on symbols annotated with <b>@Deprecated</b> without a corresponding explanation in a\n<b>@deprecated</b> Javadoc tag.\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryJavaDocLink",
          "displayName": "Unnecessary Javadoc link",
          "enabled": false,
          "description": "<html>\n<body>\nReports any Javadoc <b>@see</b>,\n<b>{@link}</b> and <b>{@linkplain}</b>\ntags which reference the method owning the comment, the super method of the\nmethod owning the comment or the class containing the comment. Such links are\nunnecessary and can be safely removed using this inspections quickfix. The\nquickfix will remove the entire Javadoc comment if the link is its only content.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore inline links (<b>{@link}</b> and <b>{@linkplain}</b>)\nto super methods. While a link to all super methods is automatically added by the\nJavadoc tool, an inline link to the super method can occasionally be needed in\nthe text of the Javadoc.\n\n</body>\n</html>"
        },
        {
          "shortName": "MissingPackageInfo",
          "displayName": "Missing 'package-info.java'",
          "enabled": false,
          "description": "<html>\n<body>\nReports packages that contain classes but do not contain a <b>package-info.java</b> or <b>package.html</b> file and thus are\nmissing package documentation.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "DanglingJavadoc",
          "displayName": "Dangling Javadoc comment",
          "enabled": false,
          "description": "<html>\n<body>\nReports dangling Javadoc comments.\nJavadoc comment are dangling if they don't belong to any class, method or field.\nFor example a Javadoc comment in between method declarations that have their own javadoc comments.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlTagCanBeJavadocTag",
          "displayName": "<code>...</code> can be replaced with {@code ...}",
          "enabled": false,
          "description": "<html>\n<body>\nReports use of <b>&lt;code&gt;</b> tags in Javadoc comments. Since JDK1.5\nthese constructs may be replaced with <b>{@code ...}</b> constructs. This allows the use of angle brackets (&lt;, &gt;)\ninside the comment, instead of HTML character entities.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "PackageInfoWithoutPackage",
          "displayName": "'package-info.java' without 'package' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>package-info.java</b> files without a <b>package</b> statement.\nThe Javadoc tool considers such files documentation for the default package even when the file is located somewhere else.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Security",
      "inspections": [
        {
          "shortName": "UnsecureRandomNumberGeneration",
          "displayName": "Insecure random number generation",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <b>java.lang.Random</b> or\n<b>java.lang.math.Random()</b>. In secure environments,\n<b>java.secure.SecureRandom</b> is a better choice, offering cryptographically secure\nrandom number generation.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CloneableClassInSecureContext",
          "displayName": "Cloneable class in secure context",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which may be cloned. A class\nmay be cloned if it supports the <b>Cloneable</b> interface,\nand its <b>clone()</b> method is not defined to immediately\nthrow an error. Cloneable classes may be dangerous in code intended for secure use.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalClone",
          "displayName": "Non-final 'clone()' in secure context",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>clone()</b> methods which\nare not declared <b>final</b>. Since <b>clone()</b> may\nbe used to instantiate objects without using a constructor, allowing the <b>clone()</b>\nmethod to be overridden may result in corrupted objects, and possible security\nexploits. This may be prevented by making the <b>clone()</b>\nmethod <b>final</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CustomSecurityManager",
          "displayName": "Custom SecurityManager",
          "enabled": false,
          "description": "<html>\n<body>\nReports any user-defined subclasses of <b>java.lang.SecurityManager</b>.\nWhile not necessarily representing a security hole, such classes should be thoroughly\nand professionally inspected for possible security issues.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JDBCPrepareStatementWithNonConstantString",
          "displayName": "Call to 'Connection.prepare*()' with non-constant string",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.sql.Connection.prepareStatement()</b>,\n<b>java.sql.Connection.prepareCall()</b>, or any\nof their variants, which take a dynamically-constructed string as the statement to prepare.\nConstructed SQL statements are a common source of security breaches.\nBy default this inspection ignores compile-time constants.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to consider any <b>static</b> <b>final</b> fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n<pre>\n<code><b>private static final</b> String SQL =\n  \"SELECT * FROM user WHERE name='\" + getUserInput() + \"'\";</code>\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "PublicStaticArrayField",
          "displayName": "'public static' array field",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>public</b> <b>static</b> array fields. Often used\nto store arrays of constant values, these fields nonetheless represent a security\nhazard, as their contents may be modified, even if the field is declared as <b>final</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JDBCExecuteWithNonConstantString",
          "displayName": "Call to 'Statement.execute()' with non-constant string",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.sql.Statement.execute()</b>, or any\nof its variants, which take a dynamically-constructed string as the query to execute.\nConstructed SQL statements are a common source of security breaches.\nBy default this inspection ignores compile-time constants.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to consider any <b>static</b> <b>final</b> fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n<pre>\n<code><b>private static final</b> String SQL =\n  \"SELECT * FROM user WHERE name='\" + getUserInput() + \"'\";</code>\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NonStaticInnerClassInSecureContext",
          "displayName": "Non-'static' inner class in secure context",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>static</b> inner classes.\nCompilation of such classes causes the creation of hidden, package-visible methods on the parent class, which may\ncompromise security.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassLoaderInstantiation",
          "displayName": "ClassLoader instantiation",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instantiations of <b>java.lang.ClassLoader</b> objects.\nWhile often benign, any instantiations to <b>ClassLoader</b> should be closely examined in any security audit.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LoadLibraryWithNonConstantString",
          "displayName": "Call to 'System.loadLibrary()' with non-constant string",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.lang.System.loadLibrary()</b>, <b>java.lang.System.load()</b>, <b>java.lang.Runtime.loadLibrary()</b>\nand <b>java.lang.Runtime.load()</b>\nwhich take a dynamically-constructed string as the name of the library.\nConstructed library name strings are a common source of security breaches.\nBy default this inspection ignores compile-time constants.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to consider any <b>static</b> <b>final</b> fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n<pre>\n<code><b>private static final</b> String LIBRARY = getUserInput();</code>\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SerializableDeserializableClassInSecureContext",
          "displayName": "Serializable class in secure context",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which may be serialized or deserialized. A class\nmay be serialized if it supports the <b>Serializable</b> interface,\nand its <b>readObject()</b> and <b>writeObject()</b> methods are not defined to always\nthrow an exception. Serializable classes may be dangerous in code intended for secure use.\n<!-- tooltip end -->\n<p>\n  Use the table below to specify what specific classes and their inheritors should be excluded\n  from being checked by this inspection. This is meant for those classes which, although they inherit\n  Serializable from a superclass, are not intended for serialization. Such classes would lead this\n  inspection to report unnecessarily. <br>\n  Note that it may be more secure to add <b>readObject()</b> and <b>writeObject()</b> methods which always throw an exception, instead.\n<p>\n  Use the checkbox below to ignore <b>Serializable</b> anonymous classes.\n<p>\n<p><small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "CustomClassloader",
          "displayName": "Custom ClassLoader",
          "enabled": false,
          "description": "<html>\n<body>\nReports any user-defined subclasses of <b>java.lang.ClassLoader</b>.\nWhile not necessarily representing a security hole, such classes should be thoroughly\nand professionally inspected for possible security issues.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DesignForExtension",
          "displayName": "Design for extension",
          "enabled": false,
          "description": "<html>\n<body>\nReports any methods which are not <b>static</b>,\n<b>private</b>, <b>final</b> or <b>abstract</b>,\nand whose bodies are not empty. Coding in a style that avoids such methods protects\nthe contracts of classes from being broken by their subclasses. The benefit of this style is that\nsubclasses cannot corrupt the state of the superclass by forgetting to call the super method.\nThe cost is that subclasses are limited in their flexibility, in particular they cannot prevent\nexecution of code in the superclass.\n<p>\nThis inspection is intended for code to be used in secure environments, and is probably not\nappropriate for less restrictive environments.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicStaticCollectionField",
          "displayName": "'public static' collection field",
          "enabled": false,
          "description": "<html>\n<body>\nReports modifiable <b>public</b> <b>static</b> Collection fields. Often used\nto store collections of constant values, these fields nonetheless represent a security\nhazard, as their contents may be modified, even if the field is declared as <b>final</b>.\n<!-- tooltip end -->\n<p>\n  Use the table below to specify methods returning unmodifiable collections.\n  <b>public</b> <b>static</b> Collection fields initialized with these methods will not be reported.\n</body>\n</html>"
        },
        {
          "shortName": "SystemSetSecurityManager",
          "displayName": "Call to 'System.setSecurityManager()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>System.setSecurityManager()</b>.\nWhile often benign, any call to <b>System.setSecurityManager()</b> should be closely examined in any security audit.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RuntimeExecWithNonConstantString",
          "displayName": "Call to 'Runtime.exec()' with non-constant string",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.lang.Runtime.exec()</b> or any\nof its variants which take a dynamically-constructed string as the command to execute.\nConstructed execution strings are a common source of security breaches.\nBy default this inspection ignores compile-time constants.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to consider any <b>static</b> <b>final</b> fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n<pre>\n<code><b>private static final</b> String COMMAND =\n  \"ping \" + getDomainFromUserInput() + \"'\";</code>\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SystemProperties",
          "displayName": "Access of system properties",
          "enabled": false,
          "description": "<html>\n<body>\nReports any accesses of the System properties. While accessing the\nSystem properties is not a security risk in it self, it is often found in malicious code.\nAccesses to System properties should be closely examined in any security audit.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 7",
      "inspections": [
        {
          "shortName": "EqualsReplaceableByObjectsCall",
          "displayName": "'equals()' expression replaceable by 'Objects.equals()' expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports expressions that can be replaced with a call to <code>java.util.Objects.equals()</code>, which is available since JDK 1.7.\nFor example:\n<p>\n  <code><pre>a == b || a != <b>null</b> && a.equals(b)</pre></code>\n<br>\n  <code><pre>a != <b>null</b> ? a.equals(b) : b == <b>null</b></pre></code>\n</p>\n<!-- tooltip end -->\n<p>\n  Replacing expressions like <code><pre>a != null && a.equals(b)</pre></code> with\n  <code><pre>Objects.equals(a, b)</pre></code> slightly changes the semantics,\n  but if that's what you need there's a check box for that in the inspection settings.\n<p>This inspection only reports if the language level of the project or module is 7 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "TryWithIdenticalCatches",
          "displayName": "Identical 'catch' branches in 'try' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports identical <b>catch</b> sections in a single <b>try</b> statement. Such sections can be collapsed into\na multi-catch section.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 7 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "Convert2Diamond",
          "displayName": "Explicit type can be replaced with <>",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports all new expressions with type arguments which can be replaced with diamond type &lt;&gt;\n  <p>\n  Such <b>&lt;&gt;</b> syntax is not supported under Java 1.6 or earlier JVMs.\n</body>\n</html>\n"
        },
        {
          "shortName": "SafeVarargsDetector",
          "displayName": "Possible heap pollution from parameterized vararg type",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports all methods with variable arity which can be annotated as @SafeVarargs.\n  @SafeVarargs annotation suppresses unchecked warnings about parameterized array creation at call sites.\n  <p>\n  This annotation is not supported under Java 1.6 or earlier JVMs.\n</body>\n</html>"
        },
        {
          "shortName": "TryFinallyCanBeTryWithResources",
          "displayName": "'try finally' replaceable with 'try' with resources",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>try finally</b> statements which can use Java 7\nAutomatic Resource Management. A quickfix is available to convert the <b>try finally</b>\nstatement into a <b>try</b> with resources statement.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 7 or higher</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Style issues",
      "inspections": [
        {
          "shortName": "UnusedMainParameter",
          "displayName": "Main parameter is not necessary",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports an unused main function parameter which is not necessary since Kotlin 1.3.\n</body>\n</html>\n"
        },
        {
          "shortName": "Destructure",
          "displayName": "Use destructuring declaration",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports declarations that can be destructured.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSizeZeroCheckWithIsEmpty",
          "displayName": "Replace size zero check with 'isEmpty()'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects <b>size == 0</b> checks of <b>Collections/Array/String</b> that should be replaced with <b>isEmpty()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "DeferredIsResult",
          "displayName": "Function returning Deferred directly",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports functions with <b>kotlinx.coroutines.Deferred</b> result.\n\nFunctions which use <b>Deferred</b> as return type should have a name with suffix <b>Async</b>.\nOtherwise, it's recommended to turn a function into a suspend function and unwrap <b>Deferred</b>.\n</body>\n</html>"
        },
        {
          "shortName": "JavaMapForEach",
          "displayName": "Java Map.forEach method call should be replaced with Kotlin's forEach",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a Java Map.<b>forEach</b> method call replaceable by Kotlin's <b>forEach</b>.\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyBooleanWithConstants",
          "displayName": "Boolean expression that can be simplified",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports boolean expressions that have parts which can be reduced to constants.\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifyAssertNotNull",
          "displayName": "‘assert’ call can be replaced with ‘!!’ or ‘?:'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects <b>assert</b> calls checking that a variable declared above has a non-null value.\nSuch asserts can be replaced with a use of <b>!!</b> or <b>?:</b> operator in the variable initializer.\n</body>\n</html>\n"
        },
        {
          "shortName": "IfThenToElvis",
          "displayName": "If-Then foldable to '?:'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>if-then</b> expressions that can be folded into elvis (<b>?:</b>) expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "MapGetWithNotNullAssertionOperator",
          "displayName": "map.get() with not-null assertion operator (!!)",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>map.get()!!</b> that can be replaced with <b>map.getValue()</b>, <b>map.getOrElse()</b>, etc.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceJavaStaticMethodWithKotlinAnalog",
          "displayName": "Replace Java static method with Kotlin analog",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a Java static method call replaceable by a Kotlin function, e.g. <b>System.out.println()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertCallChainIntoSequence",
          "displayName": "Call chain on collection could be converted into 'Sequence' to improve performance",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports call chain on collection should be converted into <b>Sequence</b>.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceToStringWithStringTemplate",
          "displayName": "Replace 'toString' with string template",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <code>toString</code> function calls replaceable with string template.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceSubstringWithIndexingOperation",
          "displayName": "Replace 'substring' call with indexing operation call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls like <b>\"abc\".substring(0, 1)</b> replaceable with <b>\"abc\"[0]</b>.\n</body>\n</html>"
        },
        {
          "shortName": "SafeCastWithReturn",
          "displayName": "Safe cast with 'return' should be replaced with 'if' type check",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports safe cast with 'return' should be replaced with 'if' type check. For example:\n<br /><br />\n<pre>\nfun test(x: Any) {\n    <b>x as? String ?: return</b> // Should be replaced with '<b>if (x !is String) return</b>'\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "DirectUseOfResultType",
          "displayName": "Function returning Result directly",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports functions with <b>Result</b> result.\n\n<b>Result</b> should never be used as return type.\nThrow exception, or use nullable type, or use domain-specific result class to indicate failure.\n</body>\n</html>"
        },
        {
          "shortName": "MoveVariableDeclarationIntoWhen",
          "displayName": "Variable declaration could be moved inside `when`",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports the variable declaration that can be moved inside <code>when</code> expression.\n</body>\n</html>"
        },
        {
          "shortName": "MoveLambdaOutsideParentheses",
          "displayName": "Lambda argument inside parentheses",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects a lambda expression inside parentheses which can be moved outside of them.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceToWithInfixForm",
          "displayName": "Replace ’to’ with infix form",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>to</b> function calls replaceable with the infix form.\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableCallChain",
          "displayName": "Call chain on collection type can be simplified",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports two-call chains replaceable by a single call, e.g. <b>map {}.filterNotNull()</b> to <b>mapNotNull {}</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantAsync",
          "displayName": "Redundant 'async' call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>async</b> call that is immediately followed by <b>await</b>.\nSuch a call can be replaced with a kind of blocking call.\n</body>\n</html>"
        },
        {
          "shortName": "ReplacePutWithAssignment",
          "displayName": "map.put() can be converted to assignment",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>map.put</b> function calls replaceable with the indexing operator (<b>[]</b>).\n</body>\n</html>"
        },
        {
          "shortName": "AddVarianceModifier",
          "displayName": "Type parameter can have 'in' or 'out' variance",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports type parameters that can have an <b>in</b> or <b>out</b> variance.\nUsage of <b>in</b> and <b>out</b> variances leads to more precise type inference in Kotlin.\n</body>\n</html>\n"
        },
        {
          "shortName": "LiftReturnOrAssignment",
          "displayName": "Return or assignment can be lifted out",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>if</b>, <b>when</b> and <b>try</b> statements that can be converted to expressions\nby lifting a return or an assignment out. Typical example:\n<br /><br />\n\n<pre>\n<b>fun</b> foo(arg: Boolean): String {\n    <b>when</b> (arg) {\n        <b>true</b> -> <b>return</b> \"Truth\"\n        <b>false</b> -> <b>return</b> \"Falsehood\"\n    }\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "JavaCollectionsStaticMethod",
          "displayName": "Java Collections static method call can be replaced with Kotlin stdlib",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a Java <b>Collections</b> static method call replaceable by Kotlin stdlib, e.g. <b>Collections.sort(list)</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "BooleanLiteralArgument",
          "displayName": "Boolean literal argument without parameter name",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports boolean literal arguments that could be named to remove ambiguity.\n</body>\n</html>\n"
        },
        {
          "shortName": "Reformat",
          "displayName": "File is not formatted according to project settings",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports places that are not formatted according to project settings.\n</body>\n</html>\n"
        },
        {
          "shortName": "LoopToCallChain",
          "displayName": "Loop can be replaced with stdlib operations",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>for</b> loops that can be replaced with a sequence of stdlib operations (like <b>map</b>, <b>filter</b>, etc).\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertPairConstructorToToFunction",
          "displayName": "Convert Pair constructor to 'to' function",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a <b>Pair</b> constructor that can be converted to a <b>to</b> function call.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceRangeToWithUntil",
          "displayName": "'rangeTo' or the '..' call can be replaced with 'until'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls to <b>rangeTo</b> or the <b>..</b> operator instead of calls to <b>until</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveEmptyParenthesesFromAnnotationEntry",
          "displayName": "Remove unnecessary parentheses",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports unnecessary parentheses in annotation entries. For example:\n<br /><br />\n<pre>\nannotation class MyAnnotation\n\n@MyAnnotation<b>()</b> // There parentheses can be omitted\nfun test() {\n\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "ConvertToStringTemplate",
          "displayName": "String concatenation that can be converted to string template",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports string concatenation that can be converted to a simple string template (the one with no <b>${...}</b> entries).\n</body>\n</html>\n"
        },
        {
          "shortName": "ProtectedInFinal",
          "displayName": "'protected' visibility is effectively 'private' in a final class",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>protected</b> visibility used inside of a non-inheritable class.\nIn such cases <b>protected</b> members are accessible only in the class itself, so they are effectively <b>private</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "FunctionWithLambdaExpressionBody",
          "displayName": "Function with `= { ... }` and inferred return type",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports function with `<b>= { ... }</b>` and inferred return type.\n\n<pre>\nfun sum(a: Int, b: Int) = { a + b } // The return type of this function is '() -> Int'.\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceRangeStartEndInclusiveWithFirstLast",
          "displayName": "Replace Range 'start' or 'endInclusive' with 'first' or 'last'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports usages of <b>boxed</b> <code>Range.start</code> and <code>Range.endInclusive</code> properties.\nThese properties can be replaced with <b>unboxed</b> <code>first</code> and <code>last</code> properties.\nExample: <b>range.start</b> can be replaced with <b>range.first</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSubstringWithSubstringAfter",
          "displayName": "Replace 'substring' call with 'substringAfter' call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls like <b>s.substring(s.indexOf(x))</b> replaceable with <b>s.substringAfter(x)</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantRunCatching",
          "displayName": "Redundant 'runCatching' call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>runCatching</b> call that is immediately followed by <b>getOrThrow</b>.\nSuch a call can be replaced with just <b>run</b> call.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceManualRangeWithIndicesCalls",
          "displayName": "Convert manual ranges to indices or iteration over collection",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>until</b> and <b>..</b> operator usages that are replaceable with <b>Collection.indices</b>\nor iteration over collection inside <b>for</b> loop.</body>\n</html>"
        },
        {
          "shortName": "CascadeIf",
          "displayName": "Cascade if can be replaced with when",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>if</b> statements with three or more branches that can be replaced with a <b>when</b> expression.\n</body>\n</html>"
        },
        {
          "shortName": "MayBeConstant",
          "displayName": "Might be 'const'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports an object and a top-level <b>val</b> that might be declared as <b>const</b>\nfor better performance and Java interoperability.\n</body>\n</html>\n"
        },
        {
          "shortName": "IfThenToSafeAccess",
          "displayName": "If-Then foldable to '?.'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>if-then</b> expressions that can be folded into safe-access (<b>?.</b>) expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertTryFinallyToUseCall",
          "displayName": "Convert try / finally to use() call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a <b>try-finally</b> block with <b>resource.close()</b> in <b>finally</b> which can be converted to a <b>resource.use()</b> call.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceAssertBooleanWithAssertEquality",
          "displayName": "Replace assert boolean with assert equality",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports assert boolean function calls replaceable with assert equality function.\nExample: <b>assertTrue(a == b)</b> can be replaced by <b>assertEquals(a, b)</b>.\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousAsDynamic",
          "displayName": "Suspicious 'asDynamic' member invocation",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a suspicious <b>asDynamic</b> member invocation.\n</body>\n</html>"
        },
        {
          "shortName": "ConvertLambdaToReference",
          "displayName": "Can be replaced with function reference",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a lambda (function literal) expression that can be replaced with a function reference expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceCollectionCountWithSize",
          "displayName": "Collection count can be converted to size",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports usages of collection <code>count()</code>. These function calls can be replaced with <code>size</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "OptionalExpectation",
          "displayName": "Optionally expected annotation has no actual annotation",
          "enabled": false,
          "description": "<html>\n<body>\nThis special inspection reports optionally expected annotations without actual annotation in some platform modules.\n</body>\n</html>"
        },
        {
          "shortName": "UnlabeledReturnInsideLambda",
          "displayName": "Unlabeled return inside lambda",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports unlabeled <b>return</b> inside lambda.\n</body>\n</html>\n"
        },
        {
          "shortName": "JoinDeclarationAndAssignment",
          "displayName": "Join declaration and assignment",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports property declarations that can be joined with the following assignment.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantElseInIf",
          "displayName": "Redundant 'else' in 'if'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant <b>else</b> in <b>if</b> with <b>return</b>:\n\n<pre>\nfun foo(arg: Boolean): Int {\n    if (arg) return 0\n    // This else is redundant, code in braces could be just shifted left\n    else {\n        ...\n    }\n}\n</pre>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceNegatedIsEmptyWithIsNotEmpty",
          "displayName": "Replace negated 'isEmpty' with 'isNotEmpty'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>!collection.isEmpty()/isNotEmpty()</b> call can be replaced with <b>collection.isNotEmpty()/isEmpty()</b>.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantObjectTypeCheck",
          "displayName": "Redundant type checks for object",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant type checks for an object.\n</body>\n</html>"
        },
        {
          "shortName": "FoldInitializerAndIfToElvis",
          "displayName": "If-Null return/break/... foldable to '?:'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports an <b>if</b> expression checking variable being null or not right after initializing it that can be converted into an elvis operator in the initializer.\n</body>\n</html>\n"
        },
        {
          "shortName": "NestedLambdaShadowedImplicitParameter",
          "displayName": "Nested lambda has shadowed implicit parameter",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a nested lambda with shadowed implicit parameter.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceStringFormatWithLiteral",
          "displayName": "Replace with string templates",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>String.format</b> call can be replaced with string templates.\n</body>\n</html>\n"
        },
        {
          "shortName": "SortModifiers",
          "displayName": "Non-canonical modifier order",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports modifiers which have a different order from the one recommended in the style guide,\nand offers to reorder them.\n</body>\n</html>\n"
        },
        {
          "shortName": "ObjectLiteralToLambda",
          "displayName": "Object literal can be converted to lambda",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports an anonymous object literal implementing a Java interface with a single abstract method that can be converted into a call with a lambda expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSubstringWithDropLast",
          "displayName": "Replace 'substring' call with 'dropLast' call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls like <b>s.substring(0, s.length - x)</b> replaceable with <b>s.dropLast(x)</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "IntroduceWhenSubject",
          "displayName": "'when' that can be simplified by introducing an argument",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a <b>when</b> expression that can be simplified by introducing a subject argument.\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifiableCall",
          "displayName": "Library function call could be simplified",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports library function calls which could be replaced by simplified one,\ne.g. <b>flatMap { it }</b> call could be simplified to <b>flatten()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSubstringWithTake",
          "displayName": "Replace 'substring' call with 'take' call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls like <b>s.substring(0, x)</b> replaceable with <b>s.take(x)</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceCallWithBinaryOperator",
          "displayName": "Can be replaced with binary operator",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports function calls that can be replaced with binary operators, especially comparison-related.\nExample: <b>2.compareTo(1) > 0</b> can be replaced by <b>2 > 1</b>.\n</body>\n</html>"
        },
        {
          "shortName": "ScopeFunctionConversion",
          "displayName": "Scope function can be converted to another one",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection provides actions for converting scope functions (<b>let</b>, <b>run</b>, <b>apply</b>, <b>also</b>) between each other.\n</body>\n</html>"
        },
        {
          "shortName": "CopyWithoutNamedArguments",
          "displayName": "'copy' method of data class is called without named arguments",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls to a data class' <b>copy</b> method without named arguments.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertTwoComparisonsToRangeCheck",
          "displayName": "Two comparisons should be converted to a range check",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports two consecutive comparisons which can be converted to a range check.\n</body>\n</html>"
        },
        {
          "shortName": "CanBeVal",
          "displayName": "Local 'var' is never modified and can be declared as 'val'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports mutable local variables (declared with a <b>var</b> keyword) that can be made immutable.\n</body>\n</html>\n"
        },
        {
          "shortName": "UsePropertyAccessSyntax",
          "displayName": "Accessor call that can be replaced with property access syntax",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls to Java <b>get</b> and <b>set</b> methods that can be replaced with the use of Kotlin synthetic properties.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceGetOrSet",
          "displayName": "Explicit 'get' or 'set' call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports explicit calls of <b>get</b> or <b>set</b> functions which can be replaced by an indexing operator <b>[]</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "AddOperatorModifier",
          "displayName": "Function should have 'operator' modifier",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a function that matches one of the operator conventions but is not annotated as <b>operator</b>.\n</body>\n</html>"
        },
        {
          "shortName": "ConvertSecondaryConstructorToPrimary",
          "displayName": "Convert to primary constructor",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a secondary constructor that can be replaced with a more concise primary constructor.\n</body>\n</html>\n"
        },
        {
          "shortName": "UseWithIndex",
          "displayName": "Manually incremented index variable can be replaced with use of 'withIndex()'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>for</b> loops with a manually incremented index variable that can be replaced with the use of a <b>withIndex()</b> function.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceAssociateFunction",
          "displayName": "Replace 'associate' with 'associateBy' or 'associateWith'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>associate</b> calls that can be replaced with <b>associateBy</b> or <b>associateWith</b>.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceNotNullAssertionWithElvisReturn",
          "displayName": "Replace '!!' with '?: return'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports not-null assertion (<b>!!</b>) calls that can be replaced with elvis and return (<b>?: return</b>). For example:\n<br /><br />\n<pre>\nval number: Int? = 42\nfun foo() {\n    val a = number!! // Replace '!!' with '?: return'\n    println(1 + a)\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceArrayOfWithLiteral",
          "displayName": "'arrayOf' call can be replaced with array literal [...]",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>arrayOf</b> calls that can be replaced with array literals <b>[...]</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertReferenceToLambda",
          "displayName": "Can be replaced with lambda",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a function reference expression that can be replaced with a lambda.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSubstringWithSubstringBefore",
          "displayName": "Replace 'substring' call with 'substringBefore' call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls like <b>s.substring(0, s.indexOf(x))</b> replaceable with <b>s.substringBefore(x)</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "NullableBooleanElvis",
          "displayName": "Equality check can be used instead of elvis for nullable boolean check",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports when an equality check should be used instead of the elvis operator.\n</body>\n</html>"
        },
        {
          "shortName": "UseExpressionBody",
          "displayName": "Expression body syntax is preferable here",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports returns (one-liners or <b>when</b>s) replaceable by expression body syntax.\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifyNegatedBinaryExpression",
          "displayName": "Negated boolean expression that can be simplified",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports negated binary expressions that can be simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceWithOperatorAssignment",
          "displayName": "Assignment that can be replaced with operator assignment",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports modifications of variables with a simple assignment (such as <b>y = y + x</b>)\nthat can be replaced with an operator assignment.\n</body>\n</html>"
        },
        {
          "shortName": "MemberVisibilityCanBePrivate",
          "displayName": "Class member can have 'private' visibility",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceSizeCheckWithIsNotEmpty",
          "displayName": "Replace size check with 'isNotEmpty()'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects size checks of <b>Collections/Array/String</b> that should be replaced with <b>isNotEmpty()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ImplicitThis",
          "displayName": "Implicit 'this'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports usages of implicit <b>this</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceGuardClauseWithFunctionCall",
          "displayName": "Replace guard clause with kotlin's function call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports guard clause that can be replaced with kotlin's function call. For example:\n<br /><br />\n<pre>\nfun test(foo: Int?) {\n    if (foo == null) throw IllegalArgumentException(\"foo\") // Replace guard clause with kotlin's function call\n}\n</pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 8",
      "inspections": [
        {
          "shortName": "LambdaCanBeMethodCall",
          "displayName": "Lambda can be replaced with method call",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda expressions which could be replaced with JDK method call.\n<p>For example, the expression <code>x -&gt; x</code> of type <code>Function&lt;T, T&gt;</code>\n  could be replaced with <code>Function.identity()</code> call.</p>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Anonymous2MethodRef",
          "displayName": "Anonymous type can be replaced with method reference",
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous types which can be replaced with method references.\n<p>\n  Note that if an anonymous class is converted into an unbound method reference, the same method reference object \n  can be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used, \n  separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, \n  e.g. when anonymous class instances are used as <code>HashMap</code> keys.\n</p>\n<p>\nMethod references syntax is not supported under Java 1.7 or earlier JVMs.\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyForEach",
          "displayName": "Simplifiable forEach() call",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>forEach()</b> calls which can be replaced with more concise method or from which intermediate steps can be extracted.\n<p>\nThe Stream API is not available under Java 7 or earlier JVMs\n<p>\n<small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "ComparatorCombinators",
          "displayName": "Comparator combinator can be used",
          "enabled": false,
          "description": "<html>\n<body>\nReports Comparators defined as lambda expressions which could be expressed using\nmethods like <code>Comparator.comparing()</code>.\n<p>Some comparators like <code>(person1, person2) -> person1.getName().compareTo(person2.getName())</code>\n  could be simplified like this: <code>Comparator.comparing(Person::getName)</code>.</p>\n<p>Also suggests to replace chain comparisons with Comparator.thenComparing(), e.g.\n  <code>\n    int res = o1.first.compareTo(o2.first);\n    if(res == 0) res = o1.second.compareTo(o2.second);\n    if(res == 0) res = o1.third - o2.third;\n    return res;\n  </code> will be replaced with\n  <code>\n    objs.sort(Comparator.comparing((Obj o) -> o.first).thenComparing(o -> o.second).thenComparingInt(o -> o.third));\n  </code>\n</p>\n<!-- tooltip end -->\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Java8ListSort",
          "displayName": "Collections.sort() can be replaced with List.sort()",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Collections.sort(list, comparator)</code> which could be replaced with <code>list.sort(comparator)</code>.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Convert2Lambda",
          "displayName": "Anonymous type can be replaced with lambda",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports all anonymous classes which can be replaced with lambda expressions.\n  <p>\n    Note that if an anonymous class is converted into a stateless lambda, the same lambda object \n    can be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,\n    separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, \n    e.g. when anonymous class instances are used as <code>HashMap</code> keys.\n  </p>\n  <p>\n  Lambda syntax is not supported under Java 1.7 or earlier JVMs.\n</body>\n</html>\n"
        },
        {
          "shortName": "Java8CollectionRemoveIf",
          "displayName": "Loop can be replaced with Collection.removeIf()",
          "enabled": false,
          "description": "<html>\n<body>\nReports loops which could be collapsed into single <code>Collection.removeIf</code> call.\n<p>For example:</p>\n<pre>\n  for (Iterator&lt;String&gt; it = collection.iterator(); it.hasNext(); ) {\n    String aValue = it.next();\n    if(shouldBeRemoved(aValue)) {\n      it.remove();\n    }\n  }\n</pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Java8MapApi",
          "displayName": "Single Map method can be used",
          "enabled": false,
          "description": "<html>\n<body>\nReports common usage patterns of <code>java.util.Map</code> that could be replaced with Java 8 methods:\n<code>getOrDefault()</code>, <code>computeIfAbsent()</code>, <code>putIfAbsent()</code>, <code>merge()</code>, or <code>replaceAll()</code>.\n<p>Examples:</p>\n<ul>\n  <li>The <b>Map.getOrDefault</b> method can be used in:\n    <pre>\n      String val = map.containsKey(key) ? map.get(key) : \"none\";</pre>\n  </li>\n  <li>The <b>Map.computeIfAbsent</b> method can be used in:\n    <pre>\n      List&lt;String&gt; list = map.get(key);\n      if (list == null) {\n        list = new ArrayList&lt;&gt;();\n        map.put(key, list);\n      }</pre>\n  </li>\n  <li>The <b>Map.putIfAbsent</b> method can be used in:\n    <pre>\n      String val = map.get(key);\n      if (val == null) map.put(key, newVal);</pre>\n  </li>\n  <li>The <b>Map.merge</b> method can be used in:\n    <pre>\n      Integer val = map.get(key);\n      if (val == null) map.put(key, 1);\n      else map.put(key, val + 1);</pre>\n  </li>\n  <li>The <b>Map.replaceAll</b> method can be used in:\n    <pre>\n      for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) {\n        map.put(entry.getKey(), transform(entry.getValue()));\n      }\n    </pre>\n  </li>\n\n</ul>\n<p>Note that the replacement with <code>computeIfAbsent()</code> or <code>merge()</code> might work incorrectly for some <code>Map</code>\nimplementations if the code extracted to the lambda expression modifies the same <code>Map</code>. By default,\nthe warning doesn’t appear if this code might have side effects. If necessary, enable the last checkbox to always show the warning.</p>\n<p>Also, due to different handling of the <code>null</code> value in old methods like <code>put()</code> and newer methods like \n<code>computeIfAbsent()</code> or <code>merge()</code>, semantics might change if storing the <code>null</code> value into given \n<code>Map</code> is important. The inspection won't suggest the replacement when the value is statically known to be nullable, \nbut for values with unknown nullability the replacement is still suggested. In these cases, we recommended suppressing the warning \nand adding an explanatory comment. \n</p>\n<!-- tooltip end -->\n<p>This inspection works only if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Guava",
          "displayName": "Guava's functional primitives can be replaced by Java",
          "enabled": false,
          "description": "<html>\n<body>\nInspection detects usages of Guava's functional primitives like\n<b>FluentIterable</b>, <b>Optional</b>, <b>Function</b>, <b>Predicate</b> and <b>Supplier</b>.\n<br>\nMay change semantic: some of lazy-evaluated guava's iterables could be transformed to eager-evaluated iterable.\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "Convert2streamapi",
          "displayName": "Loop can be collapsed with Stream API",
          "enabled": false,
          "description": "<html>\n<body>\nReports loops which can be replaced with stream API calls.\n<p>\nThe Stream API is not available under Java 7 or earlier JVMs.\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousHasLambdaAlternative",
          "displayName": "Anonymous type has shorter lambda alternative",
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous classes which could be transformed to constructor or factory method call accepting lambda expression.\n<p>The following classes are reported by this inspection:</p>\n<ul>\n  <li><b>ThreadLocal</b> anonymous classes having <b>initialValue()</b> method (could be replaced with <b>ThreadLocal.withInitial</b>)</li>\n  <li><b>Thread</b> anonymous classes having <b>run()</b> method (could be replaced with <b>new Thread(Runnable)</b></li>\n</ul>\n<!-- tooltip end -->\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StaticPseudoFunctionalStyleMethod",
          "displayName": "Pseudo functional expression using static class",
          "enabled": false,
          "description": "<html>\n<body>\nInspection detects usages of pseudo-functional code if Java Stream API is available.\n<br/>\nConsider cases when monad behaviour is emulated by static method call:\n<br/>\n<code>\nList&lt;String&gt; transformedIterable = Iterables.transform(someList, someTransformFunction);\n</code>\n<br>\nNote, that code semantic could be changed, for example: guava's <b>Iterable.transform</b> produce lazy-evaluated iterable\nbut replacement produced by quick fix will be eager-evaluated.\n<br>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "Java8MapForEach",
          "displayName": "Map.forEach() can be used",
          "enabled": false,
          "description": "<html>\n<body>\nSuggests to replace <code>for(Entry&lt;?,?&gt; entry : map.entrySet()) {...}</code> or\n<code>map.entrySet().forEach(entry -&gt; ...)</code> with <code>map.forEach((key, value) -> ...)</code>.\n<p>\n  When checkbox is checked, only <code>entrySet().forEach()</code> cases will be reported.\n  However the quick-fix action will be available for <code>for</code>-loops as well.\n</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CodeBlock2Expr",
          "displayName": "Statement lambda can be replaced with expression lambda",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda expressions with code block bodies when expression-style bodies can be used\n</body>\n</html>"
        },
        {
          "shortName": "Convert2MethodRef",
          "displayName": "Lambda can be replaced with method reference",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambdas which can be replaced with method references. Use the <a href=\"settings://preferences.sourceCode.Java\"> File | Settings | Editor | Code Style | Java | Code Generation</a> settings to configure special method references.\n<p>\nLambda/method references syntax is not supported under Java 1.7 or earlier JVMs.\n</body>\n</html>\n"
        },
        {
          "shortName": "FoldExpressionIntoStream",
          "displayName": "Expression can be folded into Stream chain",
          "enabled": false,
          "description": "<html>\n<body>\nReports expressions with repeating pattern which could be replaced with Stream API for String.join.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 9",
      "inspections": [
        {
          "shortName": "JavaRequiresAutoModule",
          "displayName": "Dependencies on automatic modules",
          "enabled": false,
          "description": "<html>\n<body>\nThe inspection warns about use of automatic modules in the \"requires\" directive.\nCorresponds to <code>-Xlint:requires-automatic</code> and <code>-Xlint:requires-transitive-automatic</code> Javac options.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceNullCheck",
          "displayName": "Null check can be replaced with method call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection suggests to replace null check with Objects/Stream static method.\n<!-- tooltip end -->\nExample:\n<pre><code>\nif (message == null) {\n  application.messageStorage().save(new EmptyMessage());\n} else {\n  application.messageStorage().save(message);\n}\n</code></pre>\n<p>can be replaced with</p>\n<pre><code>\n  application.messageStorage()\n    .save(Objects.requireNonNullElseGet(message, () -> new EmptyMessage()));\n</code></pre>\n<p><small>New in 2017.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Java9CollectionFactory",
          "displayName": "Immutable collection creation can be replaced with collection factory call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection helps to convert unmodifiable collections created before Java 9 to new collection factory methods\nlike <code>List.of</code> or <code>Set.of</code>. Also since Java 10 the conversion to <code>List.copyOf</code>, etc. could be suggested.\n<!-- tooltip end -->\n<p>Note that Java 9 collection factory methods do not accept null values. Also set elements and map keys are required to be different.\nIt's not always possible to statically check whether original elements are different and not null. Using the checkbox you may enforce\nthe inspection to warn only if original elements are compile-time constants, so the conversion is guaranteed to be correct.</p>\n<p>This inspection is available since Java 9 only.</p>\n<small>New in 2017.2</small>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JavaBeans issues",
      "inspections": [
        {
          "shortName": "FieldHasSetterButNoGetter",
          "displayName": "Field has setter but no getter",
          "enabled": false,
          "description": "<html>\n<body>\nReports any fields which have a \"setter\" method but no \"getter\" method.\nWhile within the Java beans spec, such fields may be unnecessarily difficult to work with in\ncertain bean containers.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PropertyValueSetToItself",
          "displayName": "Property value set to itself",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls on a setter with the value of the same object's getter.\nFor example: <code>bean.setPayerId(bean.getPayerId());</code>\nIn regular circumstances this code is a no-op and probably not what was intended.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousGetterSetter",
          "displayName": "Suspicious getter/setter",
          "enabled": false,
          "description": "<html>\n<body>\nReports suspicious getter or setter methods.\nA getter or setter is suspicious if it accesses a different field than would be expected by its name.\n\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate the inspection should only warn when a field\nwith a name matching the getter or setter name is present in the class.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithoutNoArgConstructor",
          "displayName": "Class without no-arg constructor",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes without a no-argument constructor.\nSuch constructors are necessary in some contexts if a class is to be created reflexively.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate that this inspection should ignore classes which\ncontain no explicit constructors. These classes are provided a default no-argument constructor\nby the compiler.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithoutConstructor",
          "displayName": "Class without constructor",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes without constructors. Some coding standards prohibit such classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Validity issues",
      "inspections": [
        {
          "shortName": "JSOctalInteger",
          "displayName": "Octal integer",
          "enabled": false,
          "description": "<html>\n<body>\nReports deprecated octal integer literals prefixed with '0' and not '0o'.<br/>\nIt is an error to use such literals in modern ECMAScript code, and it is an error to use them in strict mode.<br/>\nYou can force this inspection for ES5 and ES3 language levels by ticking the 'Warn about obsolete octal literals in ES5- code' checkbox in the inspection settings.\n</body>\n</html>"
        },
        {
          "shortName": "ThisExpressionReferencesGlobalObjectJS",
          "displayName": "'this' expression which references the global object",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>this</b> expressions occurring outside of object literals or constructor bodies.  Such <b>this</b>\nexpressions are legal JavaScript, and reference the top-level \"global\" JavaScript object,\nbut are largely useless.\n</body>\n</html>\n"
        },
        {
          "shortName": "StringLiteralBreaksHTMLJS",
          "displayName": "String literal which breaks HTML parsing",
          "enabled": false,
          "description": "<html>\n<body>\nReports string literals which contain the sequence <b>&lt;/</b>.  Such strings\nare legal JavaScript, but may result in incorrect parsing of any HTML the JavaScript is embedded in.\n</body>\n</html>\n"
        },
        {
          "shortName": "BadExpressionStatementJS",
          "displayName": "Expression statement which is not assignment or call",
          "enabled": false,
          "description": "<html>\n<body>\nReports expression statements which are not assignments or calls.\nSuch statements have no obvious semantics, and are normally the result of programmer\nerror.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSConstantReassignment",
          "displayName": "Attempt to assign to const or readonly variable",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that constant or readonly variable is being reassigned.\n</body>\n</html>"
        },
        {
          "shortName": "JSReferencingArgumentsOutsideOfFunction",
          "displayName": "Referencing 'arguments' outside of function",
          "enabled": false,
          "description": "a<html>\n<body>\nChecks that <b>arguments</b> references are inside a function body.\n</body>\n</html>\n"
        },
        {
          "shortName": "FunctionWithInconsistentReturnsJS",
          "displayName": "Function with inconsistent returns",
          "enabled": false,
          "description": "<html>\n<body>\nReports functions which return a value in\nsome circumstances and return without a value in others. While legal,\nsuch code almost certainly represents a programming error.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyDuplicateSwitchBranch",
          "displayName": "Duplicate switch case",
          "enabled": false,
          "description": "<html>\n<body>\nReports duplicated <b>case</b> expressions in <b>switch</b>\nstatements.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnreachableStatement",
          "displayName": "Unreachable statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports statements that are unreachable.\n</body>\n</html>"
        },
        {
          "shortName": "ReservedWordUsedAsNameJS",
          "displayName": "Reserved word used as name",
          "enabled": false,
          "description": "<html>\n<body>\nReports JavaScript reserved words being used as a name.  The JavaScript specification\nreserves a number of words which are currently not used as keywords.  Using those words as identifiers may\nresult in broken code if later versions of JavaScript start using them as keywords.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Modularization issues",
      "inspections": [
        {
          "shortName": "ClassIndependentOfModule",
          "displayName": "Class independent of its module",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which are neither dependent on nor depended on by other classes\nin their module. Such classes are an indication of ad-hoc or incoherent modularisation strategies,\nand may often profitably be moved.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ModuleWithTooFewClasses",
          "displayName": "Module with too few classes",
          "enabled": false,
          "description": "<html>\n<body>\nReports any modules which contain too few classes. Overly small modules may\nindicate an overly fragmented design.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the minimum number of classes a module may have before triggering this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassOnlyUsedInOneModule",
          "displayName": "Class only used from one other module",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which is only depended on and only depends on one module which\nis different from the module containing the class. Such class could be moved into\nthat module.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "InconsistentLanguageLevel",
          "displayName": "Inconsistent language level settings",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection lists modules which depend on other modules with higher language level. Such dependencies should be broken off.\n</body>\n</html>\n"
        },
        {
          "shortName": "ModuleWithTooManyClasses",
          "displayName": "Module with too many classes",
          "enabled": false,
          "description": "<html>\n<body>\nReports any modules which contain too many classes. Overly large modules may\nindicate a lack of design clarity.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of classes a module may have before triggering this inspection.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Android Lint: Usability",
      "inspections": [
        {
          "shortName": "AndroidLintAlwaysShowAction",
          "displayName": "Usage of showAsAction=always",
          "enabled": false,
          "description": "<html><body>Usage of <code>showAsAction=always</code><br><br>Using <code>showAsAction=\"always\"</code> in menu XML, or <code>MenuItem.SHOW_AS_ACTION_ALWAYS</code> in Java code is usually a deviation from the user interface style guide.Use <code>ifRoom</code> or the corresponding <code>MenuItem.SHOW_AS_ACTION_IF_ROOM</code> instead.<br/>\n<br/>\nIf <code>always</code> is used sparingly there are usually no problems and behavior is roughly equivalent to <code>ifRoom</code> but with preference over other <code>ifRoom</code> items. Using it more than twice in the same menu is a bad idea.<br/>\n<br/>\nThis check looks for menu XML files that contain more than two <code>always</code> actions, or some <code>always</code> actions and no <code>ifRoom</code> actions. In Java code, it looks for projects that contain references to <code>MenuItem.SHOW_AS_ACTION_ALWAYS</code> and no references to <code>MenuItem.SHOW_AS_ACTION_IF_ROOM</code>.<br><br>Issue id: AlwaysShowAction<br><br><a href=\"http://developer.android.com/design/patterns/actionbar.html\">http://developer.android.com/design/patterns/actionbar.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintAllCaps",
          "displayName": "Combining textAllCaps and markup",
          "enabled": false,
          "description": "<html><body>Combining textAllCaps and markup<br><br>The textAllCaps text transform will end up calling <code>toString</code> on the <code>CharSequence</code>, which has the net effect of removing any markup such as <code>&lt;b></code>. This check looks for usages of strings containing markup that also specify <code>textAllCaps=true</code>.<br><br>Issue id: AllCaps</body></html>"
        },
        {
          "shortName": "AndroidLintSmallSp",
          "displayName": "Text size is too small",
          "enabled": false,
          "description": "<html><body>Text size is too small<br><br>Avoid using sizes smaller than 12sp.<br><br>Issue id: SmallSp</body></html>"
        },
        {
          "shortName": "AndroidLintIconDuplicatesConfig",
          "displayName": "Identical bitmaps across various configurations",
          "enabled": false,
          "description": "<html><body>Identical bitmaps across various configurations<br><br>If an icon is provided under different configuration parameters such as <code>drawable-hdpi</code> or <code>-v11</code>, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.<br><br>Issue id: IconDuplicatesConfig</body></html>"
        },
        {
          "shortName": "AndroidLintAppLinkUrlError",
          "displayName": "URL not supported by app for Firebase App Indexing",
          "enabled": false,
          "description": "<html><body>URL not supported by app for Firebase App Indexing<br><br>Ensure the URL is supported by your app, to get installs and traffic to your app from Google Search.<br><br>Issue id: AppLinkUrlError<br><br><a href=\"https://g.co/AppIndexing/AndroidStudio\">https://g.co/AppIndexing/AndroidStudio</a></body></html>"
        },
        {
          "shortName": "AndroidLintNegativeMargin",
          "displayName": "Negative Margins",
          "enabled": false,
          "description": "<html><body>Negative Margins<br><br>Margin values should be positive. Negative values are generally a sign that you are making assumptions about views surrounding the current one, or may be tempted to turn off child clipping to allow a view to escape its parent. Turning off child clipping to do this not only leads to poor graphical performance, it also results in wrong touch event handling since touch events are based strictly on a chain of parent-rect hit tests. Finally, making assumptions about the size of strings can lead to localization problems.<br><br>Issue id: NegativeMargin</body></html>"
        },
        {
          "shortName": "AndroidLintIconLauncherShape",
          "displayName": "The launcher icon shape should use a distinct silhouette",
          "enabled": false,
          "description": "<html><body>The launcher icon shape should use a distinct silhouette<br><br>According to the Android Design Guide (<a href=\"http://developer.android.com/design/style/iconography.html\">http://developer.android.com/design/style/iconography.html</a>) your launcher icons should \"use a distinct silhouette\", a \"three-dimensional, front view, with a slight perspective as if viewed from above, so that users perceive some depth.\"<br/>\n<br/>\nThe unique silhouette implies that your launcher icon should not be a filled square.<br><br>Issue id: IconLauncherShape</body></html>"
        },
        {
          "shortName": "AndroidLintWebpUnsupported",
          "displayName": "WebP Unsupported",
          "enabled": false,
          "description": "<html><body>WebP Unsupported<br><br>The WebP format requires Android 4.0 (API 15). Certain features, such as lossless encoding and transparency, requires Android 4.2.1 (API 18; API 17 is 4.2.0.)<br><br>Issue id: WebpUnsupported</body></html>"
        },
        {
          "shortName": "AndroidLintViewConstructor",
          "displayName": "Missing View constructors for XML inflation",
          "enabled": false,
          "description": "<html><body>Missing View constructors for XML inflation<br><br>Some layout tools (such as the Android layout editor) need to find a constructor with one of the following signatures:<br/>\n* <code>View(Context context)</code><br/>\n* <code>View(Context context, AttributeSet attrs)</code><br/>\n* <code>View(Context context, AttributeSet attrs, int defStyle)</code><br/>\n<br/>\nIf your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if <code>View#isInEditMode()</code> is false, since that method will return <code>false</code> at runtime but true within a user interface editor.<br><br>Issue id: ViewConstructor</body></html>"
        },
        {
          "shortName": "AndroidLintIconColors",
          "displayName": "Icon colors do not follow the recommended visual style",
          "enabled": false,
          "description": "<html><body>Icon colors do not follow the recommended visual style<br><br>Notification icons and Action Bar icons should only white and shades of gray. See the Android Design Guide for more details. Note that the way Lint decides whether an icon is an action bar icon or a notification icon is based on the filename prefix: <code>ic_menu_</code> for action bar icons, <code>ic_stat_</code> for notification icons etc. These correspond to the naming conventions documented in <a href=\"http://developer.android.com/guide/practices/ui_guidelines/icon_design.html\">http://developer.android.com/guide/practices/ui_guidelines/icon_design.html</a><br><br>Issue id: IconColors<br><br><a href=\"http://developer.android.com/design/style/iconography.html\">http://developer.android.com/design/style/iconography.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintTypographyEllipsis",
          "displayName": "Ellipsis string can be replaced with ellipsis character",
          "enabled": false,
          "description": "<html><body>Ellipsis string can be replaced with ellipsis character<br><br>You can replace the string \"...\" with a dedicated ellipsis character, ellipsis character (&#8230;, &amp;#8230;). This can help make the text more readable.<br><br>Issue id: TypographyEllipsis<br><br><a href=\"http://en.wikipedia.org/wiki/Ellipsis\">http://en.wikipedia.org/wiki/Ellipsis</a></body></html>"
        },
        {
          "shortName": "AndroidLintGifUsage",
          "displayName": "Using .gif format for bitmaps is discouraged",
          "enabled": false,
          "description": "<html><body>Using <code>.gif</code> format for bitmaps is discouraged<br><br>The <code>.gif</code> file format is discouraged. Consider using <code>.png</code> (preferred) or <code>.jpg</code> (acceptable) instead.<br><br>Issue id: GifUsage<br><br><a href=\"http://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap\">http://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap</a></body></html>"
        },
        {
          "shortName": "AndroidLintBackButton",
          "displayName": "Back button",
          "enabled": false,
          "description": "<html><body>Back button<br><br>According to the Android Design Guide,<br/>\n<br/>\n\"Other platforms use an explicit back button with label to allow the user to navigate up the application's hierarchy. Instead, Android uses the main action bar's app icon for hierarchical navigation and the navigation bar's back button for temporal navigation.\"<br/>\nThis check is not very sophisticated (it just looks for buttons with the label \"Back\"), so it is disabled by default to not trigger on common scenarios like pairs of Back/Next buttons to paginate through screens.<br><br>Issue id: BackButton<br><br><a href=\"http://developer.android.com/design/patterns/pure-android.html\">http://developer.android.com/design/patterns/pure-android.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintTypographyQuotes",
          "displayName": "Straight quotes can be replaced with curvy quotes",
          "enabled": false,
          "description": "<html><body>Straight quotes can be replaced with curvy quotes<br><br>Straight single quotes and double quotes, when used as a pair, can be replaced by \"curvy quotes\" (or directional quotes). This can make the text more readable.<br/>\n<br/>\nNote that you should never use grave accents and apostrophes to quote, `like this'.<br/>\n<br/>\n(Also note that you should not use curvy quotes for code fragments.)<br><br>Issue id: TypographyQuotes<br><br><a href=\"http://en.wikipedia.org/wiki/Quotation_mark\">http://en.wikipedia.org/wiki/Quotation_mark</a></body></html>"
        },
        {
          "shortName": "AndroidLintIconXmlAndPng",
          "displayName": "Icon is specified both as .xml file and as a bitmap",
          "enabled": false,
          "description": "<html><body>Icon is specified both as <code>.xml</code> file and as a bitmap<br><br>If a drawable resource appears as an <code>.xml</code> file in the <code>drawable/</code> folder, it's usually not intentional for it to also appear as a bitmap using the same name; generally you expect the drawable XML file to define states and each state has a corresponding drawable bitmap.<br><br>Issue id: IconXmlAndPng</body></html>"
        },
        {
          "shortName": "AndroidLintMipmapIcons",
          "displayName": "Use Mipmap Launcher Icons",
          "enabled": false,
          "description": "<html><body>Use Mipmap Launcher Icons<br><br>Launcher icons should be provided in the <code>mipmap</code> resource directory. This is the same as the <code>drawable</code> resource directory, except resources in the <code>mipmap</code> directory will not get stripped out when creating density-specific APKs.<br/>\n<br/>\nIn certain cases, the Launcher app may use a higher resolution asset (than would normally be computed for the device) to display large app shortcuts. If drawables for densities other than the device's resolution have been stripped out, then the app shortcut could appear blurry.<br/>\n<br/>\nTo fix this, move your launcher icons from `drawable-`dpi to `mipmap-`dpi and change references from @drawable/ and R.drawable to @mipmap/ and R.mipmap.<br/>\nIn Android Studio this lint warning has a quickfix to perform this automatically.<br><br>Issue id: MipmapIcons</body></html>"
        },
        {
          "shortName": "AndroidLintButtonOrder",
          "displayName": "Button order",
          "enabled": false,
          "description": "<html><body>Button order<br><br>According to the Android Design Guide,<br/>\n<br/>\n\"Action buttons are typically Cancel and/or OK, with OK indicating the preferred or most likely action. However, if the options consist of specific actions such as Close or Wait rather than a confirmation or cancellation of the action described in the content, then all the buttons should be active verbs. As a rule, the dismissive action of a dialog is always on the left whereas the affirmative actions are on the right.\"<br/>\n<br/>\nThis check looks for button bars and buttons which look like cancel buttons, and makes sure that these are on the left.<br><br>Issue id: ButtonOrder<br><br><a href=\"http://developer.android.com/design/building-blocks/dialogs.html\">http://developer.android.com/design/building-blocks/dialogs.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintIconMixedNinePatch",
          "displayName": "Clashing PNG and 9-PNG files",
          "enabled": false,
          "description": "<html><body>Clashing PNG and 9-PNG files<br><br>If you accidentally name two separate resources <code>file.png</code> and <code>file.9.png</code>, the image file and the nine patch file will both map to the same drawable resource, <code>@drawable/file</code>, which is probably not what was intended.<br><br>Issue id: IconMixedNinePatch</body></html>"
        },
        {
          "shortName": "AndroidLintTextFields",
          "displayName": "Missing inputType or hint",
          "enabled": false,
          "description": "<html><body>Missing <code>inputType</code><br><br>Providing an <code>inputType</code> attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). <br/>\n<br/>\nThe lint detector also looks at the <code>id</code> of the view, and if the id offers a hint of the purpose of the field (for example, the <code>id</code> contains the phrase <code>phone</code> or <code>email</code>), then lint will also ensure that the <code>inputType</code> contains the corresponding type attributes.<br/>\n<br/>\nIf you really want to keep the text field generic, you can suppress this warning by setting <code>inputType=\"text\"</code>.<br><br>Issue id: TextFields</body></html>"
        },
        {
          "shortName": "AndroidLintGoogleAppIndexingApiWarning",
          "displayName": "Missing support for Firebase App Indexing Api",
          "enabled": false,
          "description": "<html><body>Missing support for Firebase App Indexing Api<br><br>Adds URLs to get your app into the Google index, to get installs and traffic to your app from Google Search.<br><br>Issue id: GoogleAppIndexingApiWarning<br><br><a href=\"https://g.co/AppIndexing/AndroidStudio\">https://g.co/AppIndexing/AndroidStudio</a></body></html>"
        },
        {
          "shortName": "AndroidLintIconDuplicates",
          "displayName": "Duplicated icons under different names",
          "enabled": false,
          "description": "<html><body>Duplicated icons under different names<br><br>If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.<br><br>Issue id: IconDuplicates</body></html>"
        },
        {
          "shortName": "AndroidLintTypographyOther",
          "displayName": "Other typographical problems",
          "enabled": false,
          "description": "<html><body>Other typographical problems<br><br>This check looks for miscellaneous typographical problems and offers replacement sequences that will make the text easier to read and your application more polished.<br><br>Issue id: TypographyOther</body></html>"
        },
        {
          "shortName": "AndroidLintConvertToWebp",
          "displayName": "Convert to WebP",
          "enabled": false,
          "description": "<html><body>Convert to WebP<br><br>The WebP format is typically more compact than PNG and JPEG. As of Android 4.2.1 it supports transparency and lossless conversion as well. Note that there is a quickfix in the IDE which lets you perform conversion.<br/>\n<br/>\nLauncher icons must be in the PNG format.<br><br>Issue id: ConvertToWebp</body></html>"
        },
        {
          "shortName": "AndroidLintIconLocation",
          "displayName": "Image defined in density-independent drawable folder",
          "enabled": false,
          "description": "<html><body>Image defined in density-independent drawable folder<br><br>The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to <code>drawable-mdpi</code> and consider providing higher and lower resolution versions in <code>drawable-ldpi</code>, <code>drawable-hdpi</code> and <code>drawable-xhdpi</code>. If the icon <b>really</b> is density independent (for example a solid color) you can place it in <code>drawable-nodpi</code>.<br><br>Issue id: IconLocation<br><br><a href=\"http://developer.android.com/guide/practices/screens_support.html\">http://developer.android.com/guide/practices/screens_support.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintTypographyFractions",
          "displayName": "Fraction string can be replaced with fraction character",
          "enabled": false,
          "description": "<html><body>Fraction string can be replaced with fraction character<br><br>You can replace certain strings, such as 1/2, and 1/4, with dedicated characters for these, such as ½ (&amp;#189;) and ¼ (&amp;#188;). This can help make the text more readable.<br><br>Issue id: TypographyFractions<br><br><a href=\"http://en.wikipedia.org/wiki/Number_Forms\">http://en.wikipedia.org/wiki/Number_Forms</a></body></html>"
        },
        {
          "shortName": "AndroidLintMenuTitle",
          "displayName": "Missing menu title",
          "enabled": false,
          "description": "<html><body>Missing menu title<br><br>From the action bar documentation:<br/>\n\"It's important that you always define android:title for each menu item &#8212; even if you don't declare that the title appear with the action item &#8212; for three reasons:<br/>\n<br/>\n* If there's not enough room in the action bar for the action item, the menu item appears in the overflow menu and only the title appears.<br/>\n* Screen readers for sight-impaired users read the menu item's title.<br/>\n* If the action item appears with only the icon, a user can long-press the item to reveal a tool-tip that displays the action item's title.<br/>\nThe android:icon is always optional, but recommended.<br><br>Issue id: MenuTitle<br><br><a href=\"http://developer.android.com/guide/topics/ui/actionbar.html\">http://developer.android.com/guide/topics/ui/actionbar.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintSelectableText",
          "displayName": "Dynamic text should probably be selectable",
          "enabled": false,
          "description": "<html><body>Dynamic text should probably be selectable<br><br>If a <code>&lt;TextView></code> is used to display data, the user might want to copy that data and paste it elsewhere. To allow this, the <code>&lt;TextView></code> should specify <code>android:textIsSelectable=\"true\"</code>.<br/>\n<br/>\nThis lint check looks for TextViews which are likely to be displaying data: views whose text is set dynamically. This value will be ignored on platforms older than API 11, so it is okay to set it regardless of your <code>minSdkVersion</code>.<br><br>Issue id: SelectableText</body></html>"
        },
        {
          "shortName": "AndroidLintAutofill",
          "displayName": "Use Autofill",
          "enabled": false,
          "description": "<html><body>Use Autofill<br><br>Specify an <code>autofillHints</code> attribute when targeting SDK version 26 or higher or explicitly specify that the view is not important for autofill. Your app can help an autofill service classify the data correctly by providing the meaning of each view that could be autofillable, such as views representing usernames, passwords, credit card fields, email addresses, etc.<br/>\n<br/>\nThe hints can have any value, but it is recommended to use predefined values like 'username' for a username or 'creditCardNumber' for a credit card number. For a list of all predefined autofill hint constants, see the <code>AUTOFILL_HINT_</code> constants in the <code>View</code> reference at <a href=\"https://developer.android.com/reference/android/view/View.html\">https://developer.android.com/reference/android/view/View.html</a>.<br/>\n<br/>\nYou can mark a view unimportant for autofill by specifying an <code>importantForAutofill</code> attribute on that view or a parent view. See <a href=\"https://developer.android.com/reference/android/view/View.html#setImportantForAutofill\">https://developer.android.com/reference/android/view/View.html#setImportantForAutofill</a>(int).<br><br>Issue id: Autofill<br><br><a href=\"https://developer.android.com/guide/topics/text/autofill.html\">https://developer.android.com/guide/topics/text/autofill.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintIconMissingDensityFolder",
          "displayName": "Missing density folder",
          "enabled": false,
          "description": "<html><body>Missing density folder<br><br>Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as <code>drawable-hdpi</code>.<br/>\n<br/>\nLow density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable <code>ANDROID_LINT_INCLUDE_LDPI=true</code>. For more information on current density usage, see <a href=\"http://developer.android.com/resources/dashboard/screens.html\">http://developer.android.com/resources/dashboard/screens.html</a><br><br>Issue id: IconMissingDensityFolder<br><br><a href=\"http://developer.android.com/guide/practices/screens_support.html\">http://developer.android.com/guide/practices/screens_support.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintIconNoDpi",
          "displayName": "Icon appears in both -nodpi and dpi folders",
          "enabled": false,
          "description": "<html><body>Icon appears in both <code>-nodpi</code> and dpi folders<br><br>Bitmaps that appear in <code>drawable-nodpi</code> folders will not be scaled by the Android framework. If a drawable resource of the same name appears <b>both</b> in a <code>-nodpi</code> folder as well as a dpi folder such as <code>drawable-hdpi</code>, then the behavior is ambiguous and probably not intentional. Delete one or the other, or use different names for the icons.<br><br>Issue id: IconNoDpi</body></html>"
        },
        {
          "shortName": "AndroidLintIconExtension",
          "displayName": "Icon format does not match the file extension",
          "enabled": false,
          "description": "<html><body>Icon format does not match the file extension<br><br>Ensures that icons have the correct file extension (e.g. a <code>.png</code> file is really in the PNG format and not for example a GIF file named <code>.png</code>).<br><br>Issue id: IconExtension</body></html>"
        },
        {
          "shortName": "AndroidLintButtonCase",
          "displayName": "Cancel/OK dialog button capitalization",
          "enabled": false,
          "description": "<html><body>Cancel/OK dialog button capitalization<br><br>The standard capitalization for OK/Cancel dialogs is \"OK\" and \"Cancel\". To ensure that your dialogs use the standard strings, you can use the resource strings @android:string/ok and @android:string/cancel.<br><br>Issue id: ButtonCase</body></html>"
        },
        {
          "shortName": "AndroidLintTypographyDashes",
          "displayName": "Hyphen can be replaced with dash",
          "enabled": false,
          "description": "<html><body>Hyphen can be replaced with dash<br><br>The \"n dash\" (&#8211;, &amp;#8211;) and the \"m dash\" (&#8212;, &amp;#8212;) characters are used for ranges (n dash) and breaks (m dash). Using these instead of plain hyphens can make text easier to read and your application will look more polished.<br><br>Issue id: TypographyDashes<br><br><a href=\"http://en.wikipedia.org/wiki/Dash\">http://en.wikipedia.org/wiki/Dash</a></body></html>"
        },
        {
          "shortName": "AndroidLintGoogleAppIndexingWarning",
          "displayName": "Missing support for Firebase App Indexing",
          "enabled": false,
          "description": "<html><body>Missing support for Firebase App Indexing<br><br>Adds URLs to get your app into the Google index, to get installs and traffic to your app from Google Search.<br><br>Issue id: GoogleAppIndexingWarning<br><br><a href=\"https://g.co/AppIndexing/AndroidStudio\">https://g.co/AppIndexing/AndroidStudio</a></body></html>"
        },
        {
          "shortName": "AndroidLintIconDipSize",
          "displayName": "Icon density-independent size validation",
          "enabled": false,
          "description": "<html><body>Icon density-independent size validation<br><br>Checks the all icons which are provided in multiple densities, all compute to roughly the same density-independent pixel (<code>dip</code>) size. This catches errors where images are either placed in the wrong folder, or icons are changed to new sizes but some folders are forgotten.<br><br>Issue id: IconDipSize</body></html>"
        },
        {
          "shortName": "AndroidLintIconDensities",
          "displayName": "Icon densities validation",
          "enabled": false,
          "description": "<html><body>Icon densities validation<br><br>Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.<br/>\n<br/>\nLow density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable <code>ANDROID_LINT_INCLUDE_LDPI=true</code>. For more information on current density usage, see <a href=\"http://developer.android.com/resources/dashboard/screens.html\">http://developer.android.com/resources/dashboard/screens.html</a><br><br>Issue id: IconDensities<br><br><a href=\"http://developer.android.com/guide/practices/screens_support.html\">http://developer.android.com/guide/practices/screens_support.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintMissingApplicationIcon",
          "displayName": "Missing application icon",
          "enabled": false,
          "description": "<html><body>Missing application icon<br><br>You should set an icon for the application as whole because there is no default. This attribute must be set as a reference to a drawable resource containing the image (for example <code>@drawable/icon</code>).<br><br>Issue id: MissingApplicationIcon<br><br><a href=\"http://developer.android.com/tools/publishing/preparing.html#publishing-configure\">http://developer.android.com/tools/publishing/preparing.html#publishing-configure</a></body></html>"
        },
        {
          "shortName": "AndroidLintIconExpectedSize",
          "displayName": "Icon has incorrect size",
          "enabled": false,
          "description": "<html><body>Icon has incorrect size<br><br>There are predefined sizes (for each density) for launcher icons. You should follow these conventions to make sure your icons fit in with the overall look of the platform.<br><br>Issue id: IconExpectedSize<br><br><a href=\"http://developer.android.com/design/style/iconography.html\">http://developer.android.com/design/style/iconography.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintButtonStyle",
          "displayName": "Button should be borderless",
          "enabled": false,
          "description": "<html><body>Button should be borderless<br><br>Button bars typically use a borderless style for the buttons. Set the <code>style=\"?android:attr/buttonBarButtonStyle\"</code> attribute on each of the buttons, and set <code>style=\"?android:attr/buttonBarStyle\"</code> on the parent layout<br><br>Issue id: ButtonStyle<br><br><a href=\"http://developer.android.com/design/building-blocks/buttons.html\">http://developer.android.com/design/building-blocks/buttons.html</a></body></html>"
        }
      ]
    },
    {
      "name": "Proofreading",
      "inspections": [
        {
          "shortName": "SpellCheckingInspection",
          "displayName": "Typo",
          "enabled": false,
          "description": "<html>\n<body>\n\nSpellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.\n</body>\n</html>"
        },
        {
          "shortName": "LanguageDetectionInspection",
          "displayName": "Natural language detection",
          "enabled": false,
          "description": "<html lang=\"en\"><body>Detects natural languages and suggests to enable corresponding grammar and spelling checks.</body></html>\n"
        },
        {
          "shortName": "GrazieInspection",
          "displayName": "Grammar",
          "enabled": false,
          "description": "<html lang=\"en\"><body>Proofreading inspection provides an extended spell and grammar checking.\n\nYou can change inspection settings in <a href=\"settings://reference.settingsdialog.project.grazie\">Preferences</a>. </body></html>\n"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "GroovyConstantNamingConvention",
          "displayName": "Constant naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports constants whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\nConstants are variables of immutable type declared <b>static final</b>.\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for constant names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "ClassNameSameAsAncestorName",
          "displayName": "Class name same as ancestor name",
          "enabled": false,
          "description": "<html>\n<body>\nReports class being named identically to one of their\nsuper classes (but in different packages). Such class name may be very confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NewGroovyClassNamingConvention",
          "displayName": "Class naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for class names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "PrivatePropertyName",
          "displayName": "Private property naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports private property names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "BooleanMethodNameMustStartWithQuestion",
          "displayName": "Boolean method name must start with question word",
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean methods whose names do not start with a question\nword. Boolean methods that override library methods are ignored by this inspection.\n<!-- tooltip end -->\n<p>\nUse the list below to specify acceptable question words to start boolean method names with.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExceptionNameDoesntEndWithException",
          "displayName": "Exception class name does not end with 'Exception'",
          "enabled": false,
          "description": "<html>\n<body>\nReports exception classes whose names don't end with 'Exception'.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ConstPropertyName",
          "displayName": "Const property naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>const</b> property names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "TestFunctionName",
          "displayName": "Test function naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports test function names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "FieldNamingConvention",
          "displayName": "Field naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n  Use list below to specify which fields should be checked.\n  For each field type use the fields to specify minimum length, maximum length and regular expression expected for class names.\n  Specify <b>0</b> in length fields to skip corresponding checks. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassNamePrefixedWithPackageName",
          "displayName": "Class name prefixed with package name",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes whose names are prefixed with their package names, irrespective of\ncapitalization. While occasionally reasonable, this is often due to a poor naming scheme, and may be redundant and\nannoying.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JavaModuleNaming",
          "displayName": "Java module naming conventions",
          "enabled": false,
          "description": "<html>\n<body>\nThe inspection detects situations when a module name contradicts Java Platform Module System recommendations.\n<br>Example:\n<code>module <b>foo1.bar2</b> { }</code>\n</body>\n</html>"
        },
        {
          "shortName": "QuestionableName",
          "displayName": "Questionable name",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any variables, methods, or classes with questionable names.\nThis inspection is best used to report common metasyntactic variables which may be\nused as names by lazy or confused developers.\n<!-- tooltip end -->\n<p>\nUse the list below to specify names which should be reported\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JSClassNamingConvention",
          "displayName": "Class naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes and functions annotated with JSDoc <b>@constructor</b> or <b>@class</b> tags whose names are\neither too short, too long, or do not follow the specified regular expression pattern.\n<p>\n  Use the fields provided below to specify minimum length, maximum length and regular expression\n  expected for classes names.\n  (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyInstanceMethodNamingConvention",
          "displayName": "Instance method naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports instance methods whose names are either too short, too long, or do not follow\nthe specified regular expression pattern. Instance methods that override library\nmethods are ignored by this inspection.\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for instance method names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyParameterNamingConvention",
          "displayName": "Method parameter naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports method parameters whose names are either too short, too\nlong, or do not follow\nthe specified regular expression pattern.\n<p>\n  Use the fields provided below to specify minimum length, maximum length and regular expression\n  expected for method parameter names.\n  (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "ParameterNamingConventionJS",
          "displayName": "Function parameter naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports function parameters whose names are either too short,\ntoo long, or do not follow the specified regular expression pattern.\n<p>\n  Use the fields provided below to specify minimum length, maximum length and regular expression\n  expected for local variables names.\n  (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyInstanceVariableNamingConvention",
          "displayName": "Instance variable naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports instance variables whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for\n instance variable names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "PropertyName",
          "displayName": "Property naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports property names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "LocalVariableName",
          "displayName": "Local variable naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports local variable names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyStaticMethodNamingConvention",
          "displayName": "Static method naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports static methods whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for static method names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "MethodNameSameAsClassName",
          "displayName": "Method name same as class name",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods being named identically to their class.\nA method with such a name may be easily mistaken for a constructor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyStaticVariableNamingConvention",
          "displayName": "Static variable naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>static</b> variables whose names are either too short, too long,\nor do not follow\nthe specified regular expression pattern. Constants, i.e. variables of immutable type declared\n<b>static final</b>, are not checked by this inspection\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for static variable names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "NewClassNamingConvention",
          "displayName": "Class naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n  Use list below to specify which classes should be checked. When unchecked, common class name patterns <b>won't be applied</b>. \n  For each class type use the fields to specify minimum length, maximum length and regular expression expected for class names.\nSpecify <b>0</b> in length fields to skip corresponding checks. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UpperCaseFieldNameNotConstant",
          "displayName": "Non-constant field with upper-case name",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>static</b> non-<b>final</b>\nfields whose names are all upper-case. Such fields may cause confusion by breaking a common naming convention, and\nare often the result of developer error.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParameterNameDiffersFromOverriddenParameter",
          "displayName": "Parameter name differs from parameter in overridden method",
          "enabled": false,
          "description": "<html>\n<body>\nReports parameters that have different names from the corresponding\nparameters in the methods they override. While legal in Java, such inconsistent names may be confusing,\nand lessen the documentation benefits of good naming practices.\n<!-- tooltip end -->\n<p>\nUse the checkboxes below to indicate whether overridden parameter names which are only\na single character long or come from a library method should be ignored. Both can be useful if\nyou do not wish to be bound by dubious naming conventions used in libraries.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyLocalVariableNamingConvention",
          "displayName": "Local variable naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "NewMethodNamingConvention",
          "displayName": "Method naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods whose names are either too short, too long, or do not follow\nthe specified regular expression pattern. Instance methods that override library\nmethods and constructors are ignored by this inspection.\n<!-- tooltip end -->\n<p>\n  Use list below to specify which methods should be checked. When unchecked, common instance/static method name pattern <b>won't be applied</b>.\n  For each type use the fields to specify minimum length, maximum length and regular expression expected for method names.\n  Specify <b>0</b> in length fields to skip corresponding checks. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaParameterNamingConvention",
          "displayName": "Lambda parameter naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda parameters whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\nUse the fields below to specify minimum length, maximum length and regular expression expected for lambda parameter names.\nSpecify <b>0</b> to not check the length of names. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n<small>New in 15</small>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "LocalVariableNamingConventionJS",
          "displayName": "Local variable naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables whose names are either too short, too\nlong, or do not follow the specified regular expression pattern.\n<p>\n  Use the fields provided below to specify minimum length, maximum length and regular expression\n  expected for local variables names.\n  (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "LocalVariableNamingConvention",
          "displayName": "Local variable naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\nUse the fields below to specify minimum length, maximum length and regular expression expected for local variables names.\nSpecify <b>0</b> to not check the length of names. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonBooleanMethodNameMayNotStartWithQuestion",
          "displayName": "Non-boolean method name must not start with question word",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-boolean methods whose names start with a question\nword. Non-boolean methods that override library methods are ignored by this inspection.\n<!-- tooltip end -->\n<p>\nUse the list below to specify question words which should only be used for boolean methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConfusingMainMethod",
          "displayName": "Confusing 'main()' method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods named \"main\" which do not have signature\npublic static void main(String[]). Such methods may be confusing, as methods named \"main\"\nare expected to be application entry points.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageNamingConvention",
          "displayName": "Package naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports packages whose names are either too short, too long, or do not follow the specified regular expression pattern.\n<!-- tooltip end -->\n<p>\nUse the fields below to specify minimum length, maximum length and regular expression matching valid package names\n(Regular expressions are in standard <b>java.util.regex</b> format).\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MisspelledMethodName",
          "displayName": "Method names differing only by case",
          "enabled": false,
          "description": "<html>\n<body>\nReports on cases where multiple methods of a class have names which differ only by\ncase. Such method names may be very confusing.\n<!-- tooltip end -->\n<p>Use the checkbox below to ignore methods overriding or implementing a method from a superclass.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverloadedVarargsMethod",
          "displayName": "Overloaded varargs method",
          "enabled": false,
          "description": "<html>\n<body>\nReports varargs methods with the same name as other methods in the class or in a superclass.\nOverloaded methods which take a variable number of arguments can be very confusing,\nas it is often not clear which overloading gets called.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonExceptionNameEndsWithException",
          "displayName": "Non-exception class name ends with 'Exception'",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-exception classes whose names end with 'Exception'.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FunctionName",
          "displayName": "Function naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports function names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "ParameterNamingConvention",
          "displayName": "Method parameter naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports method parameters whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\nUse the fields below to specify minimum length, maximum length and regular expression expected for method parameter names.\nSpecify <b>0</b> to not check the length of names. Regular expressions are in standard <b>java.util.regex</b> format.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StandardVariableNames",
          "displayName": "Standard variable names",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any variables with 'standard' names which are of unexpected types.\nSuch names may be confusing. Standard names and types are as follows:\n<ul>\n<li>i, j, k, m, n  - <b>int</b> </li>\n<li>f  - <b>float</b> </li>\n<li>d  - <b>double</b> </li>\n<li>b  - <b>byte</b> </li>\n<li>c, ch  - <b>char</b> </li>\n<li>l - <b>long</b> </li>\n<li>s, str - <b>String</b> </li>\n</ul>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore parameter names which are identical to the parameter name from a direct super method.\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageName",
          "displayName": "Package naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports package names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "JSNonASCIINames",
          "displayName": "Identifiers with non-ASCII symbols",
          "enabled": false,
          "description": "<html>\n<body>\nReports names containing non-ASCII symbols.<br/><br/>\nIf 'Allow only ASCII names' option is used, reports all names containing non-ASCII symbols.<br/>\nOtherwise reports all names, containing both ASCII and non-ASCII symbols.\n</body>\n</html>\n"
        },
        {
          "shortName": "ObjectPropertyName",
          "displayName": "Object property naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports names of properties in objects and companion objects, as well as top-level properties, that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "LambdaUnfriendlyMethodOverload",
          "displayName": "Lambda-unfriendly method overload",
          "enabled": false,
          "description": "<html>\n<body>\nReports overloaded methods or constructors with similar functional interface type parameters for which\nany call sites will need a cast or parameter type specified on the lambda expression to resolve ambiguity.\nSuch calls can look ugly and should be avoided if possible.\nIt is preferable to give the overloaded methods a different name from each other, so that this problem does not occur.\n<!-- tooltip end -->\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "OverloadedMethodsWithSameNumberOfParameters",
          "displayName": "Overloaded methods with same number of parameters",
          "enabled": false,
          "description": "<html>\n<body>\nReports on cases where multiple methods in the same class are declared\nwith an identical name and the same number of parameters.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore overloaded methods whose parameter types are definitely incompatible.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DollarSignInName",
          "displayName": "Use of '$' in identifier",
          "enabled": false,
          "description": "<html>\n<body>\nReports identifers containing dollar signs ('$'). While\nsuch identifiers are legal Java, their use outside of generated java code is strongly discouraged.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodNameSameAsParentName",
          "displayName": "Method name same as parent class name",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods being named identically to the superclass of the method's class.\nSuch a method name may be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EnumEntryName",
          "displayName": "Enum entry naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports enum entry names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "ClassName",
          "displayName": "Class naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports class names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "FunctionNamingConventionJS",
          "displayName": "Function naming convention",
          "enabled": false,
          "description": "<html>\n<body>\nReports functions whose names are either too short, too\nlong, or do not follow the specified regular expression pattern.\n<p>\n  Use the fields provided below to specify minimum length, maximum length and regular expression\n  expected for function names.\n  (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Thymeleaf",
      "inspections": [
        {
          "shortName": "ThymeleafDialectDomInspection",
          "displayName": "Thymeleaf Dialect Extensions errors",
          "enabled": false,
          "description": "<html>\n<body>Thymeleaf Dialect Extensions errors</body>\n</html>"
        },
        {
          "shortName": "ThymeleafVariablesResolveInspection",
          "displayName": "Expression variables validation",
          "enabled": false,
          "description": "<html>\n<body>\nValidates unresolved references and invalid expressions.\n</body>\n</html>"
        },
        {
          "shortName": "ThymeleafMessagesResolveInspection",
          "displayName": "Messages resolve validation",
          "enabled": false,
          "description": "<html>\n<body>\nValidates unresolved message resource keys.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Flutter",
      "inspections": [
        {
          "shortName": "FlutterDependency",
          "displayName": "Outdated package dependencies",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2017 The Chromium Authors. All rights reserved.\n  ~ Use of this source code is governed by a BSD-style license that can be\n  ~ found in the LICENSE file.\n  -->\n\n<html>\n<body>\nFlutter package dependency check.\n<!-- tooltip end -->\nChecks whether a Flutter <code><a href=\"https://dart.dev/tools/pub/pubspec\">pubspec.yaml</a></code> has been edited\nsince the last <a href=\"https://flutter.dev/upgrading/\">package update</a>.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "ActionScript specific",
      "inspections": [
        {
          "shortName": "JSUntypedDeclaration",
          "displayName": "Declaration with no type",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for function and variable <b>declarations</b> to have type specified.\nThe validation works in ECMA Script Level 4 files. <br>\n</body>\n</html>"
        },
        {
          "shortName": "JSImplicitlyInternalDeclaration",
          "displayName": "Declaration with implicit access type",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for function and variable <b>declarations</b> to have explicit internal modifier.\nThe validation works in ActionScript files. <br>\n</body>\n</html>"
        },
        {
          "shortName": "JSFieldCanBeLocal",
          "displayName": "Field can be local",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection searches for redundant class fields that can be replaced with local variables.\nIf all local usages of a field are preceded by assignments to that field,\nthe field can be removed and its usages replaced with local variables.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Embedded",
      "inspections": [
        {
          "shortName": "ConnectionResource",
          "displayName": "Connection opened but not safely closed",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports any Java ME Connection resource which is not opened in front of a <b>try</b>\nblock and closed in the corresponding <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed.\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodCallInLoopCondition",
          "displayName": "Method call in loop condition",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports method calls in the condition part of a\nloop statement. In highly resource constrained environments, such calls may\nhave adverse performance implications.\n  <!-- tooltip end -->\n<p>\nUse the checkbox below to ignore calls to common Java iteration methods like <b>Iterator.hasNext()</b>\n  and known methods with side-effects like <b>Atomic*.compareAndSet</b>.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceWithOnlyOneDirectInheritor",
          "displayName": "Interface which has only one direct inheritor",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports interfaces which have precisely one\ndirect inheritor. While such interfaces may offer admirable clarity of design,\nin memory-constrained or bandwidth-limited environments,\nthey needlessly increase the total footprint of the application. Consider\nmerging the interface with its inheritor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PrivateMemberAccessBetweenOuterAndInnerClass",
          "displayName": "Synthetic accessor call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports references to non-constant <b>private</b> members of a different class,\nfor which javac will generate a package-private synthetic accessor method.\n<p>\nAn inner class and its containing class are compiled to separate\nclass files. The Java virtual machine normally prohibits access from a class to private fields and methods of\nanother class. To enable access from an inner class to private members of a\ncontaining class or the other way around javac creates a package-private\nsynthetic accessor method. Less use of memory and greater performance may be achieved by making the\nmember package-private, thus allowing direct access without the creation of a synthetic accessor method.\n<p>\nThis inspection does not report anything if language level is set to Java 11 or higher\nas thanks to nest-based access control (JEP 181), accessor methods are not generated anymore.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SingleCharacterStartsWith",
          "displayName": "Single character 'startsWith()' or 'endsWith()'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports any calls to <b>String.startsWith()</b> or\n<b>String.endsWith()</b> which are passed single character string\nliterals as parameter. Such calls may be more efficiently implemented with\n<b>String.charAt()</b>. Because the performance gain is\nminimal, the needed extra check for non-zero length, and the negative effect on\ncode clarity, it is recommended to do so only inside tight loops.\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RecordStoreResource",
          "displayName": "RecordStore opened but not safely closed",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports any Java ME RecordStore resource which is not opened in front of a <b>try</b>\nblock and closed in the corresponding <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AbstractClassWithOnlyOneDirectInheritor",
          "displayName": "Abstract class which has only one direct inheritor",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports abstract classes which have precisely one\ndirect inheritor. While such classes may offer admirable clarity of design,\nin memory-constrained or bandwidth-limited environments, they needlessly increase\nthe total footprint of the application. Consider merging the abstract class with its inheritor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MultiplyOrDivideByPowerOfTwo",
          "displayName": "Multiply or divide by power of two",
          "enabled": false,
          "description": "<html>\n<body>\nReports multiplication of an integer value by a constant power of 2. These\nexpressions may be replaced by right or left shift operations, for a possible performance improvement.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to enable the inspection for divisions by a power of two. Note that replacing\na power of two division by a shift does not work for negative numbers.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverlyLargePrimitiveArrayInitializer",
          "displayName": "Overly large initializer for array of primitive type",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports array initializer expressions for primitive\narrays which contain too many elements. Such initializers may result in overly large\nclass files, as code must be generated to initialize each array element. In memory\nor bandwidth constrained environments, it may be more efficient to load large arrays\nof primitives from resource files.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of elements to allow in\nprimitive array initializers.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CheckForOutOfMemoryOnLargeArrayAllocation",
          "displayName": "Large array allocation with no OutOfMemoryError check",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports large array allocations which do not check\nfor <b>java.lang.OutOfMemoryError</b>. In memory\nconstrained environments, allocations of large data objects should probably\nbe checked for memory depletion.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of elements to allow in\nunchecked array allocations.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ArrayLengthInLoopCondition",
          "displayName": "Array.length in loop condition",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection is intended for Java ME and other highly resource constrained environments.\nApplying the results of this inspection without consideration might have negative effects on code clarity and design.\n<p>\nReports any access to the <b>.length</b> of an array in the condition part of a\nloop statement. In highly resource constrained environments, such calls may\nhave adverse performance implications.\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Reactor",
      "inspections": [
        {
          "shortName": "UnassignedFluxMonoInstance",
          "displayName": "[Deprecated] Unassigned Flux/Mono instance",
          "enabled": true,
          "description": "<html>\n<body>\nUsing an operator (a method of Mono/Flux that returns a Mono/Flux) produces a new instance, so\nnot affecting this new instance to a variable (or using it in a fluent style) means the operator won’t be applied.\n</body>\n</html>"
        },
        {
          "shortName": "UnfinishedStepVerifier",
          "displayName": "Unfinished StepVerifier",
          "enabled": false,
          "description": "<html>\n<body>\nA terminal operation (<code>verify()</code>, <code>verifyComplete()</code> etc.) is required to initiate Publisher subscription\nand to initiate assertions. Not invoking any of the terminal verification methods is a possible source for bugs.\n</body>\n</html>"
        },
        {
          "shortName": "BlockingOperatorInNonBlockingScope",
          "displayName": "Blocking operator call in non-blocking scope",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Methods returning a Publisher type (Publisher, Flux, Mono) should be non-blocking; their implementation\nshould not contain blocking calls, unless they're wrapped within a reactive chain (i.e. in a Flux or Mono operator).\n  Calling blocking operations within a reactive pipeline will cause huge performance issues at runtime.\n</p>\n\n<p><b>superseded by \"Inappropriate thread-blocking method call\" inspection</b></p>\n</body>\n</html>"
        },
        {
          "shortName": "CallingSubscribeInNonBlockingScope",
          "displayName": "Calling 'subscribe' in non-blocking scope",
          "enabled": false,
          "description": "<html>\n<body>\nMethods returning a Publisher type (Publisher, Flux, Mono) should not call the <code>subscribe</code> method directly\nbecause it can break the reactive call chain.\nInstead of using <code>subscribe</code> consider using composition operators like <code>flatMap</code>,\n<code>zip</code>, <code>then</code>, etc.\n</body>\n</html>"
        },
        {
          "shortName": "ReactorAutomaticDebugger",
          "displayName": "Unnecessary debug initialization",
          "enabled": false,
          "description": "<html>\n<body>\n  <p>\n  IDE can automatically initialize the Reactor Debug mode, so user does not need to call <code>ReactorDebugAgent.init()</code> or\n  <code>Hooks.onOperatorDebug()</code> explicitly.\n  </p>\n\n  <p>Also, calling both <code>ReactorDebugAgent.init()</code> and <code>Hooks.onOperatorDebug()</code> causes doubled debugging stackframes\n  generated by Reactor.\n  </p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Invalid elements",
      "inspections": [
        {
          "shortName": "CssInvalidFunction",
          "displayName": "Invalid CSS function",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unknown functions and illegal function parameters.\n</body>\n</html>\n"
        },
        {
          "shortName": "CssInvalidMediaFeature",
          "displayName": "Invalid CSS media feature",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unknown media features and illegal media feature values.\n</body>\n</html>\n"
        },
        {
          "shortName": "CssInvalidElement",
          "displayName": "Invalid CSS element",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects inappropriate values assigned to CSS attributes. For example,\ninvalid measurement units or values out of range. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidCharsetRule",
          "displayName": "Invalid CSS @charset rule",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects misplaced @charset rules and inappropriate charset values.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidImport",
          "displayName": "Misplaced CSS @import",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects misplaced CSS @import declarations. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "CssUnresolvedClass",
          "displayName": "Unresolved CSS Class",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection warns about CSS class references which cannot be resolved to any valid target.\n</body>\n</html>"
        },
        {
          "shortName": "CssUnknownTarget",
          "displayName": "Unknown file or directory",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks references to files and directories. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidHtmlTagReference",
          "displayName": "Invalid CSS selector",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unknown CSS selectors and provides ability to declare them as a class or an id. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssNegativeValue",
          "displayName": "Negative CSS value",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects negative values assigned to CSS attributes that should never be\nnegative. For example, object width or height. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidPropertyValue",
          "displayName": "Invalid CSS property value",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects illegal property's values.\n</body>\n</html>"
        },
        {
          "shortName": "CssUnresolvedCustomProperty",
          "displayName": "Unresolved CSS Custom Property",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection warns about CSS custom property variable references which cannot be resolved to any valid target.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidPseudoSelector",
          "displayName": "Invalid CSS pseudo-selector",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unknown and inappropriate pseudo-classes and pseudo-elements.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidAtRule",
          "displayName": "Unknown CSS at-rule",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unknown CSS at-rules. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssUnknownProperty",
          "displayName": "Unknown CSS property",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights CSS properties that are unknown or used in wrong context, and allows to define such properties as 'custom' to avoid highlighting them as invalid.<br>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Nullability problems",
      "inspections": [
        {
          "shortName": "NullableProblems",
          "displayName": "@NotNull/@Nullable problems",
          "enabled": false,
          "description": "<html>\n<body>\nReports problems related to the nullability annotations: overriding problems (e.g. not-null parameter overrides nullable parameter),\nnon-annotated getters of annotated fields, and so on.\n<br>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ReturnNull",
          "displayName": "Return of 'null'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>return</b> statements with <b>null</b> return values.\nWhile occasionally useful, this construct may make the code more prone\nto failing with a <b>NullPointerException</b>, and often indicates that the\ndeveloper doesn't really understand the class' intended semantics.\nMethods annotated with a <b>@Nullable</b> annotation will be ignored by this inspection.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to let this inspection ignore <b>private</b> methods.\nThis will also ignore return of <b>null</b> from anonymous classes and lambda's.\n<p>\nUse the bottom three checkboxes to specify whether\n<b>null</b> values on array returns, collection\nobject returns, plain object returns, or a combination of the three should be reported.\nReturn of <b>null</b> in methods with return type <b>java.util.Optional</b> are always reported.\n<p>\nUse the <i>Configure annotations</i> button to specify <b>@Nullable</b> annotations.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NotNullFieldNotInitialized",
          "displayName": "@NotNull field is not initialized",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields annotated as not-null which are not initialized in constructor. Example:\n<pre>public class MyClass {\n  private @NotNull String value;\n\n  public void setValue(@NotNull String value) {\n    this.value = value;\n  }\n\n  public @NotNull String getValue() {\n    return value;\n  }\n}</pre>\n<p>\n  Such fields may violate the not-null constraint. E.g. in the example above while <code>setValue</code> parameter is annotated as not-null\n  <code>getValue</code> may return null if setter was not called.\n</p>\n<!-- tooltip end -->\n<p>Use the checkboxes below to control whether warning should be issued if field could be initialized implicitly\n  (e.g. via dependency injection) or if field is written in test case setUp() method.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Method metrics",
      "inspections": [
        {
          "shortName": "GroovyOverlyComplexMethod",
          "displayName": "Overly complex method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that have too high a cyclomatic complexity. Cyclomatic\ncomplexity is basically a measurement of the number of branching points in a method. Methods with too high\na cyclomatic complexity may be confusing and difficult to test.\n<p>\n Use the field provided below to specify the maximum acceptable cyclomatic complexity a method might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "ThrownExceptionsPerMethod",
          "displayName": "Method with too many exceptions declared",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that are declared as throwing too many\ndifferent types of exceptions. Methods with too many exceptions declared\nare a good sign that your error handling code is getting overly complex.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of <b>throws</b> clauses a method might have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyMethodParameterCount",
          "displayName": "Method with too many parameters",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with too many parameters. Methods with too many parameters\ncan be a good sign that refactoring is necessary. Methods whose signatures are inherited from\nlibrary classes are ignored by this inspection.\n<p>\n Use the field provided below to specify the maximum acceptable number of parameters a method might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMultipleReturnPointsPerMethod",
          "displayName": "Method with multiple return points",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with too many return points. Methods with too\nmany return points may be confusing, and hard to refactor.\n<p>\n  Use the field provided below to specify the maximum acceptable number of return points a method\n  might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOverlyLongMethod",
          "displayName": "Overly long method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that are too long. Methods that are too long\nmay be confusing, and are a good sign that refactoring is necessary.\n<p>\n  Use the field provided below to specify the maximum acceptable number of non-comment source\n  statements a method might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "CyclomaticComplexity",
          "displayName": "Overly complex method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that have too high a cyclomatic complexity. Cyclomatic\ncomplexity is basically a measurement of the number of branching points in a method. Methods with too high\na cyclomatic complexity may be confusing and difficult to test.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum cyclomatic complexity a method is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParametersPerConstructor",
          "displayName": "Constructor with too many parameters",
          "enabled": false,
          "description": "<html>\n<body>\nReports constructors with too many parameters. Constructors\nwith too many parameters can be a good sign that refactoring is necessary, e.g. Replace Constructor with Builder.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of parameters a constructor is allowed to have.\n<p>\nUse the combobox below to specify if the inspection should ignore private, package-private & private or protected, package-private and\nprivate constructors\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverlyLongLambda",
          "displayName": "Overly long lambda expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda expressions that are too long.\nLambda expressions that are too long\nmay be confusing, and it is often better to extract the statements into their own method.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of non-comment source statements a lambda expression is allowed to have.\n<p>\n<small>New in 2016.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyMethodWithMoreThanThreeNegations",
          "displayName": "Method with more than three negations",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with three or more negation operations (<b>!</b> or <b>!=</b>).\nSuch methods may be unnecessarily confusing.\n</body>\n</html>\n"
        },
        {
          "shortName": "NestingDepth",
          "displayName": "Overly nested method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods whose bodies are too deeply nested. Methods with too much statement\nnesting may be confusing, and are a good sign that refactoring may be necessary.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum nesting depth a method is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MultipleReturnPointsPerMethod",
          "displayName": "Method with multiple return points",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with too many <b>return</b> points. Methods with too many <b>return</b> points may be confusing,\nand hard to refactor. A <b>return</b> point is either a <b>return</b> statement or the falling through the bottom of a\n<b>void</b> method or constructor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of <b>return</b> points a method is allowed to have.\n<p>\nUse the first checkbox below to ignore guard clauses.\n<p>\nUse the second checkbox below to ignore <b>return</b> points inside <b>equals()</b> methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParametersPerMethod",
          "displayName": "Method with too many parameters",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with too many parameters. Methods with too many parameters can be a good sign that refactoring is necessary.\nMethods which have super methods are ignored by this inspection.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of parameters a method is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonCommentSourceStatements",
          "displayName": "Overly long method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that are too long. Methods that are too long\nmay be confusing, and are a good sign that refactoring is necessary.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of non-comment source statements a method is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyOverlyNestedMethod",
          "displayName": "Overly nested method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods whose bodies are too deeply nested. Methods with too much statement\nnesting may be confusing, and are a good sign that refactoring may be necessary.\n<p>\n Use the field provided below to specify the maximum acceptable nesting depth a method might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "MethodCoupling",
          "displayName": "Overly coupled method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods which are highly coupled, i.e. that reference too many other classes.\nMethods with too high a coupling can be very fragile, and should probably be broken up. References to system classes\n(those in the <b>java.</b>or <b>javax.</b> packages), are not\ncounted for purposes of this inspection.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum coupling a method is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodWithMultipleLoops",
          "displayName": "Method with multiple loops",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods containing multiple loop statements.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreeNegationsPerMethod",
          "displayName": "Method with more than three negations",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with three or more negation operations (<b>!</b> or <b>!=</b>).\nSuch methods may be unnecessarily confusing.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to disable this inspection within 'equals()' methods.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Packaging issues",
      "inspections": [
        {
          "shortName": "DisjointPackage",
          "displayName": "Package with disjoint dependency graph",
          "enabled": false,
          "description": "<html>\n<body>\nReports any packages whose classes can be separated into disjoint, mutually independent\nsubsets. Such disjoint packages are a symptom of ad-hoc packaging, and may indicate a lack of\nconceptual cohesion.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageWithTooManyClasses",
          "displayName": "Package with too many classes",
          "enabled": false,
          "description": "<html>\n<body>\nReports any packages which contain too many classes. Overly large packages may\nindicate a lack of design clarity.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of classes a package may have before triggering this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageWithTooFewClasses",
          "displayName": "Package with too few classes",
          "enabled": false,
          "description": "<html>\n<body>\nReports any packages which contain too few classes. Overly small packages may indicate a fragmented design.\n<!-- tooltip end -->\n<p>\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<p>\nUse the field below to specify the minimum number of classes a package may have.\n\n</body>\n</html>"
        },
        {
          "shortName": "EmptyDirectory",
          "displayName": "Empty directory",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty directories.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection only report directories under source roots.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassUnconnectedToPackage",
          "displayName": "Class independent of its package",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which are neither dependent on nor depended on by other classes\nin their package. Such classes are an indication of ad-hoc or incoherent packaging strategies,\nand may often profitably be moved.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExceptionPackage",
          "displayName": "Exception package",
          "enabled": false,
          "description": "<html>\n<body>\nReport packages which contain only classes extending <b>java.lang.Throwable</b>, either directly or indirectly.\nAlthough exceptions usually don't depend on other classes for their implementation, they are normally not used separately.\nIt is often a better design to locate exceptions in the same package as the classes that use them.\n<!-- tooltip end -->\n<p>Because this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<p><small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "ClassOnlyUsedInOnePackage",
          "displayName": "Class only used from one other package",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which is only depended on and only depends on one module which\nis different from the module containing the class. Such class could be moved into\nthat module.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "PackageInMultipleModules",
          "displayName": "Package with classes in multiple modules",
          "enabled": false,
          "description": "<html>\n<body>\nReports any packages which are present in multiple modules.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "BPMN 2.0 configuration errors",
      "inspections": [
        {
          "shortName": "BpmnConfigDomInspection",
          "displayName": "BPMN model errors",
          "enabled": false,
          "description": "<html>\n<body>\nBPMN 2.0 configuration errors\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Android Lint: Performance",
      "inspections": [
        {
          "shortName": "AndroidLintUselessParent",
          "displayName": "Useless parent layout",
          "enabled": false,
          "description": "<html><body>Useless parent layout<br><br>A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy.<br><br>Issue id: UselessParent</body></html>"
        },
        {
          "shortName": "AndroidLintUseOfBundledGooglePlayServices",
          "displayName": "Use of bunlded version of Google Play services",
          "enabled": false,
          "description": "<html><body>Use of bundled version of Google Play services<br><br>Google Play services SDK's can be selectively included, which enables a smaller APK size. Consider declaring dependencies on individual Google Play services SDK's. If you are using Firebase API's (<a href=\"http://firebase.google.com/docs/android/setup\">http://firebase.google.com/docs/android/setup</a>), Android Studio's Tools &#8594; Firebase assistant window can automatically add just the dependencies needed for each feature.<br><br>Issue id: UseOfBundledGooglePlayServices<br><br><a href=\"http://developers.google.com/android/guides/setup#split\">http://developers.google.com/android/guides/setup#split</a></body></html>"
        },
        {
          "shortName": "AndroidLintTooDeepLayout",
          "displayName": "Layout hierarchy is too deep",
          "enabled": false,
          "description": "<html><body>Layout hierarchy is too deep<br><br>Layouts with too much nesting is bad for performance. Consider using a flatter layout (such as <code>RelativeLayout</code> or <code>GridLayout</code>).The default maximum depth is 10 but can be configured with the environment variable <code>ANDROID_LINT_MAX_DEPTH</code>.<br><br>Issue id: TooDeepLayout</body></html>"
        },
        {
          "shortName": "AndroidLintDrawAllocation",
          "displayName": "Memory allocations within drawing code",
          "enabled": false,
          "description": "<html><body>Memory allocations within drawing code<br><br>You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.<br/>\n<br/>\nThe way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.<br/>\n<br/>\nSome methods allocate memory on your behalf (such as <code>Bitmap.create</code>), and these should be handled in the same way.<br><br>Issue id: DrawAllocation</body></html>"
        },
        {
          "shortName": "AndroidLintNestedWeights",
          "displayName": "Nested layout weights",
          "enabled": false,
          "description": "<html><body>Nested layout weights<br><br>Layout weights require a widget to be measured twice. When a LinearLayout with non-zero weights is nested inside another LinearLayout with non-zero weights, then the number of measurements increase exponentially.<br><br>Issue id: NestedWeights</body></html>"
        },
        {
          "shortName": "AndroidLintUnpackedNativeCode",
          "displayName": "Missing android:extractNativeLibs manifest attribute",
          "enabled": false,
          "description": "<html><body>Missing <code>android:extractNativeLibs=false</code><br><br>This app loads native libraries using <code>System.loadLibrary()</code>.<br/>\n<br/>\nConsider adding <code>android:extractNativeLibs=\"false\"</code> to the <code>&lt;application></code> tag in AndroidManifest.xml. Starting with Android 6.0, this will make installation faster, the app will take up less space on the device and updates will have smaller download sizes.<br><br>Issue id: UnpackedNativeCode</body></html>"
        },
        {
          "shortName": "AndroidLintAnimatorKeep",
          "displayName": "Missing @Keep for Animated Properties",
          "enabled": false,
          "description": "<html><body>Missing @Keep for Animated Properties<br><br>When you use property animators, properties can be accessed via reflection. Those methods should be annotated with @Keep to ensure that during release builds, the methods are not potentially treated as unused and removed, or treated as internal only and get renamed to something shorter.<br/>\n<br/>\nThis check will also flag other potential reflection problems it encounters, such as a missing property, wrong argument types, etc.<br><br>Issue id: AnimatorKeep</body></html>"
        },
        {
          "shortName": "AndroidLintSyntheticAccessor",
          "displayName": "Synthetic Accessor",
          "enabled": false,
          "description": "<html><body>Synthetic Accessor<br><br>A private inner class which is accessed from the outer class will force the compiler to insert a synthetic accessor; this means that you are causing extra overhead. This is not important in small projects, but is important for large apps running up against the 64K method handle limit, and especially for <b>libraries</b> where you want to make sure your library is as small as possible for the cases where your library is used in an app running up against the 64K limit.<br><br>Issue id: SyntheticAccessor</body></html>"
        },
        {
          "shortName": "AndroidLintWakelockTimeout",
          "displayName": "Using wakeLock without timeout",
          "enabled": false,
          "description": "<html><body>Using wakeLock without timeout<br><br>Wakelocks have two acquire methods: one with a timeout, and one without. You should generally always use the one with a timeout. A typical timeout is 10 minutes. If the task takes longer than it is critical that it happens (i.e. can't use <code>JobScheduler</code>) then maybe they should consider a foreground service instead (which is a stronger run guarantee and lets the user know something long/important is happening).<br><br>Issue id: WakelockTimeout</body></html>"
        },
        {
          "shortName": "AndroidLintObsoleteSdkInt",
          "displayName": "Obsolete SDK_INT Version Check",
          "enabled": false,
          "description": "<html><body>Obsolete SDK_INT Version Check<br><br>This check flags version checks that are not necessary, because the <code>minSdkVersion</code> (or surrounding known API level) is already at least as high as the version checked for.<br/>\n<br/>\nSimilarly, it also looks for resources in <code>-vNN</code> folders, such as <code>values-v14</code> where the version qualifier is less than or equal to the <code>minSdkVersion</code>, where the contents should be merged into the best folder.<br><br>Issue id: ObsoleteSdkInt</body></html>"
        },
        {
          "shortName": "AndroidLintLifecycleAnnotationProcessorWithJava8",
          "displayName": "Lifecycle Annotation Processor with Java 8 Compile Option",
          "enabled": false,
          "description": "<html><body>Lifecycle Annotation Processor with Java 8 Compile Option<br><br>For faster incremental build, switch to the Lifecycle Java 8 API with these steps:<br/>\n<br/>\nFirst replace\n<pre>\nannotationProcessor \"androidx.lifecycle:lifecycle-compiler:*version*\"\nkapt \"androidx.lifecycle:lifecycle-compiler:*version*\"\n</pre>\nwith\n<pre>\nimplementation \"androidx.lifecycle:lifecycle-common-java8:*version*\"\n</pre>\nThen remove any <code>OnLifecycleEvent</code> annotations from <code>Observer</code> classes and make them implement the <code>DefaultLifecycleObserver</code> interface.<br><br>Issue id: LifecycleAnnotationProcessorWithJava8<br><br><a href=\"https://d.android.com/r/studio-ui/lifecycle-release-notes\">https://d.android.com/r/studio-ui/lifecycle-release-notes</a></body></html>"
        },
        {
          "shortName": "AndroidLintUseCompoundDrawables",
          "displayName": "Node can be replaced by a TextView with compound drawables",
          "enabled": false,
          "description": "<html><body>Node can be replaced by a <code>TextView</code> with compound drawables<br><br>A <code>LinearLayout</code> which contains an <code>ImageView</code> and a <code>TextView</code> can be more efficiently handled as a compound drawable (a single TextView, using the <code>drawableTop</code>, <code>drawableLeft</code>, <code>drawableRight</code> and/or <code>drawableBottom</code> attributes to draw one or more images adjacent to the text).<br/>\n<br/>\nIf the two widgets are offset from each other with margins, this can be replaced with a <code>drawablePadding</code> attribute.<br/>\n<br/>\nThere's a lint quickfix to perform this conversion in the Eclipse plugin.<br><br>Issue id: UseCompoundDrawables</body></html>"
        },
        {
          "shortName": "AndroidLintDevModeObsolete",
          "displayName": "Dev Mode Obsolete",
          "enabled": false,
          "description": "<html><body>Dev Mode Obsolete<br><br>In the past, our documentation recommended creating a <code>dev</code> product flavor with has a minSdkVersion of 21, in order to enable multidexing to speed up builds significantly during development.<br/>\n<br/>\nThat workaround is no longer necessary, and it has some serious downsides, such as breaking API access checking (since the true <code>minSdkVersion</code> is no longer known).<br/>\n<br/>\nIn recent versions of the IDE and the Gradle plugin, the IDE automatically passes the API level of the connected device used for deployment, and if that device is at least API 21, then multidexing is automatically turned on, meaning that you get the same speed benefits as the <code>dev</code> product flavor but without the downsides.<br><br>Issue id: DevModeObsolete</body></html>"
        },
        {
          "shortName": "AndroidLintViewTag",
          "displayName": "Tagged object leaks",
          "enabled": false,
          "description": "<html><body>Tagged object leaks<br><br>Prior to Android 4.0, the implementation of <code>View.setTag(int, Object)</code> would store the objects in a static map, where the values were strongly referenced. This means that if the object contains any references pointing back to the context, the context (which points to pretty much everything else) will leak. If you pass a view, the view provides a reference to the context that created it. Similarly, view holders typically contain a view, and cursors are sometimes also associated with views.<br><br>Issue id: ViewTag</body></html>"
        },
        {
          "shortName": "AndroidLintVectorPath",
          "displayName": "Long vector paths",
          "enabled": false,
          "description": "<html><body>Long vector paths<br><br>Using long vector paths is bad for performance. There are several ways to make the <code>pathData</code> shorter:<br/>\n* Using less precision<br/>\n* Removing some minor details<br/>\n* Using the Android Studio vector conversion tool<br/>\n* Rasterizing the image (converting to PNG)<br><br>Issue id: VectorPath</body></html>"
        },
        {
          "shortName": "AndroidLintUseValueOf",
          "displayName": "Should use valueOf instead of new",
          "enabled": false,
          "description": "<html><body>Should use <code>valueOf</code> instead of <code>new</code><br><br>You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the <code>valueOf</code> factory method, such as <code>Integer.valueOf(42)</code>. This will typically use less memory because common integers such as 0 and 1 will share a single instance.<br><br>Issue id: UseValueOf</body></html>"
        },
        {
          "shortName": "AndroidLintInefficientWeight",
          "displayName": "Inefficient layout weight",
          "enabled": false,
          "description": "<html><body>Inefficient layout weight<br><br>When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of <code>0dp</code> to it since it will absorb all the remaining space anyway. With a declared width/height of <code>0dp</code> it does not have to measure its own size first.<br><br>Issue id: InefficientWeight</body></html>"
        },
        {
          "shortName": "AndroidLintUselessLeaf",
          "displayName": "Useless leaf layout",
          "enabled": false,
          "description": "<html><body>Useless leaf layout<br><br>A layout that has no children or no background can often be removed (since it is invisible) for a flatter and more efficient layout hierarchy.<br><br>Issue id: UselessLeaf</body></html>"
        },
        {
          "shortName": "AndroidLintRecycle",
          "displayName": "Missing recycle() calls",
          "enabled": false,
          "description": "<html><body>Missing <code>recycle()</code> calls<br><br>Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a <code>recycle()</code> call) after use. This lint check looks for missing <code>recycle()</code> calls.<br><br>Issue id: Recycle</body></html>"
        },
        {
          "shortName": "AndroidLintOverdraw",
          "displayName": "Overdraw: Painting regions more than once",
          "enabled": false,
          "description": "<html><body>Overdraw: Painting regions more than once<br><br>If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called \"overdraw\".<br/>\n<br/>\nNOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it's currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.<br/>\n<br/>\nIf you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.<br/>\n<br/>\nOf course it's possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.<br><br>Issue id: Overdraw</body></html>"
        },
        {
          "shortName": "AndroidLintDuplicateStrings",
          "displayName": "Duplicate Strings",
          "enabled": false,
          "description": "<html><body>Duplicate Strings<br><br>Duplicate strings can make applications larger unnecessarily.<br/>\n<br/>\nThis lint check looks for duplicate strings, including differences for strings where the only difference is in capitalization. Title casing and all uppercase can all be adjusted in the layout or in code.<br><br>Issue id: DuplicateStrings<br><br><a href=\"https://developer.android.com/reference/android/widget/TextView.html#attr_android:inputType\">https://developer.android.com/reference/android/widget/TextView.html#attr_android:inputType</a></body></html>"
        },
        {
          "shortName": "AndroidLintWearableBindListener",
          "displayName": "Usage of Android Wear BIND_LISTENER is deprecated",
          "enabled": false,
          "description": "<html><body>Usage of Android Wear BIND_LISTENER is deprecated<br><br>BIND_LISTENER receives all Android Wear events whether the application needs them or not. This can be inefficient and cause applications to wake up unnecessarily. With Google Play Services 8.2.0 or later it is recommended to use a more efficient combination of manifest listeners and api-based live listeners filtered by action, path and/or path prefix. <br><br>Issue id: WearableBindListener<br><br><a href=\"http://android-developers.blogspot.com/2016/04/deprecation-of-bindlistener.html\">http://android-developers.blogspot.com/2016/04/deprecation-of-bindlistener.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintUnusedResources",
          "displayName": "Unused resources",
          "enabled": false,
          "description": "<html><body>Unused resources<br><br>Unused resources make applications larger and slow down builds.<br/>\n<br/>\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.<br/>\n<br/>\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true.<br><br>Issue id: UnusedResources</body></html>"
        },
        {
          "shortName": "AndroidLintAnnotationProcessorOnCompilePath",
          "displayName": "Annotation Processor on Compile Path",
          "enabled": false,
          "description": "<html><body>Annotation Processor on Compile Classpath<br><br>This dependency is identified as an annotation processor. Consider adding it to the processor path using <code>annotationProcessor</code> instead of including it to the<br/>\ncompile path.<br><br>Issue id: AnnotationProcessorOnCompilePath</body></html>"
        },
        {
          "shortName": "AndroidLintUsableSpace",
          "displayName": "Using getUsableSpace()",
          "enabled": false,
          "description": "<html><body>Using getUsableSpace()<br><br>When you need to allocate disk space for large files, consider using the new <code>allocateBytes(FileDescriptor, long)</code> API, which will automatically clear cached files belonging to other apps (as needed) to meet your request.<br/>\n<br/>\nWhen deciding if the device has enough disk space to hold your new data, call <code>getAllocatableBytes(UUID)</code> instead of using <code>getUsableSpace()</code>, since the former will consider any cached data that the system is willing to clear on your behalf.<br/>\n<br/>\nNote that these methods require API level 26. If your app is running on older devices, you will probably need to use both APIs, conditionally switching on <code>Build.VERSION.SDK_INT</code>. Lint only looks in the same compilation unit to see if you are already using both APIs, so if it warns even though you are already using the new API, consider moving the calls to the same file or suppressing the warning.<br><br>Issue id: UsableSpace</body></html>"
        },
        {
          "shortName": "AndroidLintStaticFieldLeak",
          "displayName": "Static Field Leaks",
          "enabled": false,
          "description": "<html><body>Static Field Leaks<br><br>A static field will leak contexts.<br/>\n<br/>\nNon-static inner classes have an implicit reference to their outer class. If that outer class is for example a <code>Fragment</code> or <code>Activity</code>, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.<br/>\n<br/>\nSimilarly, direct field references to activities and fragments from these longer running instances can cause leaks.<br/>\n<br/>\nViewModel classes should never point to Views or non-application Contexts.<br><br>Issue id: StaticFieldLeak</body></html>"
        },
        {
          "shortName": "AndroidLintViewHolder",
          "displayName": "View Holder Candidates",
          "enabled": false,
          "description": "<html><body>View Holder Candidates<br><br>When implementing a view Adapter, you should avoid unconditionally inflating a new layout; if an available item is passed in for reuse, you should try to use that one instead. This helps make for example ListView scrolling much smoother.<br><br>Issue id: ViewHolder<br><br><a href=\"http://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder\">http://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder</a></body></html>"
        },
        {
          "shortName": "AndroidLintUnusedIds",
          "displayName": "Unused id",
          "enabled": false,
          "description": "<html><body>Unused id<br><br>This resource id definition appears not to be needed since it is not referenced from anywhere. Having id definitions, even if unused, is not necessarily a bad idea since they make working on layouts and menus easier, so there is not a strong reason to delete these.<br/>\n<br/>\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.<br/>\n<br/>\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true.<br><br>Issue id: UnusedIds</body></html>"
        },
        {
          "shortName": "AndroidLintTooManyViews",
          "displayName": "Layout has too many views",
          "enabled": false,
          "description": "<html><body>Layout has too many views<br><br>Using too many views in a single layout is bad for performance. Consider using compound drawables or other tricks for reducing the number of views in this layout.<br/>\n<br/>\nThe maximum view count defaults to 80 but can be configured with the environment variable <code>ANDROID_LINT_MAX_VIEW_COUNT</code>.<br><br>Issue id: TooManyViews</body></html>"
        },
        {
          "shortName": "AndroidLintUseSparseArrays",
          "displayName": "HashMap can be replaced with SparseArray",
          "enabled": false,
          "description": "<html><body>HashMap can be replaced with SparseArray<br><br>For maps where the keys are of type integer, it's typically more efficient to use the Android <code>SparseArray</code> API. This check identifies scenarios where you might want to consider using <code>SparseArray</code> instead of <code>HashMap</code> for better performance.<br/>\n<br/>\nThis is <b>particularly</b> useful when the value types are primitives like ints, where you can use <code>SparseIntArray</code> and avoid auto-boxing the values from <code>int</code> to <code>Integer</code>.<br/>\n<br/>\nIf you need to construct a <code>HashMap</code> because you need to call an API outside of your control which requires a <code>Map</code>, you can suppress this warning using for example the <code>@SuppressLint</code> annotation.<br><br>Issue id: UseSparseArrays</body></html>"
        },
        {
          "shortName": "AndroidLintObsoleteLayoutParam",
          "displayName": "Obsolete layout params",
          "enabled": false,
          "description": "<html><body>Obsolete layout params<br><br>The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed.<br><br>Issue id: ObsoleteLayoutParam</body></html>"
        },
        {
          "shortName": "AndroidLintMergeRootFrame",
          "displayName": "FrameLayout can be replaced with <merge> tag",
          "enabled": false,
          "description": "<html><body>FrameLayout can be replaced with <code>&lt;merge></code> tag<br><br>If a <code>&lt;FrameLayout></code> is the root of a layout and does not provide background or padding etc, it can often be replaced with a <code>&lt;merge></code> tag which is slightly more efficient. Note that this depends on context, so make sure you understand how the <code>&lt;merge></code> tag works before proceeding.<br><br>Issue id: MergeRootFrame<br><br><a href=\"http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html\">http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintDisableBaselineAlignment",
          "displayName": "Missing baselineAligned attribute",
          "enabled": false,
          "description": "<html><body>Missing <code>baselineAligned</code> attribute<br><br>When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster.<br><br>Issue id: DisableBaselineAlignment</body></html>"
        },
        {
          "shortName": "AndroidLintLogConditional",
          "displayName": "Unconditional Logging Calls",
          "enabled": false,
          "description": "<html><body>Unconditional Logging Calls<br><br>The BuildConfig class (available in Tools 17) provides a constant, \"DEBUG\", which indicates whether the code is being built in release mode or in debug mode. In release mode, you typically want to strip out all the logging calls. Since the compiler will automatically remove all code which is inside a \"if (false)\" check, surrounding your logging calls with a check for BuildConfig.DEBUG is a good idea.<br/>\n<br/>\nIf you <b>really</b> intend for the logging to be present in release mode, you can suppress this warning with a @SuppressLint annotation for the intentional logging calls.<br><br>Issue id: LogConditional</body></html>"
        },
        {
          "shortName": "AndroidLintDuplicateDivider",
          "displayName": "Unnecessary Divider Copy",
          "enabled": false,
          "description": "<html><body>Unnecessary Divider Copy<br><br>Older versions of the RecyclerView library did not include a divider decorator, but one was provided as a sample in the support demos. This divider class has been widely copy/pasted into various projects.<br/>\n<br/>\nIn recent versions of the support library, the divider decorator is now included, so you can replace custom copies with the \"built-in\" version, <code>android.support.v7.widget.DividerItemDecoration</code>.<br><br>Issue id: DuplicateDivider</body></html>"
        },
        {
          "shortName": "AndroidLintHandlerLeak",
          "displayName": "Handler reference leaks",
          "enabled": false,
          "description": "<html><body>Handler reference leaks<br><br>Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object.<br><br>Issue id: HandlerLeak</body></html>"
        },
        {
          "shortName": "AndroidLintRedundantNamespace",
          "displayName": "Redundant namespace",
          "enabled": false,
          "description": "<html><body>Redundant namespace<br><br>In Android XML documents, only specify the namespace on the root/document element. Namespace declarations elsewhere in the document are typically accidental leftovers from copy/pasting XML from other files or documentation.<br><br>Issue id: RedundantNamespace</body></html>"
        }
      ]
    },
    {
      "name": "JSP",
      "inspections": [
        {
          "shortName": "ELMethodSignatureInspection",
          "displayName": "EL method signature inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks if method calls in EL match <code>method-signature</code> constraints in TLD files.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnhandledExceptionInJSP",
          "displayName": "Unhandled Exception in JSP",
          "enabled": false,
          "description": "<html>\n<body>\nReports exceptions that are thrown by top level JSP scriptlets.\n<br>\nFor example:\n<b>\n  <pre> &lt;% throw new Exception(); %&gt; </pre>\n</b>\n\n<p>\n\n  These JSPs are still compilable, since servlet container wraps all JSP code with <b>try {} catch() {}</b> statement,\n  but it is bound to produce runtime exception anyway when deployed on the server.\n\n</body>\n</html>\n"
        },
        {
          "shortName": "JspDirectiveInspection",
          "displayName": "Jsp Directive Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks if a JSP import directive has uri or tagdir attributes.\n</body>\n</html>\n"
        },
        {
          "shortName": "ELDeferredExpressionsInspection",
          "displayName": "EL Deferred Expressions Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nReports using dynamic expressions where deferred ones are required.\n</body>\n</html>\n"
        },
        {
          "shortName": "ELSpecValidationInJSP",
          "displayName": "JSP EL Specification Validation",
          "enabled": false,
          "description": "<html>\n<body>\nReports possible EL problems, caused by usage of nonstandard EL extensions e.g. usage of JSF EL\nexpressions outside attribute or using nonstandard EL expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "ELValidationInJSP",
          "displayName": "EL Validation In JSP",
          "enabled": false,
          "description": "<html>\n<body>\nReports possible EL problems, such as unresolved references and invalid EL locations.\n</body>\n</html>\n"
        },
        {
          "shortName": "SelfIncludingJspFiles",
          "displayName": "Self-including JSP files",
          "enabled": false,
          "description": "<html>\n<body>\nReports any include directives in a JSP file which refer to the containing JSP file.\n<p>\n Such self-including leads to infinite recursion and so the JSP file cannot be compiled.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReferencesToClassesFromDefaultPackagesInJSPFile",
          "displayName": "References to classes from the default package in JSP files",
          "enabled": false,
          "description": "<html>\n<body>\nReports any references to a classes from the default package in JSP files.\n<p>\n Such references will not be resolved during compilation of the JSP\n because a compiled class for the JSP will be usually placed in non-default package\n (e.g. \"org.apache.jsp\" in case of Tomcat, \"com.ibm._jsp\" in case of WebSphere)\n but the import from the default package is prohibited in Java.\n</body>\n</html>\n"
        },
        {
          "shortName": "JspAbsolutePathInspection",
          "displayName": "Absolute paths",
          "enabled": false,
          "description": "<html>\n<body>\nChecks using absolute paths in JSP files\n</body>\n</html>\n"
        },
        {
          "shortName": "JspUnescapedEl",
          "displayName": "Unescaped EL Expressions",
          "enabled": false,
          "description": "<html>\n<body>\nDetects unescaped EL in JSP pages that may lead to <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">cross-site scripting\n  (XSS)</a> vulnerability. Provides fixes to wrap EL in JSTL \"out\" tag or mark this usage as safe.\n</body>\n</html>"
        },
        {
          "shortName": "JspPropertiesInspection",
          "displayName": "Jsp Properties Inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks unresolved properties from <code>*.property</code> files.\n</body>\n</html>\n"
        },
        {
          "shortName": "JspTagBodyContent",
          "displayName": "Tag body content type",
          "enabled": false,
          "description": "<html>\n<body>\nChecks JSP tag content body type\n</body>\n</html>"
        },
        {
          "shortName": "TaglibDomModelInspection",
          "displayName": "Tag Library Descriptor Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nChecks tag library descriptors validity\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "UI form",
      "inspections": [
        {
          "shortName": "FormSpellChecking",
          "displayName": "Typo in a UI form",
          "enabled": false,
          "description": "<html>\n<body>\n<p>Locates typos and misspelling in your UI forms, (e.g. in a JLabel text or JPanel title etc) and fix them in one click.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NoButtonGroup",
          "displayName": "Radio button not in a group",
          "enabled": false,
          "description": "<html>\n<body>\nReports\n<b><font color=\"#000080\">JRadioButton</font></b> components which are not placed in a\n<b><font color=\"#000080\">ButtonGroup</font></b> . A quick fix is available to group radio\nbuttons placed in adjacent grid cells.\n</body>\n</html>\n"
        },
        {
          "shortName": "NoLabelFor",
          "displayName": "No label for component",
          "enabled": false,
          "description": "<html>\n<body>\nReports components which do not have any static\ntext and do not have any label which is marked with <b><font color=\"#000080\">setLabelFor</font></b>\nfor this component. Components which do not have static text include edit fields and combo boxes.\nSuch components cannot be activated with a keyboard shortcut. The quickfix for this inspection\nallows to automatically associate an adjacent label with the problematic component.\n</body>\n</html>\n"
        },
        {
          "shortName": "BoundFieldAssignment",
          "displayName": "Assignment to UI-bound field",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments to fields which are bound to components\nin UI Designer forms. Such assignments will cause the component setup code generated by UI Designer\nfor such fields to be ignored.\n</body>\n</html>\n"
        },
        {
          "shortName": "NoScrollPane",
          "displayName": "Scrollable component not in JScrollPane",
          "enabled": false,
          "description": "<html>\n<body>\nReports\n<b><font color=\"#000080\">Scrollable</font></b> components,\nexcept for <b><font color=\"#000080\">JTextField</font></b> , which are not placed in a\n<b><font color=\"#000080\">JScrollPane</font></b> . The quickfix surrounds the problematic\ncomponent with a scroll pane.\n</body>\n</html>\n"
        },
        {
          "shortName": "OneButtonGroup",
          "displayName": "Button group with one button",
          "enabled": false,
          "description": "<html>\n<body>\nReports\n<b><font color=\"#000080\">ButtonGroup</font></b> instances which contain only one\n<b><font color=\"#000080\">JRadioButton</font></b> .\n</body>\n</html>\n"
        },
        {
          "shortName": "MissingMnemonic",
          "displayName": "Missing mnemonics",
          "enabled": false,
          "description": "<html>\n<body>\nReports focusable components with the\n<b><font color=\"#000080\">text</font></b> property or labels with assigned\n<b><font color=\"#000080\">labelFor</font></b> property which do not have a mnemonic\ncharacter. The quickfix allows to assign a unique mnemonic to such a component.\n</body>\n</html>\n"
        },
        {
          "shortName": "InvalidPropertyKeyForm",
          "displayName": "Invalid property key in a UI form",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for unresolved references to *.properties files.\n</body>\n</html>"
        },
        {
          "shortName": "I18nForm",
          "displayName": "Hardcoded string literal in a UI form",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instances of hardcoded strings in your UI forms.\nHardcoded string literals are probably errors in\nan internationalized environment.\nThis inspection won't report empty strings and strings consisting of only whitespace.\n\nThere is a quickfix provided that transforms a string literal\ninto a reference to a property in resource bundle.\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateMnemonic",
          "displayName": "Duplicate mnemonics",
          "enabled": false,
          "description": "<html>\n<body>\nReports components which have the same mnemonic\ncharacter. The quickfix allows to assign unique mnemonic characters to each of the components.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Portability",
      "inspections": [
        {
          "shortName": "RuntimeExec",
          "displayName": "Call to 'Runtime.exec()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>Runtime.exec()</b> or any\nof its variants. Calls to <b>Runtime.exec()</b> are inherently unportable\nbetween operating systems.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfSunClasses",
          "displayName": "Use of sun.* classes",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of classes from the <b><i>sun.*</i></b> hierarchy.\nSuch classes are non-portable between different JVM's.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NativeMethods",
          "displayName": "Native method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods declared <b>native</b>. Native methods are inherently unportable.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfJDBCDriverClass",
          "displayName": "Use of concrete JDBC driver class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of concrete JDBC driver classes. Use of such classes will\nbind your project to a specific database and driver, defeating the purpose of JDBC and\nresulting in loss of portability.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SystemGetenv",
          "displayName": "Call to 'System.getenv()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>System.getenv()</b>.\nCalls to <b>System.getenv()</b> are inherently unportable.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "HardcodedFileSeparators",
          "displayName": "Hardcoded file separator",
          "enabled": false,
          "description": "<html>\n<body>\nReports the forward (/) or backward (\\) slash in a string or\ncharacter literal. These characters are commonly used as file separators, and portability may suffer if their use is hardcoded.\nThis will not report a forward slash immediately following a '&lt;' character,\nor immediately preceding a '&gt;' character, as those often indicate XML or HTML tags rather than file names,\nstrings representing a <b>java.util.TimeZone</b> ID, strings that are a valid regular expression or strings that equal an IANA-registered MIME media type.\n<p>\nNormally, usage of the <b>example/*</b> MIME media type outside of an example (<em>e.g.</em> in a <b>Content-Type</b>\nheader) is an error.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to include <b>example/*</b> in the set of recognized media types.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfAWTPeerClass",
          "displayName": "Use of AWT peer class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of concrete AWT peer classes. Such classes represent\nnative windowing system widgets, and will be non-portable between different windowing\nsystems.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "HardcodedLineSeparators",
          "displayName": "Hardcoded line separator",
          "enabled": false,
          "description": "<html>\n<body>\nReports the newline (<b>\\n</b>) or return (<b>\\r</b>) characters in a string or\ncharacter literal. These characters are commonly used as line separators, and portability may suffer if they are hardcoded.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SystemExit",
          "displayName": "Call to 'System.exit()' or related methods",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>System.exit()</b>,\n<b>Runtime.exit()</b>, or <b>Runtime.halt()</b>.\nCalls to these methods make the calling code unportable to most application servers.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore calls in main methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfProcessBuilder",
          "displayName": "Use of 'java.lang.ProcessBuilder' class",
          "enabled": false,
          "description": "<html>\n<body>\nReports uses of <b>java.lang.ProcessBuilder</b>.\nUses of <b>ProcessBuilder</b> are inherently unportable between operating systems.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Unit testing",
      "inspections": [
        {
          "shortName": "JSTestFailedLine",
          "displayName": "Highlight failure line in test code",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights failed method calls or assertions in tests.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code",
      "inspections": [
        {
          "shortName": "SpringJavaInjectionPointsAutowiringInspection",
          "displayName": "Autowiring for bean class",
          "enabled": false,
          "description": "Checks autowiring problems in a bean class."
        },
        {
          "shortName": "UseDPIAwareInsets",
          "displayName": "Use DPI-aware insets",
          "enabled": false,
          "description": "<html>\n<body>\nUse <code>JBUI.insets</code> for DPI-aware insets.\n</body>\n</html>"
        },
        {
          "shortName": "SpringJavaAutowiredFieldsWarningInspection",
          "displayName": "Field injection warning",
          "enabled": false,
          "description": "<html>\n<body>\n<strong>Spring Team recommends:</strong> <em>\"Always use constructor based dependency injection in your beans. Always use assertions for mandatory dependencies\".</em>\n<!-- tooltip end -->\n<br><br>\n<strong>Field injection/NullPointerException example:</strong><br><br>\n<pre>\nclass MyComponent {\n\n  @Inject MyCollaborator collaborator;\n\n  public void myBusinessMethod() {\n    collaborator.doSomething(); // -> <strong>NullPointerException</strong>\n  }\n}\n</pre>\n\n<br>\n\n<hr>\n\n<strong>Constructor injection should be used:</strong><br><br>\n<pre>\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething(); // -> <strong>safe</strong>\n  }\n}\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "UsePrimitiveTypes",
          "displayName": "Use .equals with primitive types",
          "enabled": false,
          "description": "<html>\n<body>\nPrimitive types should be compared with <code>.equals</code> due to Java 8 type annotations also applicable to primitive types.\n</body>\n</html>"
        },
        {
          "shortName": "SpringConfigurationProxyMethods",
          "displayName": "@Configuration proxyMethods usage warnings",
          "enabled": false,
          "description": "<html>\n<body>\nSpring Framework 5.2 has introduced an optimization for @Configuration class processing that can be enabled via an attribute @Configuration(proxyBeanMethods = false).\n<br><br>\nIf you disable <code>proxyBeanMethods</code> the proxy instances are no longer created and calling the method invokes it again (returning a new instance every time).\nAs a result, you have no guarantee that you're actually injecting the corresponding bean in the context.\n<!-- tooltip end -->\n<br><br>\n<strong>Incorrect bean method call example:</strong><br><br>\n<pre>\n@Configuration(proxyBeanMethods = false)\nclass TestConfiguration {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean() {\n    return new SecondBean(firstBean()); // -> <strong>incorrect call</strong>\n  }\n}\n</pre>\n<br>\n\n<hr>\n<strong>You can set <code>proxyBeanMethods</code> to true or rewrite the code as follows:</strong><br><br>\n<pre>\n@Configuration(proxyBeanMethods = false)\nclass TestConfiguration {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean(FirstBean someBean) { // -> <strong>correct injected instance</strong>\n    return new SecondBean(someBean);\n  }\n}\n</pre>\n<br>\n\n<hr>\n<strong>Also, the inspection checks @Bean method calls in a class without the @Configuration stereotype (in \"bean lite mode\"):</strong><br><br>\n<pre>\n@Component\nclass TestComponent {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean() {\n    return new SecondBean(firstBean()); // -> <strong>incorrect call</strong>\n  }\n}\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnsafeVfsRecursion",
          "displayName": "Unsafe VFS recursion",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects calls of <code>VirtualFile.getChildren()</code> inside recursive methods.\nSuch code may cause dead loops when iterating over cyclic symlinks -\nso please use <code>VfsUtilCore.visitChildrenRecursively()</code> instead.\n</body>\n</html>\n"
        },
        {
          "shortName": "ContextJavaBeanUnresolvedMethodsInspection",
          "displayName": "@Configuration and @Bean",
          "enabled": false,
          "description": "Validates method references in code configuration."
        },
        {
          "shortName": "AsyncMethodInspection",
          "displayName": "Method annotated with @Async should return ''void'' or \"Future-like\" type",
          "enabled": false,
          "description": "<html>\n<body>\n@Async methods should return void, java.util.concurrent.Future, org.springframework.util.concurrent.ListenableFuture or java.util.concurrent.CompletableFuture\n</body>\n</html>"
        },
        {
          "shortName": "SpringCacheableComponentsInspection",
          "displayName": "@Cacheable, @CacheEvict, @CachePut, @CacheConfig errors",
          "enabled": false,
          "description": "<html>\n<body>\nCaching annotation errors (@Cacheable, @CacheEvict, @CachePut, @CacheConfig)\n</body>\n</html>"
        },
        {
          "shortName": "UseDPIAwareBorders",
          "displayName": "Use DPI-aware borders",
          "enabled": false,
          "description": "<html>\n<body>\nUse <code>JBUI.Borders.empty</code> for DPI-aware empty borders.\n</body>\n</html>"
        },
        {
          "shortName": "SerializableCtor",
          "displayName": "Non-default constructor in serializable class",
          "enabled": false,
          "description": "<html>\n<body>\n  Detects non-default constructor in serializable classes (which is not allowed by IonObjectSerializer)\n</body>\n</html>"
        },
        {
          "shortName": "QuickFixGetFamilyNameViolation",
          "displayName": "QuickFix's getFamilyName() implementation must not depend on a specific context",
          "enabled": false,
          "description": "<html>\n<body>\nInspection reports cases when <code>QuickFix#getFamilyName()</code>\nimplementation uses non-static fields, methods, containing method local variables variables etc.\n</body>\n</html>"
        },
        {
          "shortName": "SpringTestingTransactionalInspection",
          "displayName": "Spring Testing @Transactional errors",
          "enabled": false,
          "description": "<html>\n<body>\nSpring Testing  @Transactional errors\n</body>\n</html>"
        },
        {
          "shortName": "PsiElementConcatenation",
          "displayName": "Using PsiElement string representation to generate new expression is incorrect",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that <code>PsiElement</code> is not directly concatenated in the string which will be used for\n<code>createExpressionFromText</code>, etc. <code>PsiElement.getText()</code> usually should be used instead.\n</body>\n</html>"
        },
        {
          "shortName": "UseCouple",
          "displayName": "Use Couple instead of Pair",
          "enabled": false,
          "description": "<html>\n<body>\nUse <code>Couple&lt;T&gt;</code> instead of <code>Pair&lt;T, T&gt;</code>.\n</body>\n</html>"
        },
        {
          "shortName": "SpringComponentScan",
          "displayName": "@ComponentScan setup",
          "enabled": false,
          "description": "<html>\n<body>\nChecks @ComponentScan (and similar annotations) for setup errors.\n</body>\n</html>"
        },
        {
          "shortName": "SpringJavaStaticMembersAutowiringInspection",
          "displayName": "Static Members Autowiring",
          "enabled": false,
          "description": "Checks static methods and fields with Spring autowired annotation."
        },
        {
          "shortName": "SpringRequiredAnnotationInspection",
          "displayName": "Required Annotation",
          "enabled": false,
          "description": "Checks bean class setters marked with @Required annotation.<br>\nSee also <strong>Required Properties Inspection</strong>"
        },
        {
          "shortName": "InspectionUsingGrayColors",
          "displayName": "Using new Color(a,a,a)",
          "enabled": false,
          "description": "<html>\n<body>\nUse cache (<code>com.intellij.ui.Gray</code>) for gray colors.\n</body>\n</html>\n"
        },
        {
          "shortName": "SpringCacheAnnotationsOnInterfaceInspection",
          "displayName": "Cache* annotations defined on interfaces/interface methods",
          "enabled": false,
          "description": "<html>\n<body>\nSpring Team recommends that you only annotate concrete classes (and methods of concrete classes) with the @Cache* annotation, as opposed to\nannotating interfaces.\nYou certainly can place the @Cache* annotation on an interface (or an interface method), but this works only as you\nwould expect it to if you are using interface-based proxies. The fact that Java annotations are not inherited from interfaces means that if\nyou are using class-based proxies (proxy-target-class=\"true\") or the weaving-based aspect (mode=\"aspectj\"), then the caching settings are\nnot recognized by the proxying and weaving infrastructure, and the object will not be wrapped in a caching proxy, which would be decidedly\nbad.\n</body>\n</html>"
        },
        {
          "shortName": "SpringPropertySource",
          "displayName": "@PropertySource and @TestPropertySource location warnings",
          "enabled": false,
          "description": "Checks @PropertySource and @TestPropertySource errors."
        },
        {
          "shortName": "SpringImportResource",
          "displayName": "@ImportResource location warnings",
          "enabled": false,
          "description": "Checks @ImportResource errors."
        },
        {
          "shortName": "SpringTransactionalComponentInspection",
          "displayName": "Undefined PlatformTransactionManager",
          "enabled": false,
          "description": "Checks if <code>PlatformTransactionManager</code> is defined in application context for current <code>@Transactional</code> component."
        },
        {
          "shortName": "SpringTestingSqlInspection",
          "displayName": "@Sql and @SqlGroup warnings",
          "enabled": false,
          "description": "Checks @Sql and @SqlGroup errors."
        },
        {
          "shortName": "MissingRecentApi",
          "displayName": "Usage of IntelliJ API not available in older IDEs",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of IntelliJ API that were introduced in a version newer than \"since-build\" specified in the <code>plugin.xml</code>.\nIt may lead to incompatibilities of the plugin with older IDE builds.\n\n<p>\n  To avoid possible issues when running the plugin in older IDEs, it may be necessary to increase \"since-build\" constraint of the plugin,\n  alternatively avoid using the APIs.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SpringJavaConfigExternalBeansErrorInspection",
          "displayName": "Java Configured @ExternalBean",
          "enabled": false,
          "description": "Java Configured @ExternalBean Errors"
        },
        {
          "shortName": "FileEqualsUsage",
          "displayName": "File.equals() usage",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects usages of <code>File.equals/hashCode/compareTo</code> methods - which do not honor case-insensitivity on macOS.\nPlease use <code>FileUtil.filesEquals/fileHashCode/compareFiles</code> methods instead.\n</body>\n</html>\n"
        },
        {
          "shortName": "InspectionUniqueToolbarId",
          "displayName": "Specify toolbar id",
          "enabled": false,
          "description": "<html>\n<body>\nPlease specify unique toolbar id.\n</body>\n</html>"
        },
        {
          "shortName": "UseJBColor",
          "displayName": "Use Darcula aware JBColor",
          "enabled": false,
          "description": "<html>\n<body>\nUse dark theme aware <code>JBColor</code> instead of <code>java.awt.Color</code>.\nUse the <code>JBColor</code> constructor to specify regular and dark theme colors, to avoid using bad looking colors under dark themes.\n</body>\n</html>"
        },
        {
          "shortName": "SpringLookupInjectionInspection",
          "displayName": "@Lookup",
          "enabled": false,
          "description": "@Lookup configuration errors"
        },
        {
          "shortName": "PresentationAnnotation",
          "displayName": "Invalid icon path in @Presentation",
          "enabled": false,
          "description": "<html>\n<body>\nValidates the icon path in <code>@Presentation</code> annotation.\n</body>\n</html>"
        },
        {
          "shortName": "UElementAsPsi",
          "displayName": "UElement as PsiElement usage",
          "enabled": false,
          "description": "<html>\n<body>\nReports usage of <code>UElement</code> as <code>PsiElement</code>. The <code>PsiElement</code> obtained this way is ambiguous.\n<p>\nIf you need \"physical\" <code>PsiElement</code> please use <code>UElementKt.getSourcePsiElement()</code>,\nif you need <code>PsiElement</code> that \"emulates\" behaviour of Java-elements (<code>PsiClass</code>, <code>PsiMethod</code>, etc.)\nthen please use <code>UElementKt.getAsJavaPsiElement()</code>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SpringJavaConfigInconsistencyInspection",
          "displayName": "Java Config",
          "enabled": false,
          "description": "Java Config inconsistencies"
        },
        {
          "shortName": "NonDefaultConstructor",
          "displayName": "Non-default constructors for service and extension class",
          "enabled": false,
          "description": "<html>\n<body>\nValidates that extension class has only default constructor.\n</body>\n</html>"
        },
        {
          "shortName": "UseVirtualFileEquals",
          "displayName": "Use VirtualFile.equals",
          "enabled": false,
          "description": "<html>\n<body>\nUse <code>equals</code> instead of <code>==</code> when comparing <code>VirtualFile</code> objects\n</body>\n</html>"
        },
        {
          "shortName": "SpringCacheNamesInspection",
          "displayName": "Cache names definition errors",
          "enabled": false,
          "description": "<html>\n<body>\nAt least one cache name should be provided per cache operation.\n@Cacheable(\"cache_name\") or @Cacheable(cacheNames =\"cache_name\").\n@CacheConfig#cacheNames() could be used for sharing common cache-related settings at the class level.\n</body>\n</html>"
        },
        {
          "shortName": "SpringEventListenerInspection",
          "displayName": "@EventListener configuration error",
          "enabled": false,
          "description": "@EventListener errors."
        },
        {
          "shortName": "ScheduledMethodInspection",
          "displayName": "Method annotated with @Scheduled should be void and no-args",
          "enabled": false,
          "description": "<html>\n<body>\n<strong>According to Spring Documentation:</strong> <em>\"Methods to be scheduled must have void returns and must not expect any arguments. If the method needs to interact with other objects from the Application Context, then those would typically have been provided through dependency injection.\".</em>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SpringTestingDirtiesContextInspection",
          "displayName": "Spring Testing @DirtiesContext errors",
          "enabled": false,
          "description": "<html>\n<body>Spring Testing @DirtiesContext errors</body>\n</html>"
        },
        {
          "shortName": "SpringContextConfigurationInspection",
          "displayName": "@ContextConfiguration and @SqlConfig warnings",
          "enabled": false,
          "description": "Checks @ContextConfiguration and @SqlConfig errors."
        },
        {
          "shortName": "SpringProfileExpression",
          "displayName": "Incorrect profile expression",
          "enabled": false,
          "description": "<html>\n<body>\nSpring profile must not be empty.\n<code>&</code> and <code>|</code> operators may not be mixed without using parentheses in Spring profile expression.\n</body>\n</html>"
        },
        {
          "shortName": "DontUsePairConstructor",
          "displayName": "Don't use constructor of Pair class",
          "enabled": false,
          "description": "<html>\n<body>\nUse of <code>Pair</code> constructor produces unnecessary generic declarations, use <code>Pair.create(a, b)</code> instead.\n</body>\n</html>"
        },
        {
          "shortName": "SpringJavaConstructorAutowiringInspection",
          "displayName": "Autowiring issues in a Spring bean class constructors",
          "enabled": false,
          "description": "Checks autowiring problems in Spring bean class constructors: more than one @Autowired constructor, no matching constructor for autowiring, etc."
        },
        {
          "shortName": "UnsafeReturnStatementVisitor",
          "displayName": "Unsafe return statements visitor",
          "enabled": false,
          "description": "<html>\n<body>\nReports recursive Java element visitors which process <code>PsiReturnStatement</code>s\neven if they belong to another <code>PsiClass</code> or <code>PsiLambdaExpression</code>. In most cases it's a bug.\n</body>\n</html>"
        },
        {
          "shortName": "StatefulEp",
          "displayName": "Stateful extension",
          "enabled": false,
          "description": "<html>\n<body>\nPotential memory leak detected. Please don't hold heavy objects in extensions if you're not 100% sure.\nIdeally, extensions should be stateless.\n</body>\n</html>"
        },
        {
          "shortName": "SpringJavaAutowiredMembersInspection",
          "displayName": "Autowired members defined in invalid Spring bean",
          "enabled": false,
          "description": "Checks that autowired members are defined in valid Spring bean (@Component|@Service|...)."
        },
        {
          "shortName": "SpringCacheableAndCachePutInspection",
          "displayName": "Using @CachePut and @Cacheable on same method",
          "enabled": false,
          "description": "<html>\n<body>\nUsing @CachePut and @Cacheable annotations on the same method is generally strongly discouraged because they have different behaviors. While\nthe latter causes the method execution to be skipped by using the cache, the former forces the execution in order to execute a cache update.\nThis leads to unexpected behavior and with the exception of specific corner-cases (such as annotations having conditions that exclude them\nfrom each other), such declaration should be avoided. Note also that such condition should not rely on the result object (i.e. the #result\nvariable) as these are validated upfront to confirm the exclusion.\n</body>\n</html>"
        },
        {
          "shortName": "UndesirableClassUsage",
          "displayName": "Undesirable class usage",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects usages of internally deprecated classes.\n</body>\n</html>\n"
        },
        {
          "shortName": "ComponentNotRegistered",
          "displayName": "Component/Action not registered",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects plugin components and actions that are not (yet) registered in a plugin.xml\ndescriptor and offers a QuickFix to register the component. This eases developing new components when\nmaking use of the \"Create Class\" intention and helps to keep track of potentially obsolete\ncomponents.\n<p>\n    There's an option to turn off the check for Actions as they may be intentionally created and\n    registered dynamically. Note that the inspection can also be suppressed on a per-class level,\n    so it normally shouldn't be necessary to switch off the inspection completely. Especially\n    because the inspection ignores abstract classes and by default non-public classes as well.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Cloud",
      "inspections": [
        {
          "shortName": "SpringBootBootstrapConfigurationInspection",
          "displayName": "Bootstrap Configuration",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that <code>BootstrapConfiguration</code> is not included into Spring Boot application context via component scan,\nwhere it might not be needed.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "CDI (Contexts and Dependency Injection)",
      "inspections": [
        {
          "shortName": "CdiStereotypeRestrictionsInspection",
          "displayName": "@Stereotype restrictions",
          "enabled": false,
          "description": "If a stereotype declares a requiredType, and the Web Bean API types do not include the type, a DefinitionException is thrown by the Web Bean manager at initialization time.\nIf a stereotype explicitly declares a set of scope types using supportedScopes, and the Web Bean scope is not in that set, a DefinitionException is thrown by the Web Bean manager at initialization time.\nIf a Web Bean declares multiple stereotypes, it must satisfy every restriction declared by every declared stereotype. Multiple stereotypes must specify the same scope OR a scope must be specified on the bean.\n"
        },
        {
          "shortName": "CdiObservesInspection",
          "displayName": "@Observer method errors",
          "enabled": false,
          "description": "Observer method errors.\n"
        },
        {
          "shortName": "CdiUnproxyableBeanTypesInspection",
          "displayName": "Unproxyable Bean Types inconsistency",
          "enabled": false,
          "description": "<html>\n<body>\nUnproxyable bean types inconsistency. <br>\nCertain legal bean types cannot be proxied by the container: classes which don't have a non-private constructor with no parameters, classes which are declared final or have final methods, primitive types, and array types.\n\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiSpecializesInspection",
          "displayName": "@Specializes inconsistency errors",
          "enabled": false,
          "description": "@Specialize annotation inconsistency errors.\n"
        },
        {
          "shortName": "CdiDomBeans",
          "displayName": "beans.xml configuration errors",
          "enabled": false,
          "description": "<html>\n<body>\nbeans.xml configuration errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiInjectInspection",
          "displayName": "@Inject errors",
          "enabled": false,
          "description": "@Initializer errors.\n"
        },
        {
          "shortName": "CdiTypedAnnotationInspection",
          "displayName": "@Typed annotation errors",
          "enabled": false,
          "description": "<html>\n<body>\n@Typed annotation inconsistency. <br>\nWhen a @Typed annotation is explicitly specified, only the types whose classes are explicitly listed using the value member,\ntogether with java.lang.Object, are bean types of the bean.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiAlternativeInspection",
          "displayName": "@Alternative errors",
          "enabled": false,
          "description": "<html>\n<body>\n@Alternative errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiUnknownProducersForDisposerMethodInspection",
          "displayName": "Unknown Producers for Disposer Method",
          "enabled": false,
          "description": "<html>\n<body>\n<p>Validate that Disposer methods have corresponding producer method.</p>\n<p>Each disposer method must have exactly one disposed parameter, of the same type as the corresponding producer method or\n  producer field return type. When searching for disposer methods for a producer method or producer field, the container\n  considers the type and qualifiers of the disposed parameter. If a disposed parameter resolves to a producer method or\n  producer field declared by the same bean class, the container must call this method when destroying any instance returned by\n  that producer method or producer field.</p>\n</body>\n</html>"
        },
        {
          "shortName": "CdiDecoratorInspection",
          "displayName": "@Decorator inconsistency errors",
          "enabled": false,
          "description": "@Decorator inconsistency errors.\n"
        },
        {
          "shortName": "CdiDisposerMethodInspection",
          "displayName": "Disposer Method errors",
          "enabled": false,
          "description": "<html>\n<body>\nDisposer Method errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiStereotypeInspection",
          "displayName": "@Stereotype errors",
          "enabled": false,
          "description": "<html>\n<body>\n@Stereotype errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiInjectionPointsInspection",
          "displayName": "Injection Points Ambiguous Dependencies",
          "enabled": false,
          "description": "<html>\n<body>\nDetect Injection points that have ambiguous dependencies.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiScopeInspection",
          "displayName": "Bean @Scope inconsistency",
          "enabled": false,
          "description": "<html>\n<body>\nValidates Bean scope inconsistency.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiManagedBeanInconsistencyInspection",
          "displayName": "Managed Bean Inconsistency errors",
          "enabled": false,
          "description": "Validate if a top-level Java class is a simple bean:\n- It is not a parameterized type.\n- It is not a non-static inner class.\n- It is a concrete class, or is annotated @Decorator.\n- It does not implement any of the following interfaces: javax.servlet.Servlet, javax.servlet.Filter, javax.servlet.ServletContextListener, javax.servlet.http.HttpSessionListener, javax.servlet.ServletRequestListener, javax.ejb.EnterpriseBean\n- It does not extend javax.faces.component.UIComponent.\n- It has an appropriate constructor - either: the class has a constructor with no parameters, or the class declares a constructor annotated @Initializer.\n"
        },
        {
          "shortName": "CdiNormalScopeInspection",
          "displayName": "Bean scope inconsistency",
          "enabled": false,
          "description": "<html>\n<body>\nBean scope inconsistency.\n</body>\n</html>\n"
        },
        {
          "shortName": "CdiInterceptorInspection",
          "displayName": "@Interceptor errors",
          "enabled": false,
          "description": "<html>\n<body>\n@Interceptor errors.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Bean Validation",
      "inspections": [
        {
          "shortName": "BvConstraintMappingsInspection",
          "displayName": "Constraints configuration inspection",
          "enabled": false,
          "description": "<html>\n<body>\nMistakes in qualified names of classes and fields\n</body>\n</html>"
        },
        {
          "shortName": "BvConfigDomInspection",
          "displayName": "Constraints configuration inspection",
          "enabled": false,
          "description": "<html>\n<body>\nConfiguration issues\n</body>\n</html>"
        },
        {
          "shortName": "MinMaxValuesInspection",
          "displayName": "Bean Validation 'min' and 'max' Annotation Values Inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection validates max and min values of different constraint annotations\n</body>\n</html>"
        },
        {
          "shortName": "ConstraintValidatorCreator",
          "displayName": "Constraint Validator Creator",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks for valid ConstraintValidator and allow to run a quick fix for its creation\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JSON and JSON5",
      "inspections": [
        {
          "shortName": "JsonSchemaCompliance",
          "displayName": "Compliance with JSON schema",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that JSON files conform to JSON Schemas assigned to them<br>\n</body>\n</html>"
        },
        {
          "shortName": "JsonDuplicatePropertyKeys",
          "displayName": "Duplicate keys in object literals",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that object literals don't contain duplicate keys.<br>\n</body>\n</html>"
        },
        {
          "shortName": "JsonStandardCompliance",
          "displayName": "Compliance with JSON standard",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that JSON files conform to language specification (RFC-7159).<br>\n</body>\n</html>"
        },
        {
          "shortName": "JsonSchemaRefReference",
          "displayName": "Unresolved '$ref' and '$schema' references",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that '$ref' and '$schema' paths are valid<br>\n</body>\n</html>"
        },
        {
          "shortName": "Json5StandardCompliance",
          "displayName": "Compliance with JSON5 standard",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that JSON5 files conform to language specification (http://json5.org/).<br>\n</body>\n</html>"
        },
        {
          "shortName": "JsonSchemaDeprecation",
          "displayName": "Deprecated JSON property",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection checks for deprecated properties in JSON files<br>\nNote that deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard extension 'deprecationMessage'.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Android Lint: Interoperability",
      "inspections": [
        {
          "shortName": "AndroidLintUnknownNullness",
          "displayName": "Unknown nullness",
          "enabled": false,
          "description": "<html><body>Unknown nullness<br><br>To improve referencing this code from Kotlin, consider adding<br/>\nexplicit nullness information here with either <code>@NonNull</code> or <code>@Nullable</code>.<br/>\n<br/>\nYou can set the environment variable<br/>\n    <code>ANDROID_LINT_NULLNESS_IGNORE_DEPRECATED=true</code><br/>\nif you want lint to ignore classes and members that have been annotated with<br/>\n<code>@Deprecated</code>.<br><br>Issue id: UnknownNullness<br><br><a href=\"https://android.github.io/kotlin-guides/interop.html#nullability-annotations\">https://android.github.io/kotlin-guides/interop.html#nullability-annotations</a></body></html>"
        },
        {
          "shortName": "AndroidLintNoHardKeywords",
          "displayName": "No Hard Kotlin Keywords",
          "enabled": false,
          "description": "<html><body>No Hard Kotlin Keywords<br><br>Do not use Kotlin&#8217;s hard keywords as the name of methods or fields.<br/>\nThese require the use of backticks to escape when calling from Kotlin.<br/>\nSoft keywords, modifier keywords, and special identifiers are allowed.<br/>\n<br/>\nFor example, Mockito&#8217;s <code>when</code> function requires backticks when used from Kotlin:<br/>\n<br/>\n    val callable = Mockito.mock(Callable::class.java)<br/>\n    Mockito.`when`(callable.call()).thenReturn(/* &#8230; */)<br><br>Issue id: NoHardKeywords<br><br><a href=\"https://android.github.io/kotlin-guides/interop.html#no-hard-keywords\">https://android.github.io/kotlin-guides/interop.html#no-hard-keywords</a></body></html>"
        },
        {
          "shortName": "AndroidLintKotlinPropertyAccess",
          "displayName": "Kotlin Property Access",
          "enabled": false,
          "description": "<html><body>Kotlin Property Access<br><br>For a method to be represented as a property in Kotlin, strict &#8220;bean&#8221;-style prefixing must be used.<br/>\n<br/>\nAccessor methods require a &#8216;get&#8217; prefix or for boolean-returning methods an &#8216;is&#8217; prefix can be used.<br><br>Issue id: KotlinPropertyAccess<br><br><a href=\"https://android.github.io/kotlin-guides/interop.html#property-prefixes\">https://android.github.io/kotlin-guides/interop.html#property-prefixes</a></body></html>"
        },
        {
          "shortName": "AndroidLintLambdaLast",
          "displayName": "Lambda Parameters Last",
          "enabled": false,
          "description": "<html><body>Lambda Parameters Last<br><br>To improve calling this code from Kotlin,<br/>\nparameter types eligible for SAM conversion should be last.<br><br>Issue id: LambdaLast<br><br><a href=\"https://android.github.io/kotlin-guides/interop.html#lambda-parameters-last\">https://android.github.io/kotlin-guides/interop.html#lambda-parameters-last</a></body></html>"
        }
      ]
    },
    {
      "name": "Sass/SCSS",
      "inspections": [
        {
          "shortName": "SassScssUnresolvedPlaceholderSelector",
          "displayName": "Unresolved placeholder selector",
          "enabled": false,
          "description": "This inspection warns about sass/scss placeholder selector references which can't be resolved to any valid target.\n"
        },
        {
          "shortName": "SassScssUnresolvedMixin",
          "displayName": "Unresolved mixin",
          "enabled": false,
          "description": "This inspection warns about sass/scss mixins references which can't be resolved to any valid target.\n"
        },
        {
          "shortName": "SassScssUnresolvedVariable",
          "displayName": "Unresolved variable",
          "enabled": false,
          "description": "This inspection warns about sass/scss variable references which can't be resolved to any valid target.\n"
        },
        {
          "shortName": "SassScssResolvedByNameOnly",
          "displayName": "Resolved by name only",
          "enabled": false,
          "description": "This inspection warns about SASS/SCSS elements that are not imported explicitly and resolved through all project SASS or SCSS files only by name.\n    You have no guaranties that these elements will be resolved at the production.\n\n"
        }
      ]
    },
    {
      "name": "JVM languages",
      "inspections": [
        {
          "shortName": "UnstableApiUsage",
          "displayName": "Unstable API Usage",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of API marked with \"unstable\" annotations from the list below.\n</body>\n</html>"
        },
        {
          "shortName": "BlockingMethodInNonBlockingContext",
          "displayName": "Inappropriate thread-blocking method call",
          "enabled": false,
          "description": "<html>\n<body>\nReports thread-blocking method calls found in a code fragment where a thread should not be blocked\n<!-- tooltip end -->\n(e.g. Reactive frameworks, Kotlin coroutines)\n</body>\n</html>"
        },
        {
          "shortName": "OverrideOnly",
          "displayName": "Method can only be overridden",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Reports invocations of API methods marked with <code>@ApiStatus.OverrideOnly</code> annotation.\n</p>\n<code>@ApiStatus.OverrideOnly</code> indicates that the annotated method is part of SPI (Service Provider Interface),\nwhich is intended to be <strong>only implemented or overridden</strong> but not called by clients of the declaring library.\nIf a class or interface is marked with this annotation it means that all its methods can be only overridden.\n</body>\n</html>\n"
        },
        {
          "shortName": "MissingDeprecatedAnnotationOnScheduledForRemovalApi",
          "displayName": "Missing '@Deprecated' annotation on scheduled for removal API",
          "enabled": false,
          "description": "<html>\n<body>\nReports any declarations of classes, fields, or methods marked with <b>@org.jetbrains.annotations.ApiStatus.ScheduledForRemoval</b>\nannotation that are not accompanied by <b>@Deprecated</b> annotation.\n</body>\n</html>"
        },
        {
          "shortName": "NonExtendableApiUsage",
          "displayName": "Class, interface, or method should not be extended",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Reports classes, interfaces and methods that extend, implement or override API elements marked with <code>@ApiStatus.NonExtendable</code>\n  annotation.\n</p>\n<code>@ApiStatus.NonExtendable</code> annotation indicates that the annotated API class, interface or method <strong>must not be extended,\n  implemented or overridden</strong>. Instances of classes and interfaces marked with this annotation may be cast to an internal\nimplementing class in the library code,\nleading to <code>ClassCastException</code> if a different implementation is provided by client. New abstract methods may be added to such\nclasses and interfaces breaking compatibility with client's implementations.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnstableTypeUsedInSignature",
          "displayName": "Unstable type is used in signature",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Reports declarations of classes, methods and fields that reference an unstable API type in the signature\n  but are not marked with the same unstable annotation. Set of checked annotations' names is specified below.\n</p>\nThis inspection may be useful to check that no <i>unstable (internal, experimental)</i> types are exposed in signatures of public API.\nFor example, if an <i>experimental</i> class is used as the return type of a method, the method is also considered <i>experimental</i>\nbecause incompatible changes of the type (deletion or move to another package) lead to incompatible method signature changes.\n</body>\n</html>"
        },
        {
          "shortName": "MustAlreadyBeRemovedApi",
          "displayName": "API must already be removed",
          "enabled": false,
          "description": "<html>\n<body>\nReports any declarations of classes, fields, or methods marked with <b>@org.jetbrains.annotations.ApiStatus.ScheduledForRemoval</b>\nannotation that must already be removed. Specified scheduled removal version is compared with the current version that you may set below.\nVersions are dot-separated strings with possibly \"alpha\", \"beta\", \"eap\" classifiers, like \"1.0\", \"2.3.1\", \"2018.1\", \"7.5-snapshot\",\n\"3.0-eap\". Versions comparison is intuitive: 1.0 &lt 2.0, 1.0-eap &lt 1.0, 2.3-snapshot &lt 2.3 and so on.\nFor detailed comparison logic refer to implementation of <a\n    href=\"https://github.com/JetBrains/intellij-community/blob/master/platform/util-rt/src/com/intellij/util/text/VersionComparatorUtil.java\">VersionComparatorUtil</a>.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Performance",
      "inspections": [
        {
          "shortName": "CollectionContainsUrl",
          "displayName": "Map or Set may contain 'java.net.URL' objects",
          "enabled": false,
          "description": "<html>\n<body>\nReports objects which are a subtype of\n<b>java.util.Set</b> or <b>java.util.Map</b>\nand which may contain <b>java.net.URL</b> objects. Adding <b>java.net.URL</b>\nobjects to such collections can cause performance problems because of calls to the\n<b>equals()</b> and <b>hashCode()</b>\nmethods of <b>java.net.URL</b>.\n<b>java.net.URL</b>'s <b>equals()</b> and <b>hashCode()</b> method use a DNS\nlookup, which depending on the availability of the network and the speed of the DNS server\ncan cause significant delays.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferToStringInConcatenation",
          "displayName": "'StringBuilder.toString()' in concatenation",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>StringBuffer.toString()</b> or <b>StringBuilder.toString()</b> calls in String concatenations.\nSuch calls are unnecessary when concatenating and can be removed, saving a method call and an object allocation which may improve performance.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BoxingBoxedValue",
          "displayName": "Boxing of already boxed value",
          "enabled": false,
          "description": "<html>\n<body>\nReports boxing of already boxed values. This is a redundant\noperation since any boxed value will first be auto-unboxed before boxing the\nvalue again. If done inside an inner loop such code may cause performance\nproblems.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "EqualsHashCodeCalledOnUrl",
          "displayName": "'equals()' or 'hashCode()' called on 'java.net.URL' object",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>.equals()</b> or\n<b>.hashCode()</b> being called\non <b>java.net.URL</b> objects. This can cause performance\nproblems because those methods uses a DNS lookup\nto determine the equality of two <b>java.net.URL</b> objects.\nDepending on the availability of the network and the speed of the DNS server, this can cause\nsignificant delays.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MapReplaceableByEnumMap",
          "displayName": "Map replaceable with EnumMap",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instantiations of <b>java.util.Map</b> objects\nwhose key types are enumerated classes. Such <b>java.util.Map</b> objects\ncan be replaced by <b>java.util.EnumMap</b> objects.\n<b>java.util.EnumMap</b> implementations can be much more efficient\nthat those of other sets, as the underlying data structure is a simple array.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LengthOneStringInIndexOf",
          "displayName": "Single character string argument in 'String.indexOf()' call",
          "enabled": false,
          "description": "<html>\n<body>\nReports String literals of length one being used\nas a parameter in <b>String.indexOf()</b> or\n<b>String.lastIndexOf()</b> calls.\nThese String literals may be replaced by equivalent character literals, gaining some performance enhancement.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ArraysAsListWithZeroOrOneArgument",
          "displayName": "Call to 'Arrays.asList()' with too few arguments",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>Arrays.asList()</b> with zero arguments or only one argument. Such calls could be replaced\nwith either a call to <b>Collections.singletonList()</b> or <b>Collections.emptyList()</b> which will save some memory.\n<p>Note: the list returned by <b>Collections.singletonList()</b> is immutable, while the list returned <b>Arrays.asList()</b> allows\ncalling the <b>set()</b> method. This may break the code in rare cases.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "CallToSimpleGetterInClass",
          "displayName": "Call to simple getter from within class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to a simple property getter from within the property's class.\nA simple property getter is defined as one which simply returns the value of a field,\nand does no other calculation. Such simple getter calls may be safely inlined.\nSome coding standards also suggest against the use of simple getters for code clarity\nreasons.\n<!-- tooltip end -->\n<p>\nUse the first option below to only report on getter calls on <b>this</b>, not on objects of the same type passed in as a parameter. Use\nthe second option below to only report when the getter is <b>private</b>.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryTemporaryOnConversionToString",
          "displayName": "Unnecessary temporary object in conversion to String",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary creation of temporary objects when converting\nfrom primitive types to Strings.\n<p>\nFor example:\n<code><pre>\n    new Integer(3).toString()\n</pre></code>\nwill be reported, and can be automatically converted to:\n<code><pre>\n    Integer.toString(3)\n</pre></code>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExplicitArgumentCanBeLambda",
          "displayName": "Explicit argument can be lambda",
          "enabled": false,
          "description": "<html>\n<body>\nReports cases where method call accepts a non-trivial expression, and there's an equivalent method,\nwhich accepts lambda instead. Converting an expression to lambda ensures that expression will not be evaluated\nif it happens to be unused inside the method. E.g. <b>optional.orElse(createDefaultValue())</b> could be converted\nto <b>optional.orElseGet(this::createDefaultValue)</b>.\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryTemporaryOnConversionFromString",
          "displayName": "Unnecessary temporary object in conversion from String",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary creation of temporary objects when converting\nfrom Strings to primitive types.\n<p>\nFor example:\n<code><pre>\n    new Integer(\"3\").intValue()\n</pre></code>\nwill be reported, and can be automatically converted to:\n<code><pre>\n    Integer.valueOf(\"3\")\n</pre></code>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ObjectEqualsCanBeEquality",
          "displayName": "'equals()' call can be replaced with '=='",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>equals()</b> which can be replaced by <b>==</b> or <b>!=</b> expressions without a change in semantics.\nThese calls can be replaced when they are used to compare <b>final</b> classes which don't have their own <b>equals()</b> implementation,\nbut use the default <b>Object.equals()</b>.\nThis may result in better performance.\nThere is a separate inspection for <b>equals()</b> calls on Enums.\n<!-- tooltip end -->\n<p><small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "LengthOneStringsInConcatenation",
          "displayName": "Single character string concatenation",
          "enabled": false,
          "description": "<html>\n<body>\nReports String literals of length one being used in concatenation.\nThese literals may be replaced by equivalent character literals, gaining some performance enhancement.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RandomDoubleForRandomInteger",
          "displayName": "Using 'Random.nextDouble()' to get random integer",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to\n<b>java.util.Random.nextDouble()</b>, which are used to create a positive integer number, by multiplying\nthe call with a factor and casting to an integer. For generating a random positive integer in a range,\n<b>java.util.Random.nextInt(int)</b> is simpler and more efficient.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ObjectInstantiationInEqualsHashCode",
          "displayName": "Object instantiation inside 'equals()' or 'hashCode()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports construction of (temporary) new objects inside an <b>equals()</b>, <b>hashCode()</b>, <b>compareTo</b> or\n<b>Comparator.compare()</b> method.\nBesides constructor invocations, new objects can also be created by autoboxing or iterator creation inside a foreach statement.\nThis can cause performance problems for example when objects are added to a <b>Set</b> or <b>Map</b>,\nwhere these methods will be called often.\nThis inspection will not warn when the objects are created in a <b>throw</b> or <b>assert</b> statement.\n<!-- tooltip end -->\n<p>\n<small>New in 2016.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "KeySetIterationMayUseEntrySet",
          "displayName": "Iteration over 'keySet()' may be optimized",
          "enabled": false,
          "description": "<html>\n<body>\nReports iteration over the <b>keySet()</b> of a <b>java.util.Map</b> instance,\nwhere the iterated keys are used to retrieve the values from the map. Such\niteration may be more efficiently replaced by iteration over the\n<b>entrySet()</b> or <b>values()</b> (if key is not actually used). \nSimilarly <b>keySet().forEach(key -> ...)</b>\ncan be replaced with <b>forEach((key, value) -> ...)</b> if values are retrieved\ninside lambda.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ListRemoveInLoop",
          "displayName": "'List.remove()' called in loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>List.remove(index)</b> called in a loop, which can be replaced with <b>List.subList().clear()</b>. The replacement\nis more efficient for most List implementations, when many elements are deleted.\n<p>\n  The quick-fix adds a range-check automatically to prevent a possible <b>IndexOutOfBoundsException</b> when the minimal value is bigger\n  than the maximal value. It can be removed if such a situation is impossible in your code.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "InstantiatingObjectToGetClassObject",
          "displayName": "Instantiating object to get Class object",
          "enabled": false,
          "description": "<html>\n<body>\nReports any cases where new objects are instantiated for the purpose\nof accessing its class object. It is more performant to access the class object\ndirectly by name.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TrivialStringConcatenation",
          "displayName": "Concatenation with empty string",
          "enabled": false,
          "description": "<html>\n<body>\nReports string concatenations where one of the arguments is the\nempty string. Such a concatenation is unnecessary and inefficient, particularly when used as\nan idiom for formatting non-String objects or primitives into Strings.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceInefficientStreamCount",
          "displayName": "Inefficient Stream API call chains ending with count()",
          "enabled": false,
          "description": "<html>\n<body>\nReports stream API call chains ending with count() operation which\ncould be optimized.\n<p>\n  The following call chains are replaced by this inspection:\n</p>\n<ul>\n  <li><code>Collection.stream().count()</code> &rarr; <code>Collection.size()</code>. In Java 8 Collection.stream().count()\n    actually iterates over collection elements to count them while Collection.size() is much faster for most of collections.</li>\n  <li><code>Stream.flatMap(Collection::stream).count()</code> &rarr; <code>Stream.mapToLong(Collection::size).sum()</code>. Similarly\n    there's no need to iterate all the nested collections. Instead, their sizes could be summed up.</li>\n  <li><code>collection.stream().filter(o -> ...).count() > 0</code> &rarr; <code>collection.stream().anyMatch(o -> ...)</code></li>\n  <li><code>collection.stream().filter(o -> ...).count() == 0</code> &rarr; <code>collection.stream().noneMatch(o -> ...)</code></li>\n</ul>\n<small>New in 2016.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantStringFormatCall",
          "displayName": "Redundant call to 'String.format()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>String.format()</b> or <b>PrintStream.printf()</b> where only a format string is\nprovided, but no arguments. Such a call is unnecessary and can be replaced with just\nthe string or a call to <b>PrintStream.print()</b> respectively.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ManualArrayCopy",
          "displayName": "Manual array copy",
          "enabled": false,
          "description": "<html>\n<body>\nReports the manual copying of array contents which may be replaced by\ncalls to <b>System.arraycopy()</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodMayBeStatic",
          "displayName": "Method may be 'static'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any methods which may safely be made <b>static</b>.\nA method may be <b>static</b> if it is not <b>synchronized</b>, it does not reference any of its class' non static methods\nand non static fields and is not overridden in a sub class.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to inspect only <b>private</b>\nor <b>final</b> methods, which increases the\nperformance of this inspection.\n<p>\nUse the second checkbox to ignore empty methods.\n<p>\nUse the third checkbox to ignore default methods in interface when using Java 8 or higher\n<p>\nUse the fourth checkbox to let the quick fix replace instance qualifiers with class references\nin calls to methods which are made <b>static</b>.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassInitializerMayBeStatic",
          "displayName": "Class initializer may be 'static'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any class initializers which may safely be made <b>static</b>.\nA class initializer may be static if it does not reference any of its class' non static methods\nand non static fields.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ManualArrayToCollectionCopy",
          "displayName": "Manual array to collection copy",
          "enabled": false,
          "description": "<html>\n<body>Reports the copying of array contents to a collection where each element\nis added individually using a for loop. Such constructs may be replaced by a call to\n<b>Collection.addAll(Arrays.asList())</b> or <b>Collections.addAll()</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CollectionAddAllCanBeReplacedWithConstructor",
          "displayName": "Redundant 'Collection.addAll()' call",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Collection.addAll()</b> and <b>Map.putAll()</b> calls after instantiation of a collection using a constructor call without arguments.\nSuch constructs can be replaced with a single call to a parametrized constructor which simplifies code. Also for some collections the replacement\nmight be more performant.\nFor example:\n<pre><code>\n  Set&lt;String&gt; set = new HashSet&lt;&gt;();\n  set.addAll(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));\n</code></pre>\ncan be replaced with:\n<pre><code>\n  Set&lt;String&gt; set = new HashSet&lt;&gt;(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));\n</code></pre>\nStandard JDK collection classes are supported by default. Additionally you may specify other classes in the settings.\n</body>\n</html>"
        },
        {
          "shortName": "SetReplaceableByEnumSet",
          "displayName": "Set replaceable with EnumSet",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instantiations of <b>java.util.Set</b> objects\nwhose content types are enumerated classes. Such <b>java.util.Set</b> objects\ncan be replaced by <b>java.util.EnumSet</b> objects.\n<b>java.util.EnumSet</b> implementations can be much more efficient\nthat those of other sets, as the underlying data structure is a simple bitmap.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationInLoops",
          "displayName": "String concatenation in loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports String concatenation in loops. As every String concatenation copies the whole String, usually it is preferable to replace\nit with explicit calls to <b>StringBuilder.append()</b> or <b>StringBuffer.append()</b>.\n<!-- tooltip end -->\n<p>\n  Sometimes quick-fix actions are available which allow you to convert <code>String</code> variable to <code>StringBuilder</code> or\n  introduce a new <code>StringBuilder</code>. Be careful if the original code handles <code>null</code> value specially: the replacement\n  might not be semantically correct after that. If <code>null</code> value is possible, null-safe fixes are suggested which generate\n  necessary null-checks. Also it's not guaranteed that the automatic replacement will always be more performant.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "TailRecursion",
          "displayName": "Tail recursion",
          "enabled": false,
          "description": "<html>\n<body>\nReports tail recursion, that is when a method calls itself\nas its last action before returning. Tail recursion can always be replaced by looping, which will be considerably faster.\nSome JVMs perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different\nperformance characteristics on different virtual machines.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DynamicRegexReplaceableByCompiledPattern",
          "displayName": "Dynamic regular expression could be replaced by compiled Pattern",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to the regular expression methods of\n<b>java.lang.String</b> using constants arguments.\nSuch calls may be profitably replaced with a\n<b>private static final Pattern</b> field so\nthat the regular expression does not have to be compiled each time it is used.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringEqualsEmptyString",
          "displayName": "'String.equals(\"\")'",
          "enabled": false,
          "description": "<html>\n<body>\nReports cases when <b>.equals()</b> is called to compare a String with an empty string. In this case, using <b>.isEmpty()</b> is better as\nit shows you exactly what you're checking.\n<!-- tooltip end -->\n<p>\n  <b>\"\".equals(str)</b> returns false when <b>str</b> is null. For safety, this inspection's quick fix inserts an explicit null-check when \n  the <b>equals()</b> argument is nullable. Use the checkbox below to suppress the warning in this case.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "CollectionsMustHaveInitialCapacity",
          "displayName": "Collection without initial capacity",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempt to instantiate a new <b>Collection</b> object without specifying\nan initial capacity. If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing\nto specify initial capacities for collections may result in performance issues, if space needs to be reallocated and\nmemory copied when capacity is exceeded. This inspection checks allocations of the classes which are listed in inspection settings.\n</body>\n</html>"
        },
        {
          "shortName": "CallToSimpleSetterInClass",
          "displayName": "Call to simple setter from within class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to a simple property setter from within the property's class.\nA simple property setter is defined as one which simply assigns the value of its parameter to a field,\nand does no other calculation. Such simple setter calls may be safely inlined.\nSome coding standards also suggest against the use of simple setters for code clarity\nreasons.\n<!-- tooltip end -->\n<p>\nUse the first option below to only report on setter calls on <b>this</b>, not on objects of the same type passed in as a parameter. Use\nthe second option below to only report when the setter is <b>private</b>.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BooleanConstructor",
          "displayName": "Boolean constructor call",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempt to instantiate a new <b>Boolean</b>\nobject. Constructing new <b>Boolean</b> objects is rarely necessary,\nand may cause performance problems if done often enough.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ObjectAllocationInLoop",
          "displayName": "Object allocation in loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports object or array allocation inside loops. While not\nnecessarily a problem, object allocation inside loop is a great place to look for memory leaks\nand performance issues.\n<p>\n  The inspection reports the following constructs:\n</p>\n<ul>\n  <li>Explicit allocations via <b>new</b> operator</li>\n  <li>Methods known to return new object</li>\n  <li>Instance-bound method references</li>\n  <li>Lambdas that capture variables or <b>this</b> reference</li>\n</ul>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationInsideStringBufferAppend",
          "displayName": "String concatenation as argument to 'StringBuilder.append()' call",
          "enabled": false,
          "description": "<html>\n<body>\nReports String concatenation used as\nthe argument to <b>StringBuffer.append()</b>,\n<b>StringBuilder.append()</b> or\n<b>Appendable.append()</b>. Such calls\nmay profitably be turned into chained append calls on the existing\n<b>StringBuffer/Builder/Appendable</b>, saving the\ncost of an extra <b>StringBuffer/Builder</b>\nallocation.\n<p>\nThis inspection ignores compile time evaluated String\nconcatenations, which when converted to chained append calls would only\nworsen performance.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferMustHaveInitialCapacity",
          "displayName": "StringBuilder without initial capacity",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempt to instantiate a new <b>StringBuffer</b> or\n<b>StringBuilder</b> object without specifying its initial capacity.\nIf no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing\nto specify initial capacities for <b>StringBuffer</b>s may result in performance issues, if space needs to be reallocated and\nmemory copied when capacity is exceeded\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ToArrayCallWithZeroLengthArrayArgument",
          "displayName": "'Collection.toArray()' call style",
          "enabled": false,
          "description": "<html>\n<body>\nThere are two styles to convert a collection to an array: either using a pre-sized array\n(like <b>c.toArray(new String[c.size()])</b>) or using an empty array (like\n<b>c.toArray(new String[0])</b>.\n<p>\n  In older Java versions using pre-sized array was recommended, as the reflection\n  call which is necessary to create an array of proper size was quite slow.\n  However since late updates of OpenJDK 6 this call was intrinsified, making\n  the performance of the empty array version the same and sometimes even better, compared\n  to the pre-sized version. Also passing pre-sized array is dangerous for a concurrent or\n  synchronized collection as a data race is possible between the <b>size</b> and <b>toArray</b>\n  call which may result in extra nulls at the end of the array, if the collection was concurrently\n  shrunk during the operation.\n</p>\n<p>\n  This inspection allows to follow the uniform style: either using an empty array\n  (which is recommended in modern Java)\n  or using a pre-sized array (which might be faster in older Java versions or non-HotSpot based JVMs).\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UseBulkOperation",
          "displayName": "Bulk operation can be used instead of iteration",
          "enabled": false,
          "description": "<html>\n<body>\nWarns when calling some method in a loop (e.g. <code>collection.add(x)</code>) could be replaced when calling a bulk method\n(e.g. <code>collection.addAll(listOfX)</code>.\n<p>\n  If checkbox \"Use Arrays.asList() to wrap arrays\" is checked, the inspection will warn even if the original code iterates over\n  an array while bulk method requires a <code>Collection</code>. In this case the quick-fix action will automatically\n  wrap an array with <code>Arrays.asList()</code> call.\n</p>\n<!-- tooltip end -->\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "IfStatementMissingBreakInLoop",
          "displayName": "Loop can be terminated after condition is met",
          "enabled": false,
          "description": "<html>\n<body>\nReports cases in which a loop contains the <b>if</b> statement that can end with <b>break</b>.\n<p>\n  For instance, consider the following code:\n<pre><code>\n  <b>boolean</b> found = <b>false</b>;\n  <b>for</b> (<b>int</b> i = 0; i &lt; arr.length; i++) {\n    <b>if</b> (Objects.equals(value, arr[i])) {\n      found = <b>true</b>;\n    }\n  }\n</code></pre>\nIn this case, iterations have no effect after the condition is met, and you can skip them by adding a <b>break</b>.\n<pre><code>\n  <b>boolean</b> found = <b>false</b>;\n  <b>for</b> (<b>int</b> i = 0; i &lt; arr.length; i++) {\n    <b>if</b> (Objects.equals(value, arr[i])) {\n      found = <b>true</b>;\n      <b>break</b>;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  <small>New in 2019.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "FieldMayBeStatic",
          "displayName": "Field may be 'static'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instance variables which may safely be made <b>static</b>. A field\nmay be static if it is declared <b>final</b>, and is initialized with a constant.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringReplaceableByStringBuffer",
          "displayName": "Non-constant String should be StringBuilder",
          "enabled": false,
          "description": "<html>\n<body>\nReports any variables declared as <b>java.lang.String</b> which are\nrepeatedly appended to. Such variables may be more efficiently declared as <b>java.lang.StringBuffer</b>\nor <b>java.lang.StringBuilder</b>.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to specify that this inspection should only warn when the variable is appended\nto in a loop.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Cucumber",
      "inspections": [
        {
          "shortName": "CucumberUndefinedStep",
          "displayName": "Undefined step",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights steps in Cucumber (or some other Gherkin) .feature files which do not have a matching step definitions. <br/>\nUse a quick-fix to automatically create a new step definition.\n</body>\n</html>"
        },
        {
          "shortName": "GherkinBrokenTableInspection",
          "displayName": "Gherkin table is broken",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights tables if it contains at least one row with amount of cell different from amount of cell of table's header.\n</body>\n</html>"
        },
        {
          "shortName": "GherkinMisplacedBackground",
          "displayName": "Misplaced background section",
          "enabled": false,
          "description": "<html>\n<body>\nBackground section must be before any Scenario\n</body>\n</html>"
        },
        {
          "shortName": "CucumberExamplesColon",
          "displayName": "Missing ':' after examples keyword",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights examples sections in Cucumber .feature files which do not have ':' after the <strong>Examples</strong> keyword.\n</body>\n</html>\n"
        },
        {
          "shortName": "CucumberJavaStepDefClassInDefaultPackage",
          "displayName": "Step definition class is in default package",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights step definition classes in default package. Cucumber-JVM uses step definition classes only in named package.\n</body>\n</html>\n"
        },
        {
          "shortName": "CucumberMissedExamples",
          "displayName": "Missing examples section",
          "enabled": false,
          "description": "<html>\n<body>\n    Highlights scenario outlines in Cucumber .feature files which do not have 'Examples' section. <br/>\n    Use a quick-fix to automatically create the Examples section with a pre-filled table header.\n</body>\n</html>"
        },
        {
          "shortName": "CucumberJavaStepDefClassIsPublic",
          "displayName": "Step definition class is not public",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights non-public step definition classes. Cucumber-JVM uses step definition only from public classes.\n</body>\n</html>\n"
        },
        {
          "shortName": "GherkinScenarioToScenarioOutline",
          "displayName": "Scenario with Examples section",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights Gherkin Scenarios having Examples section<br/>\nUse a quick-fix to automatically convert Scenario to Scenario Outline.\n</body>\n</html>"
        },
        {
          "shortName": "CucumberTableInspection",
          "displayName": "Unused or missing columns in Cucumber tables",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights tables in Examples sections of Cucumber .feature files with unused or missing columns.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Web Services",
      "inspections": [
        {
          "shortName": "SpringWebServiceAnnotationsInconsistencyInspection",
          "displayName": "Spring Web Service Annotations",
          "enabled": false,
          "description": "Incorrect use of Spring Web Service Annotations\n"
        },
        {
          "shortName": "SpringMessageDispatcherWebXmlInspection",
          "displayName": "Spring WS web.xml configuration",
          "enabled": false,
          "description": "Spring Web Service MessageDispatcherServlet errors"
        },
        {
          "shortName": "SpringWebServicesConfigurationsInspection",
          "displayName": "Spring Web Service Configuration",
          "enabled": false,
          "description": "Spring Web Services configuration problems"
        }
      ]
    },
    {
      "name": "JavaFX",
      "inspections": [
        {
          "shortName": "JavaFxUnusedImports",
          "displayName": "JavaFX unused imports",
          "enabled": false,
          "description": "<html>\n<body>\nReports unused imports in .fxml files.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "JavaFxDefaultTag",
          "displayName": "Unnecessary default tag",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of tags in .fxml which could be ommitted as these tags correspond to a class property which is declared in @DefaultProperty class annotation.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JavaFxUnresolvedStyleClassReference",
          "displayName": "Unresolved style class reference",
          "enabled": false,
          "description": "<html>\n<body>\nReports unresolved css style classes.\n</body>\n</html>"
        },
        {
          "shortName": "JavaFxEventHandler",
          "displayName": "Event handler method signature problems",
          "enabled": false,
          "description": "<html>\n<body>\nReports event handler issues, including incompatible argument type, ambiguous event handler method, and incorrect return type.\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaFxResourcePropertyValue",
          "displayName": "The value from properties file is incompatible with the attribute type",
          "enabled": false,
          "description": "<html>\n<body>\nReports attribute values defined in properties file that don't match the type of the attribute.\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaFxRedundantPropertyValue",
          "displayName": "JavaFX redundant property values",
          "enabled": false,
          "description": "<html>\n<body>\nReports properties in .fxml files (both attributes and tags) having default values and therefore redundant.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "JavaFxColorRgb",
          "displayName": "Color component is out of range",
          "enabled": false,
          "description": "<html>\n<body>\nReports RGB color components which are out of valid range.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JavaFxUnresolvedFxIdReference",
          "displayName": "Unresolved fx:id attribute reference",
          "enabled": false,
          "description": "<html>\n<body>\nReports unresolved fx:id references. Quickfix to create corresponding field is provided.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Encapsulation",
      "inspections": [
        {
          "shortName": "PublicInnerClass",
          "displayName": "'public' nested class",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>public</b> nested classes.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore <b>public</b> inner enums.\n<p>\nUse the seconds checkbox below to ignore <b>public</b> inner interface.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentOrReturnOfFieldWithMutableType",
          "displayName": "Assignment or return of field with mutable type",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempt to return or assign an array, <b>Collection</b>, <b>java.lang.Date</b> or\n<b>java.lang.Calendar</b> field from a method parameter.\nSince arrays, <b>Collection</b>, <b>Date</b> and <b>Calendar</b> are mutable, this construct may\nresult in an object having its state modified unexpectedly from outside the owning class.\nWhile occasionally useful for performance reasons, this construct is inherently bug prone.\n\n<!-- tooltip end -->\n<p>Use the checkbox below to ignore assignments and returns in <b>private</b> methods.\n\n<p><small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "ProtectedField",
          "displayName": "Protected field",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>protected</b> instance variables.\nConstants (i.e. variables marked <b>static</b> and <b>final</b>) are not reported.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ProtectedInnerClass",
          "displayName": "Protected nested class",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>protected</b> nested classes.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore <b>protected</b> inner enums.\n<p>\nUse the seconds checkbox below to ignore <b>protected</b> inner interface.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfAnotherObjectsPrivateField",
          "displayName": "Accessing a non-public field of another object",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of another object's private or protected fields. Java\nallows the use of such fields for objects of the same class as the current objects, but\nsome coding styles discourage this use. Additionally, such direct access to private fields\nmay fail in component-oriented architectures such (e.g. Spring, Hibernate) which expect all access\nto other objects to be through method calls so as to allow the framework to mediate all access\nusing proxies.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore accesses from the same class and only report accesses\nfrom inner or outer classes.\n  To ignore accesses from inner classes also, use the nested checkbox.\n<p>\nUse the second checkbox below to ignore accesses from an <b>equals()</b> method.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicField",
          "displayName": "'public' field",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>public</b> fields.\nConstants (i.e. variables marked <b>static</b> and <b>final</b>) are not reported.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Fields annotated with one of these annotations will be ignored by this inspection.\n<p>\nUse the checkbox below to ignore <b>public</b> <b>final</b> fields of an <b>enum</b> type.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageVisibleField",
          "displayName": "Package-visible field",
          "enabled": false,
          "description": "<html>\n<body>\nReports package-visible instance variables.\nConstants (i.e. variables marked <b>static</b> and <b>final</b>) are not reported.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageVisibleInnerClass",
          "displayName": "Package-visible nested class",
          "enabled": false,
          "description": "<html>\n<body>\nReports package-private nested classes.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore package-private inner enums.\n<p>\nUse the seconds checkbox below to ignore package-private inner interface.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Android Lint: Accessibility",
      "inspections": [
        {
          "shortName": "AndroidLintContentDescription",
          "displayName": "Image without contentDescription",
          "enabled": false,
          "description": "<html><body>Image without <code>contentDescription</code><br><br>Non-textual widgets like ImageViews and ImageButtons should use the <code>contentDescription</code> attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.<br/>\n<br/>\nNote that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=\"ContentDescription\" attribute.<br/>\n<br/>\nNote that for text fields, you should not set both the <code>hint</code> and the <code>contentDescription</code> attributes since the hint will never be shown. Just set the <code>hint</code>. See <a href=\"http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases\">http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases</a>.<br><br>Issue id: ContentDescription</body></html>"
        },
        {
          "shortName": "AndroidLintLabelFor",
          "displayName": "Missing labelFor attribute",
          "enabled": false,
          "description": "<html><body>Missing accessibility label<br><br>Editable text fields should provide an <code>android:hint</code> or, provided your <code>minSdkVersion</code> is at least 17, they may be referenced by a view with a <code>android:labelFor</code> attribute.<br/>\n<br/>\nWhen using <code>android:labelFor</code>, be sure to provide an <code>android:text</code> or an <code>android:contentDescription</code>.<br/>\n<br/>\nIf your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint.<br><br>Issue id: LabelFor</body></html>"
        },
        {
          "shortName": "AndroidLintKeyboardInaccessibleWidget",
          "displayName": "Keyboard inaccessible widget",
          "enabled": false,
          "description": "<html><body>Keyboard inaccessible widget<br><br>A widget that is declared to be clickable but not declared to be focusable is not accessible via the keyboard. Please add the <code>focusable</code> attribute as well.<br><br>Issue id: KeyboardInaccessibleWidget</body></html>"
        },
        {
          "shortName": "AndroidLintGetContentDescriptionOverride",
          "displayName": "Overriding getContentDescription() on a View",
          "enabled": false,
          "description": "<html><body>Overriding <code>getContentDescription()</code> on a View<br><br>Overriding <code>getContentDescription()</code> may prevent some accessibility services from properly navigating content exposed by your view. Instead, call <code>setContentDescription()</code> when the content description needs to be changed.<br><br>Issue id: GetContentDescriptionOverride</body></html>"
        },
        {
          "shortName": "AndroidLintClickableViewAccessibility",
          "displayName": "Accessibility in Custom Views",
          "enabled": false,
          "description": "<html><body>Accessibility in Custom Views<br><br>If a <code>View</code> that overrides <code>onTouchEvent</code> or uses an <code>OnTouchListener</code> does not also implement <code>performClick</code> and call it when clicks are detected, the <code>View</code> may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in <code>View#performClick</code> as some accessibility services invoke <code>performClick</code> when a click action should occur.<br><br>Issue id: ClickableViewAccessibility</body></html>"
        }
      ]
    },
    {
      "name": "Class metrics",
      "inspections": [
        {
          "shortName": "ClassCoupling",
          "displayName": "Overly coupled class",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which are highly coupled, i.e. that reference too many other classes.\nClasses with too high a coupling can be very fragile, and should probably be broken up. References to system classes\n(those in the <b>java.</b>or <b>javax.</b> packages), are not counted.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum coupling a class is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstructorCount",
          "displayName": "Class with too many constructors",
          "enabled": false,
          "description": "<html>\n<body>\nReports class with too many constructors. Classes with\ntoo many constructors are prone to initialization errors, and may often be better modeled as\nmultiple subclasses.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of constructors a class is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousClassComplexity",
          "displayName": "Overly complex anonymous class",
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous inner classes with too high of a total complexity. The\ntotal complexity of a class is the sum of the cyclomatic complexities of all the methods\nand initializers the class declares. Inherited methods and initializers are not counted\ntoward the total complexity. Anonymous classes with more than very low complexities may be\ndifficult to understand, and should probably be promoted to become named inner classes.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum complexity a class is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassNestingDepth",
          "displayName": "Inner class too deeply nested",
          "enabled": false,
          "description": "<html>\n<body>\nReports inner classes too deeply nested. Nesting inner classes inside\ninner classes is almost certain to be confusing, and is a good sign that refactoring may be necessary.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum nesting depth a class is allowed have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodCount",
          "displayName": "Class with too many methods",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes with too many methods. Classes with\na large number of methods are often trying to 'do too much', and may need to be\nrefactored into multiple smaller classes.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of methods a class is allowed to have.\n<p>\nUse the first checkbox below to ignore simple getters and setters in the method count.\n<p>\nUse the second checkbox below to ignore methods overriding or implementing a method from a superclass\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousClassMethodCount",
          "displayName": "Anonymous inner class with too many methods",
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous inner <b>class</b> with too many methods.\nAnonymous classes with more than a very low number of methods may be\ndifficult to understand, and should probably be promoted to become named inner classes.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of methods an anonymous inner <b>class</b> is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassComplexity",
          "displayName": "Overly complex class",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes with too high of a total complexity. The\ntotal complexity of a <b>class</b> is the sum of the cyclomatic complexities of all the methods\nand initializers the <b>class</b> declares. Inherited methods and initializers are not counted\ntoward the total complexity.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum complexity a class is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FieldCount",
          "displayName": "Class with too many fields",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes with too many fields. Classes with\na large number of fields are often trying to 'do too much', and may need to be\nrefactored into multiple smaller classes.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of fields a class is allowed to have.\n<p>\nUse the first checkbox below to indicate whether constant fields count toward this number.\n<p>Per default this inspection only counts immutable <b>static final</b> objects as constant. Use the second checkbox below to\ncount any <b>static final</b> field as constant.\n<p>\nUse the third checkbox below to indicate if enum constants in an enum class should count.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassInheritanceDepth",
          "displayName": "Class too deep in inheritance tree",
          "enabled": false,
          "description": "<html>\n<body>\nReports class too deep in the inheritance hierarchy. Classes too deeply inherited\nmay be confusing, and are a good sign that refactoring may be necessary. This inspection counts all superclasses\nfrom a library as a single superclass (libraries are considered unmodifiable).\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum inheritance depth a class is allowed to have.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code quality tools",
      "inspections": [
        {
          "shortName": "TsLint",
          "displayName": "TSLint",
          "enabled": false,
          "description": "<html>\n<body>\nRuns <b><a href=\"https://github.com/palantir/tslint\">TSLint</a></b> - a linter for TypeScript.\n<!-- tooltip end -->\n<br/><br/>\nThe highlighting is based on the rule severity specified in the <a href=\"https://palantir.github.io/tslint/usage/configuration/\">TSLint configuration file</a>.\nUncheck \"Use rule severity from the configuration file\" to use the same severity configured in this inspection for all TSLint rules.\n</body>\n</html>"
        },
        {
          "shortName": "GjsLint",
          "displayName": "Closure Linter",
          "enabled": false,
          "description": "<html>\n<body>\nRuns <b><a href=\"http://code.google.com/p/closure-linter\">Closure Linter</a></b> that enforces the guidelines set by the <a\n    href=\"https://google.github.io/styleguide/jsguide\">Google JavaScript Style Guide</a> . The linter handles\nstyle issues so that you can focus on the code.\n</body>\n</html>"
        },
        {
          "shortName": "Jscs",
          "displayName": "JSCS",
          "enabled": false,
          "description": "<html>\n<body>\n\nRuns <b><a href=\"https://github.com/jscs-dev/node-jscs\">JSCS</a></b> - JavaScript Code Style checker for specified JavaScript file.\n</body>\n</html>"
        },
        {
          "shortName": "JSHint",
          "displayName": "JSHint",
          "enabled": false,
          "description": "<html>\n<body>\nRuns <b><a href=\"http://jshint.com\">JSHint</a></b> validator for specified JavaScript file.\n</body>\n</html>"
        },
        {
          "shortName": "Eslint",
          "displayName": "ESLint",
          "enabled": false,
          "description": "<html>\n<body>\nRuns the <b><a href=\"https://eslint.org\">ESLint</a></b> linter.\n<!-- tooltip end -->\n<br/><br/>\nThe highlighting is based on the rule severity specified in the <a href=\"http://eslint.org/docs/user-guide/configuring\">ESLint configuration file</a>.\nUncheck \"Use rule severity from the configuration file\" to use the same severity configured in this inspection for all ESLint rules.\n</body>\n</html>"
        },
        {
          "shortName": "W3CssValidation",
          "displayName": "W3C CSS validator",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection validates the CSS with W3C CSS validator library. <br>\n</body>\n</html>"
        },
        {
          "shortName": "Stylelint",
          "displayName": "Stylelint",
          "enabled": false,
          "description": "<html>\n<body>\nRuns <b><a href=\"http://stylelint.io\">Stylelint</a></b> validator for specified stylesheet file.\n<br/><br/>\nThe severity level of the inspection is applied only for the 'Inspect code...' action.\nSeverity levels used in the editor can be configured in the <a href=\"https://stylelint.io/user-guide/configuration/\">Stylelint configuration file</a> for each individual rule.\n</body>\n</html>"
        },
        {
          "shortName": "JSLint",
          "displayName": "JSLint",
          "enabled": false,
          "description": "<html>\n<body>\nRuns <b><a href=\"http://jslint.com\">JSLint</a></b> validator for specified JavaScript file.\n</body>\n</html>"
        },
        {
          "shortName": "StandardJS",
          "displayName": "Standard code style",
          "enabled": false,
          "description": "<html>\n<body>\nReports errors according to <a href=\"http://standardjs.com\"> JavaScript Standard Style</a>.\n<br/><br/>\nThe severity level of the inspection is applied only for the 'Inspect code...' action.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Finalization",
      "inspections": [
        {
          "shortName": "Finalize",
          "displayName": "'finalize()' declaration",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of\na <b>finalize()</b> method. For performance reasons or due to inability\nto guarantee that <b>finalize()</b> will ever be called,\nsome coding standards prohibit its use.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore <b>finalize()</b> implementations with an empty\nmethod body or a body containing only if statements which have a condition which\nevaluates to false at compile time. For performance reasons it can be beneficial to\noverride a non-trivial <b>finalize()</b> with an empty\nimplementation in a subclass. An empty final <b>finalize()</b>\nimplementation can also be used to prevent subclasses from overriding.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NoExplicitFinalizeCalls",
          "displayName": "'finalize()' called explicitly",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>Object.finalize()</b>. Calling\n<b>Object.finalize()</b> explicitly is a very bad idea, as it can result in objects being placed in an\ninconsistent state. Calls to <b>super.finalize()</b> from within implementations of <b>finalize()</b>\nare benign, and are not reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinalizeNotProtected",
          "displayName": "'finalize()' not declared 'protected'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of the <b>Object.finalize()</b> method\nwhich are not declared <b>protected</b>. <b>finalize()</b> should be declare <b>protected</b>,\nto prevent it from being explicitly invoked by other classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Imports",
      "inspections": [
        {
          "shortName": "SingleClassImport",
          "displayName": "Single class import",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>import</b> statements which cover single classes (as opposed to entire packages).\nSome coding standards prohibit such <b>import</b> statements. Since IDEA can automatically\ndetect and fix such statements with its \"Optimize Imports\" command, this inspection is mostly useful\nfor off-line reporting on code bases that you don't intend to change.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SamePackageImport",
          "displayName": "Import from same package",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>import</b> statements which refer to the same package as the\ncontaining file. Such imports are unnecessary, and probably the result of incomplete\nrefactorings. Since IDEA can automatically detect and fix such statements with its\n\"Optimize Imports\" command, this inspection is mostly useful for off-line reporting on\ncode bases that you don't intend to change.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UNUSED_IMPORT",
          "displayName": "Unused import",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports redundant import statements.\n</body>\n</html>"
        },
        {
          "shortName": "JavaLangImport",
          "displayName": "'java.lang' import",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>import</b> statements which refer to the <b>java.lang</b> package.\nSuch import statements are unnecessary. Since IDEA can automatically\ndetect and fix such statements with its \"Optimize Imports\" command, this inspection is mostly useful\nfor off-line reporting on code bases that you don't intend to change.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OnDemandImport",
          "displayName": "'*' import",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>import</b> statements which cover entire packages ('* imports').\nSome coding standards prohibit such import statements. Since IDEA can automatically\ndetect and fix such statements with its \"Optimize Imports\" command, this inspection is mostly useful\nfor off-line reporting on code bases that you don't intend to change.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticImport",
          "displayName": "Static import",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>import static</b> statements.\nSuch <b>import</b> statements are not supported under Java 1.4 or earlier JVMs.\n<!-- tooltip end -->\n<p>\nUse the table below to specify classes which when used in a <b>import static</b> statement, the statement will not be reported.\n<p>\nUse the first checkbox below to ignore single field <b>import static</b> statements.\n<p>\nUse the second checkbox below to ignore single method <b>import static</b> statements.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "WSDL",
      "inspections": [
        {
          "shortName": "WsdlHighlightingInspection",
          "displayName": "WSDL",
          "enabled": false,
          "description": "<html>\n<body>\nCommon WSDL checks.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Spring OSGi",
      "inspections": [
        {
          "shortName": "SpringOsgiListenerInspection",
          "displayName": "OSGi Service Lifecycle Listener",
          "enabled": false,
          "description": "Spring OSGi Listener inconsistencies"
        },
        {
          "shortName": "SpringOsgiElementsInconsistencyInspection",
          "displayName": "OSGi Model",
          "enabled": false,
          "description": "Spring OSGi Model"
        },
        {
          "shortName": "SpringOsgiServiceCommonInspection",
          "displayName": "OSGi Service",
          "enabled": false,
          "description": "Spring OSGi Service Common Errors"
        }
      ]
    },
    {
      "name": "Declaration redundancy",
      "inspections": [
        {
          "shortName": "GoRedundantBlankArgInRange",
          "displayName": "Redundant blank argument in range",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports expressions of range clause which are redundant and can be deleted.\n<p>For example following for statements can be simplified:</p>\n<pre>\n    for _ = range v\n    for _, _ = range v\n    for a, _ = range v\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "Java9RedundantRequiresStatement",
          "displayName": "Redundant 'requires' statement in module-info",
          "enabled": false,
          "description": "<html>\n<body>\nThe inspection detects a situation where Java 9 module A requires Java 9 module B, but A doesn't use any package from B.\nAlso, requiring the module 'java.base' is redundant.\n<p>\n  The fix deletes the 'requires' directive for such redundant dependencies.\n  If the deleted dependency re-exported modules that are actually used, the fix adds 'requires' directive for these modules.\n<p>\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "FunctionalExpressionCanBeFolded",
          "displayName": "Functional expression can be folded",
          "enabled": false,
          "description": "<html>\n<body>\nReports method references or lambda expressions which point to a method of their own functional interface type and hence can be replaced with their qualifiers, like\n<br/>\n<ul>\n  <li><code>SwingUtilities.invokeLater(r::run);</code></li>\n  <li><code>SwingUtilities.invokeAndWait(() -> r.run());</code>  </li>\n</ul>\ncan be replaced with\n<ul>\n  <li><code>SwingUtilities.invokeLater(r);</code></li>\n  <li><code>SwingUtilities.invokeAndWait(r);</code></li>\n</ul>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n</body>\n</html>"
        },
        {
          "shortName": "GoUnusedImport",
          "displayName": "Unused import",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports unused import statements.\n</body>\n</html>"
        },
        {
          "shortName": "WrapperTypeMayBePrimitive",
          "displayName": "Wrapper type may be primitive",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variable of wrapper type though all usages allowed to be primitive and count of unnecessary boxing/unboxing\n  operations reduces\n<!-- tooltip end -->\n<p>In some cases boxing can be source of significant performance penalty, especially in loops.</p>\n<p>\n  <small>New in 2018.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "GoUnusedFunction",
          "displayName": "Unused function",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports unused unexported functions.\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyStreamApiCallChains",
          "displayName": "Stream API call chain can be simplified",
          "enabled": false,
          "description": "<html>\n<body>\nReports stream API call chains which can be simplified.\nIt allows to avoid creating redundant temporary objects when traversing a collection.\n<p>\n  The following call chains are replaced by this inspection:\n</p>\n<ul>\n  <li><code>collection.stream().forEach()</code> &rarr; <code>collection.forEach()</code></li>\n  <li><code>collection.stream().collect(toList/toSet/toCollection())</code> &rarr; <code>new CollectionType&lt;&gt;(collection)</code></li>\n  <li><code>collection.stream().toArray()</code> &rarr; <code>collection.toArray()</code></li>\n  <li><code>Arrays.asList().stream()</code> &rarr; <code>Arrays.stream()</code> or <code>Stream.of()</code></li>\n  <li><code>IntStream.range(0, array.length).mapToObj(idx -> array[idx])</code> &rarr; <code>Arrays.stream(array)</code></li>\n  <li><code>IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))</code> &rarr; <code>list.stream()</code></li>\n  <li><code>Collections.singleton().stream()</code> &rarr; <code>Stream.of()</code></li>\n  <li><code>Collections.emptyList().stream()</code> &rarr; <code>Stream.empty()</code></li>\n  <li><code>stream.filter().findFirst().isPresent()</code> &rarr; <code>stream.anyMatch()</code></li>\n  <li><code>stream.collect(counting())</code> &rarr; <code>stream.count()</code></li>\n  <li><code>stream.collect(maxBy())</code> &rarr; <code>stream.max()</code></li>\n  <li><code>stream.collect(mapping())</code> &rarr; <code>stream.map().collect()</code></li>\n  <li><code>stream.collect(reducing())</code> &rarr; <code>stream.reduce()</code></li>\n  <li><code>stream.collect(summingInt())</code> &rarr; <code>stream.mapToInt().sum()</code></li>\n  <li><code>stream.mapToObj(x -> x)</code> &rarr; <code>stream.boxed()</code></li>\n  <li><code>stream.map(x -> {...; return x;})</code> &rarr; <code>stream.peek(x -> ...)</code></li>\n  <li><code>!stream.anyMatch()</code> &rarr; <code>stream.noneMatch()</code></li>\n  <li><code>!stream.anyMatch(x -> !(...))</code> &rarr; <code>stream.allMatch()</code></li>\n  <li><code>stream.map().anyMatch(Boolean::booleanValue)</code> -> <code>stream.anyMatch()</code></li>\n  <li><code>IntStream.range(expr1, expr2).mapToObj(x -> array[x])</code> -> <code>Arrays.stream(array, expr1, expr2)</code></li>\n  <li><code>Collection.nCopies(count, ...)</code> -> <code>Stream.generate().limit(count)</code></li>\n  <li><code>stream.sorted(comparator).findFirst()</code> -> <code>Stream.min(comparator)</code></li>\n</ul>\n<p>\n  Note that the replacements semantic may have minor difference in some cases.\n  For example, <code>Collections.synchronizedList(...).stream().forEach()</code> is not\n  synchronized while <code>Collections.synchronizedList(...).forEach()</code> is synchronized.\n  Or <code>collect(Collectors.maxBy())</code> would return an empty <code>Optional</code> if the resulting\n  element is <code>null</code> while <code>Stream.max()</code> will throw <code>NullPointerException</code>\n  in this case.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "CanBeFinal",
          "displayName": "Declaration can have final modifier",
          "enabled": false,
          "description": "<html>\n<body>\nReports all fields, methods or classes, found in the specified inspection\nscope, that may have a <b><font color=\"#000080\">final</font></b> modifier added to their declarations. <br> <br>\n<!-- tooltip end -->\nUse check boxes in the inspection options below, to define which declarations are to be reported.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantExplicitClose",
          "displayName": "Redundant 'close()'",
          "enabled": false,
          "description": "<html>\n<body>\nInspection reports unnecessary close of resource in the end of try-with-resources block\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "GoUnusedVariable",
          "displayName": "Unused variable",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports unused variables.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantRecordConstructor",
          "displayName": "Redundant record constructor",
          "enabled": false,
          "description": "<html>\n<body>\nReports redundant constructors declared inside Java records. Examples:\n<pre><code>\n  record Point(int x, int y) {\n    public Point {} // could be removed\n  }\n  \n  record Point(int x, int y) {\n    public Point(int x, int y) { // could be removed\n      this.x = x;\n      this.y = y;\n    }\n  }\n  \n  // could be converted to compact constructor\n  record Range(int from, int to) {\n    public Range(int from, int to) {\n      if (from > to) throw new IllegalArgumentException();\n      this.from = from;\n      this.to = to;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the configured language level is 14 Preview.</p>\n<p><small>New in 2020.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "GoUnusedLabel",
          "displayName": "Unused label",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports unused label definitions.\n</body>\n</html>"
        },
        {
          "shortName": "GoRedundantComma",
          "displayName": "Redundant comma",
          "enabled": false,
          "description": "<html>\n<body>\nReports redundant comma in the end of argument lists and composite literals.\n</body>\n</html>"
        },
        {
          "shortName": "UnusedReturnValue",
          "displayName": "Method can be void",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods whose return values are never used when called.\nThe return type of such methods can be made <code>void</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifyOptionalCallChains",
          "displayName": "Optional call chain can be simplified",
          "enabled": false,
          "description": "<html>\n<body>\nWarns about <b>Optional</b> call chains which could be simplified. Here are some examples of possible simplifications:\n<ul>\n  <li><code>optional.map(x -> true).orElse(false)</code> &rarr; <code>optional.isPresent()</code></li>\n  <li><code>optional.map(x -> Optional.of(x.trim())).orElseGet(Optional::empty)</code> &rarr; <code>optional.map(String::trim)</code></li>\n  <li><code>optional.map(x -> (String)x).orElse(null)</code> &rarr; <code>(String) optional.orElse(null)</code></li>\n  <li><code>Optional.ofNullable(optional.orElse(null))</code> &rarr; <code>optional</code></li>\n  <li><code>val = optional.orElse(null); val != null ? val : defaultExpr </code> &rarr; <code>optional.orElse(defaultExpr)</code></li>\n  <li><code>val = optional.orElse(null); if(val != null) expr(val) </code> &rarr; <code>optional.ifPresent(val -> expr(val))</code></li>\n</ul>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "TrivialFunctionalExpressionUsage",
          "displayName": "Trivial usage of functional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls to methods of functional interfaces which are directly invoked on the definition of the lambda, method reference or anonymous class.\nSuch method calls, including the functional interface implementation, can be replaced with the body of the functional interface implementation, like\n<code>((Runnable)() -> doSmth()).run()</code> can be replaced with <code>doSmth()</code>.\n</body>\n</html>"
        },
        {
          "shortName": "DefaultAnnotationParam",
          "displayName": "Default annotation parameter value",
          "enabled": false,
          "description": "<html>\n<body>\nReports explicit assigning default value to an annotation parameter.\n</body>\n</html>"
        },
        {
          "shortName": "EmptyMethod",
          "displayName": "Empty method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods where: <br> <br>\n&nbsp;- method is empty OR <br>\n&nbsp;- all implementations of interface method are empty OR <br>\n&nbsp;- method is empty itself and is overridden only by empty methods <br> <br>\nNote that a method containing only the <b><font color=\"#000080\">super()</font></b>\ncall and passing its own parameter is also considered empty.\n<br> <br>\nThis inspection is automatically suppressed for methods annotated with special annotations,\nfor example, EJB annotations javax.ejb.Init and javax.ejb.Remove.\n<!-- tooltip end -->\nAdditional annotations can be configured below.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoPreferNilSlice",
          "displayName": "Empty slice declared via literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports slice declaration with empty literal initializer instead of nil.\n<p>An empty slice can be represented by nil or an empty slice literal. The first approach is preferred as it does not lead to memory allocation.</p>\n<p>See <a href=\"https://golang.org/wiki/CodeReviewComments#declaring-empty-slices\">Code review comments: declaring empty slices</a>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "GoUnusedType",
          "displayName": "Unused type",
          "enabled": false,
          "description": "<html>\n<body>\nReports unused types.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantStreamOptionalCall",
          "displayName": "Redundant step in Stream or Optional call chain",
          "enabled": false,
          "description": "<html>\n<body>\nReports redundant Stream or Optional calls like <code>map(x -> x)</code> or <code>filter(x -> true)</code>,\nredundant <code>sorted</code> or <code>distinct</code>.\n<p>Note that a mapping operation in code like <code>streamOfIntegers.map(Integer::valueOf)</code> works as <code>requireNonNull</code>\n  check:\n  if stream contains a <code>null</code>, it will throw <code>NullPointerException</code>, thus it's not absolutely redundant. Uncheck the\n  \"Report redundant boxing in Stream.map\" checkbox if you don't want such cases to be reported.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SameParameterValue",
          "displayName": "Actual method parameter is the same constant",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods where a value being passed to a particular parameter\nappears to be always the same constant.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoUnusedGlobalVariable",
          "displayName": "Unused global variable",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports for unused global variables.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyUnusedDeclaration",
          "displayName": "Unused declaration",
          "enabled": false,
          "description": "<html>\n<body>\nReports unused classes, methods and fields.\n</body>\n</html>\n"
        },
        {
          "shortName": "SillyAssignment",
          "displayName": "Variable is assigned to itself",
          "enabled": false,
          "description": "<html>\n<body>\nDetects assignments of a variable to itself, like: <br>\n<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><font color=\"#000080\">a = a;</font></b>\n</body>\n</html>"
        },
        {
          "shortName": "GoUnusedExportedFunction",
          "displayName": "Unused exported function",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports unused exported functions.\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateThrows",
          "displayName": "Duplicate throws",
          "enabled": false,
          "description": "<html>\n<body>\nReports duplicate exceptions in a method throws list.\nFor example:\n<code><pre>\n<b>void</b> f() <b>throws</b> Exception, <b>Exception</b> {\n}\n</pre></code>\n<br>\nThe inspection also warns if one exception subclasses another.\n For example:\n<code><pre>\n<b>void</b> f() <b>throws</b> <b>IOException</b>, Exception {\n}\n</pre></code>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore exceptions subclassing others.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GoVarAndConstTypeMayBeOmitted",
          "displayName": "Type can be omitted",
          "enabled": false,
          "description": "<html>\n<body>\nReports variable and constant types that can be omitted since it can be inferred by the compiler.\n</body>\n</html>"
        },
        {
          "shortName": "GoBoolExpressions",
          "displayName": "Bool condition",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports redundant and suspect parts of boolean expressions.\n</body>\n</html>"
        },
        {
          "shortName": "GoRedundantConversion",
          "displayName": "Redundant type conversion",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports redundant type conversion that can be omitted.\n<p>Example: <code>var s = string(\"hello\")</code>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ObviousNullCheck",
          "displayName": "Null-check method is called with obviously non-null argument",
          "enabled": false,
          "description": "<html>\n<body>\nReports if null-checking method (like <code>Objects.requireNonNull</code> or <code>Assert.assertNotNull</code>) is\ncalled on the value which is obviously non-null. Such check is redundant and may indicate a programming error.\n<!-- tooltip end -->\n<p>New in 2017.2</p>\n</body>\n</html>"
        },
        {
          "shortName": "GoEmptyDeclaration",
          "displayName": "Empty declaration",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports empty declarations.\n</body>\n</html>"
        },
        {
          "shortName": "UnusedLabel",
          "displayName": "Unused label",
          "enabled": false,
          "description": "<html>\n<body>\nReports unused code labels.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryModuleDependencyInspection",
          "displayName": "Unnecessary module dependency",
          "enabled": false,
          "description": "<html>\n<body>\nLists modules which contain redundant dependencies on other modules.\nThese dependencies can be safely removed.\n\n</body>\n</html>\n"
        },
        {
          "shortName": "GoUnusedConst",
          "displayName": "Unused constant",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports unused constants.\n</body>\n</html>"
        },
        {
          "shortName": "GoRedundantSemicolon",
          "displayName": "Redundant semicolon",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports redundant semicolons.\n</body>\n</html>"
        },
        {
          "shortName": "GoRedundantImportAlias",
          "displayName": "Redundant import alias",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports import aliases that can be omitted.\n</body>\n</html>"
        },
        {
          "shortName": "WeakerAccess",
          "displayName": "Declaration access can be weaker",
          "enabled": false,
          "description": "<html>\n<body>\nReports all fields, methods or classes, found in the specified inspection\nscope, that may have their access modifier narrowed down. <br> <br>\n<!-- tooltip end -->\nUse check boxes in the inspection options below, to define rules for the modifier change suggestions.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantOperationOnEmptyContainer",
          "displayName": "Redundant operation on empty container",
          "enabled": false,
          "description": "<html>\n<body>\nReports redundant operations on empty collections, maps or arrays. Iterating, removing elements, sorting, \nand some other operations on empty collections have no effect and could be removed or signal about a possible bug. \n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "GoUnusedParameter",
          "displayName": "Unused parameter",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports unused function parameters.\n</body>\n</html>"
        },
        {
          "shortName": "UnusedLibrary",
          "displayName": "Unused library",
          "enabled": false,
          "description": "<html>\n<body>\nReports libraries attached to the specified inspection scope that\nare not used directly from code. <br> <br>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "GoRedundantSecondIndexInSlices",
          "displayName": "Redundant second index in slices",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports redundant second index in slices inspection.\n<p>Example: <strong>a[0:len(a)]</strong>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "GoRedundantTypeDeclInCompositeLit",
          "displayName": "Redundant types in composite literals",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports redundant types in composite literals.\n<p>For example:</p>\n<pre>\n    [][]int{[]int{1}, []int{2}}\n</pre>\n<p>can be simplified to:</p>\n<pre>\n    [][]int {{1}, {2}}\n</pre>.\n</body>\n</html>"
        },
        {
          "shortName": "VgoUnusedDependency",
          "displayName": "Unused dependency",
          "enabled": false,
          "description": "<html>\n<body>\nReports unused dependencies.\n<p>For each dependency in the current go.mod file, this inspection searches for any import statement starting with the dependency name in\n  all .go files.\n  If no such import is found then dependency is unused.\n  Inspection doesn't consider indirect dependencies. They are marked with <code>// indirect</code> comment.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SameReturnValue",
          "displayName": "Method returns the same value",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods and method hierarchies where the return value appears to\nbe always the same constant.\n</body>\n</html>\n"
        },
        {
          "shortName": "EmptyInitializer",
          "displayName": "Empty class initializer",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty class initializer blocks.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantThrows",
          "displayName": "Redundant 'throws' clause",
          "enabled": false,
          "description": "<html>\n<body>\nReports exceptions that are declared in a method's signature but never\nthrown by the method itself or its implementations/derivatives.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoSelfAssignment",
          "displayName": "Self assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports self assignment.\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyCollector",
          "displayName": "Collector can be simplified",
          "enabled": false,
          "description": "<html>\n<body>\nReports collectors which could be simplified. In particular some cascaded <code>groupingBy</code> collectors\ncould be expressed with simpler <code>toMap</code> collector which also will likely be more performant.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher </p>\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "GoUnusedExportedType",
          "displayName": "Unused exported type",
          "enabled": false,
          "description": "<html>\n<body>\nReports unused exported types in main package and in tests.\n</body>\n</html>"
        },
        {
          "shortName": "AccessStaticViaInstance",
          "displayName": "Access static member via instance reference",
          "enabled": false,
          "description": "<html>\n<body>\nShows references to <b><font color=\"#000080\">static</font></b> methods and fields\nvia class instance rather than a class itself.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantLambdaParameterType",
          "displayName": "Redundant lambda parameter types",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda formal parameter types which are redundant, because they can be inferred from the context.\n<p>The quick fix removes the parameter types from the lambda.\n<p>Example: <pre><code>Map&lt;String, Integer&gt; map = ...\nmap.forEach((String s, Integer i) -> log.info(s + \"=\" + i));</code></pre>\n<p>The code above can be simplified to the following:\n<pre><code>Map&lt;String, Integer&gt; map = ...\nmap.forEach((s, i) -> log.info(s + \"=\" + i));</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "unused",
          "displayName": "Unused declaration",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes, methods or fields in the specified inspection scope that\nare not used or not reachable from entry points. It also reports parameters that are not used by their methods and all method\nimplementations/overriders and local variables that are declared but not used.\nSome unused members might not be reported during in-editor highlighting. Due to performance reasons, a non-private member is checked only when its name rarely occurs in the project.\nTo see all results, please run the inspection using Analyze | Inspect Code... or Analyze | Run Inspection by Name...\n<br> <br>\n<!-- tooltip end -->\nUse visibility settings below to configure what members should be reported, e.g. configuring report private methods only means\nthat public methods of private inner class would be reported though protected methods of top level class would be ignored.\n<br><br>\nUse check boxes in the inspection options below, to specify what should be automatically assumed entry points. You will\nalso have a possibility to add entry points manually when inspection results are ready. You may also configure annotations to mark members as entry points as well\nas code patterns.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Plugin DevKit",
      "inspections": [
        {
          "shortName": "ComponentRegistrationProblems",
          "displayName": "Component type mismatch",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection finds various problems about incorrect registration of plugin components\n(Components and Actions) both in Java code as well as the plugin.xml descriptor.\n\n<p>\n    Those problems include\n    <ul>\n        <li>Unresolved component/action implementation-classes (plugin.xml)</li>\n        <li>Unresolved component interface-classes (plugin.xml)</li>\n        <li>Component implementation-class is not assignable to its interface-class (plugin.xml)</li>\n        <li>Incorrect component registration, e.g. <code>ProjectComponent</code> is registered as Application Component\n            or the class doesn't implement any component interface at all (plugin.xml / Java Code)\n        </li>\n        <li>Incorrect class modifiers: Action classes must be public and must have a public\n            no-argument constructor. Additionally, Action and Component implementation classes\n            must not be abstract (plugin.xml / Java Code)\n        </li>\n        <li>Duplicate interface-class: A class may only be used once as interface-class (plugin.xml)</li>\n    </ul>\n</p>\n\n<p>\n    The inspection provides options to switch off the checks in plugin.xml and Java code. Checking\n    Action classes in Java can also be toggled separately.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "IncompatibleAPI",
          "displayName": "Incompatible API usage",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports usages of incompatible API.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "CastConflictsWithInstanceof",
          "displayName": "Cast conflicts with 'instanceof'",
          "enabled": false,
          "description": "<html>\n<body>\nReports type cast expressions which are surrounded by an\n<b>instanceof</b> check for a different type.\nWhile it is possible that this was intended, such a construct is most likely an error, and will\nresult in a <b>java.lang.ClassCastException</b> at runtime.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ES6BindWithArrowFunction",
          "displayName": "Suspicious usage of 'bind' with arrow function",
          "enabled": false,
          "description": "<html>\n<body>\nWarns if <code>bind</code> is used together with arrow function.<br/>\nSince arrow functions use lexical <code>this</code>, <code>bind</code> call will have no effect on them.<br/>\nPlease read more <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this\">here</a>.\n</body>\n</html>"
        },
        {
          "shortName": "IteratorHasNextCallsIteratorNext",
          "displayName": "'Iterator.hasNext()' which calls 'next()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of <b>Iterator.hasNext()</b> or <b>ListIterator.hasPrevious()</b>\nthat call <b>Iterator.next()</b> or <b>ListIterator.previous()</b> on themselves. \nSuch calls are almost certainly in error, as methods like <b>hasNext()</b>\nshould not modify the iterators state, while <b>next()</b> should.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MismatchedStringCase",
          "displayName": "Mismatched case in String operation",
          "enabled": false,
          "description": "<html>\n<body>\nReports string methods calls that always return the same value (-1 or false) because a lowercase character is searched in an\nuppercase-only string or vice versa. Reported methods include 'equals', 'startsWith', 'endsWith', 'contains', 'indexOf', and 'lastIndexOf'.\nExample:\n<pre>\n  if (columnName.toLowerCase().equals(\"ID\")) {...} // condition is always false\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "OptionalGetWithoutIsPresent",
          "displayName": "Optional.get() is called without isPresent() check",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Optional.get()</b> method calls without an earlier check that the optional has a value.\nIf the optional is empty, calling <b>Optional.get()</b> will throw an exception.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ObjectEquality",
          "displayName": "Object comparison using '==', instead of 'equals()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any use of <b>==</b> or <b>!=</b>to test for Object equality, rather than the <b>equals()</b> method.\nComparisons to <b>null</b> are not reported.\nComparison of arrays, Strings or Numbers using <b>==</b> are also not reported, there are separate inspections for these three problems.\n<!-- tooltip end -->\n<p>\nUse the checkboxes below to indicate whether uses of <b>==</b> between objects of\nan enumerated type, final class types without equals implementation or types with private constructors should be reported by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousIntegerDivAssignment",
          "displayName": "Suspicious integer division assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports cases when the right side of the assignment is a division that shouldn't be truncated to integer.\n<p>\n  For example, the following code doesn't change <b>x</b> because of the integer division result:\n<pre><code>\n  <b>int</b> x = 18;\n  x *= 3/2;\n</code></pre>\nSo, it should be replaced with:\n<pre><code>\n  <b>int</b> x = 18;\n  x *= 3.0/2;\n</code></pre>\n<!-- tooltip end -->\n<p>\n  <small>New in 2019.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousCollectionReassignment",
          "displayName": "Augmented assignment creates a new collection under the hood",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports augmented assignment on read-only <b>Collection</b> that creates a new <b>Collection</b> under the hood.\nExample:\n<br /><br />\n\n<pre>\n<b>var</b> list = listOf(1, 2, 3)\nlist <b>+=</b> 4 // A new list is created, better use mutableListOf instead\n</pre>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "AssertWithSideEffects",
          "displayName": "'assert' statement with side effects",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>assert</b> statements\nthat cause side effects outside of the assert statement. Since assertions can be\nswitched off, the side effects are not guaranteed to happen and can cause subtle bugs.\nCommon unwanted side effects detected by this inspection are modifications of variables\nand fields in the assert statement. Also methods called are analyzed one level deep\nfor any modifications of fields.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoVetUnsafePointer",
          "displayName": "Invalid conversions of uintptr to unsafe.Pointer",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for invalid conversions of <strong>uintptr</strong> to <strong>unsafe/Pointer</strong>.\n<!-- tooltip end -->\n<p>Reports likely incorrect uses of <strong>unsafe/Pointer</strong> to convert integers to pointers. A conversion from\n  <strong>uintptr</strong> to <strong>unsafe/Pointer</strong> is invalid if it implies that there is a <strong>uintptr</strong>-typed word\n  in memory that holds a pointer value, because that word will be invisible to stack copying and to the garbage collector.</p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyDocCheck",
          "displayName": "GroovyDoc issues",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports unresolved references inside GroovyDoc.</body></html>\n"
        },
        {
          "shortName": "MalformedFormatString",
          "displayName": "Malformed format string",
          "enabled": false,
          "description": "<html>\n<body>\nReports malformed format strings. Format strings\nare reported if they are compile-time constants used as arguments to appropriate methods on\n<b>java.util.Formatter</b>,\n<b>java.lang.String</b>,\n<b>java.io.PrintWriter</b>,\nor <b>java.io.PrintStream</b>\nand do not fit the standard Java format string syntax.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousEqualsCombination",
          "displayName": "Suspicious combination of == and ===",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports when <b>==</b> and <b>===</b> comparisons are both used on the same variable within a single expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "InfiniteLoopJS",
          "displayName": "Infinite loop statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b>, <b>while</b>, or <b>do</b> statements which\ncan only exit by throwing an exception. While such statements may be correct, they\nare often a symptom of coding errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSSuspiciousEqPlus",
          "displayName": "Suspicious '=+' assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments in form 'a =+ b'.\nIn most cases, assignments of form 'a =+ b' are typos, and the correct option is 'a += b'.\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousListRemoveInLoop",
          "displayName": "Suspicious 'List.remove()' in the loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports when <strong>list.remove(index)</strong> is called inside the ascending counted loop. This is suspicious as list becomes\nshorter after that and the element next to removed will not be processed. Simple fix is to decrease the index variable after removal,\nbut probably removing via iterator or using <strong>removeIf</strong> method (since Java 8) is a more robust alternative.\nIf you don't expect that <strong>remove</strong> will be called more than once in a loop, consider adding a <strong>break</strong> command\nafter it.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousArrayCast",
          "displayName": "Suspicious array cast",
          "enabled": false,
          "description": "<html>\n<body>\nReports suspicious array casts. An array cast is suspicious when it casts to a more specific array type. Such\na cast is legal at compile time but may fail with a <b>ClassCastException</b> at runtime.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyConstructorNamedArguments",
          "displayName": "Named arguments of constructor call",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports named arguments of default class constructor call which don't correspond to properties of this class.\n</body>\n</html>\n"
        },
        {
          "shortName": "UselessCallOnCollection",
          "displayName": "Useless call on collection type",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports filter-like calls on already filtered collections, e.g. <b>listOf(\"abc\").filterNotNull()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "UselessCallOnNotNull",
          "displayName": "Useless call on not-null type",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls on not-null receiver that make sense only for nullable receiver, e.g.\n\n<pre><b>\nlistOf(1).orEmpty()\n</b></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "CssFloatPxLength",
          "displayName": "Float px length",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects float values of pixel lengths. <br>\n</body>\n</html>"
        },
        {
          "shortName": "IterableUsedAsVararg",
          "displayName": "Iterable is used as vararg",
          "enabled": false,
          "description": "<html>\n<body>\nReports suspicious usages of <b>Collection</b> or an <b>Iterable</b> in vararg method calls. E.g. given method \n  <pre>&lt;T&gt; boolean contains(T needle, T... haystack) {...}</pre> \n<p>a call like</p>\n  <pre>if(contains(\"item\", listOfStrings)) {...}</pre> \n<p>looks suspicious as the list will be wrapped into a single element array. \n  Such code can be successfully compiled and likely run without\n  exceptions, but it's unlikely intended.</p>\n<!-- tooltip end -->\n<p><small>New in 2019.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyResultOfObjectAllocationIgnored",
          "displayName": "Result of object allocation ignored",
          "enabled": false,
          "description": "<html>\n<body>\nReports object allocation where the object allocated ignored.\nSuch allocation expressions are legal Groovy, but are usually either inadvertent, or\nevidence of a very odd object initialization strategy.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoUnhandledErrorResult",
          "displayName": "Unhandled error",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to functions/methods that return an error if the error is not handled.\n</body>\n</html>"
        },
        {
          "shortName": "ComparatorMethodParameterNotUsed",
          "displayName": "Suspicious 'Comparator.compare()' implementation",
          "enabled": false,
          "description": "<html>\n<body>\nReports problems found in <b>Comparator.compare()</b> implementations:\n<ul>\n  <li>Warns if parameter is not used. Most likely this is the result of a typing mistake and one parameter is compared\n    with itself or the method is not implemented correctly.</li>\n  <li>Warns if it's evident that comparator does not return 0 for same elements. Such comparator violates the contract\n    and result of sorting could be unpredictable if equal elements are encountered. In particular,\n    sorting method may fail with exception on some data sets.</li>\n</ul>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "KotlinThrowableNotThrown",
          "displayName": "Throwable not thrown",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports creating of <b>Throwable</b> and subclasses, where the created <b>Throwable</b> is never actually thrown.\nAlso reports function calls which return <b>Throwable</b> instances, where the result of the function call is not thrown.\n</body>\n</html>"
        },
        {
          "shortName": "JSComparisonWithNaN",
          "displayName": "Comparison with NaN",
          "enabled": false,
          "description": "<html>\n<body>\nChecks code for comparisons with NaN. Comparisons like <b>expr == NaN</b> or <b>expr === NaN</b> are always evaluated to <b>false</b>.\n</body>\n</html>"
        },
        {
          "shortName": "SecondUnsafeCall",
          "displayName": "Second unsafe call",
          "enabled": false,
          "description": "<html>\n<body>\nThis quick fix prevent possible <b>NullPointerException</b> during chain methods or properties call.\nE.g. <b>domain?.getZone().getName()</b> replaces by <b>domain?.getZone()?.getName()</b>\n</body>\n</html>\n"
        },
        {
          "shortName": "CoffeeScriptSillyAssignment",
          "displayName": "Variable is assigned to itself",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports any assignments of the form <b><font color=\"#000080\">x = x</font></b> in CoffeeScript content.  These are pointless,\nand usually indicate programmer error.\n\n</body>\n</html>\n"
        },
        {
          "shortName": "UseOfPropertiesAsHashtable",
          "displayName": "Use of Properties object as a Hashtable",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to the <b>java.util.Hashtable</b>\nmethods <b>put()</b>, <b>putAll()</b> or\n<b>get()</b> on a <b>java.util.Properties</b> object.\nFor reasons lost to history, <b>Properties</b> inherits\nfrom <b>Hashtable</b>, but use of those methods is discouraged\nto prevent corruption of properties values with non-String data.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ComparatorResultComparison",
          "displayName": "Suspicious usage of compare method",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection warns when result of <b>Comparator.compare</b> or <b>Comparable.compareTo</b> is compared with\n  specific non-zero constant (like <b>if(a.compareTo(b) == -1)</b>). By contract,\n  these methods can return any positive number (not just 1) or any negative number (not just -1), so comparing against\n  particular numbers is a bad practice.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "NewObjectEquality",
          "displayName": "New object is compared using '=='",
          "enabled": false,
          "description": "<html>\n<body>\nReports cases when <b>==</b> or <b>!=</b> is applied to a newly allocated object\ninstead of an <b>equals()</b> call. Newly allocated objects cannot be equal to other objects,\nthus the compared objects are always unequal.\n<!-- tooltip end -->\n<p>\n  <small>New in 2018.3</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyInfiniteLoopStatement",
          "displayName": "Infinite loop statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b>, <b>while</b>, or <b>do</b> statements which\ncan only exit by throwing an exception. While such statements may be correct, they\nare often a symptom of coding errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "ObjectAllocationIgnoredJS",
          "displayName": "Result of object allocation ignored",
          "enabled": false,
          "description": "<html>\n<body>\nReports object allocation where the result of the object allocated is ignored.\nSuch allocation expressions are legal JavaScript, but are usually either inadvertent, or\nevidence of a very odd object initialization strategy.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoBuildTag",
          "displayName": "Malformed build tag",
          "enabled": false,
          "description": "<html>\n<body>\nReports malformed build tags and build tags in the incorrect location.\n<p>See <a href=\"https://golang.org/pkg/go/build/#hdr-Build_Constraints\">go build command: build constraints</a>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "WrongPackageStatement",
          "displayName": "Wrong package statement",
          "enabled": false,
          "description": "<html>\n<body>\nDetects <b>package</b> statements that do not correspond to the project directory structure\nand reports classes without <b>package</b> statements.\n</body>\n</html>"
        },
        {
          "shortName": "CapturingCleaner",
          "displayName": "Cleaner captures object reference",
          "enabled": false,
          "description": "<html>\n<body>\nReports Runnable passed to Cleaner.register() capturing reference that leads to memory leak.\nPossible sources of this problem:\n<ul>\n  <li>Lambda using non static methods, fields or this itself</li>\n  <li>Non static inner class (anonymous or not) always captures this reference</li>\n  <li>Instance method reference</li>\n  <li>Access to outer class non static members from non static inner class</li>\n</ul>\n<p>This inspection is available since Java 9 only.</p>\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "GoShadowedVar",
          "displayName": "Shadowing variable",
          "enabled": false,
          "description": "<html>\n<body>\nReports declarations of variables that overlap with the declarations in the outer scope.\n</body>\n</html>"
        },
        {
          "shortName": "IteratorNextDoesNotThrowNoSuchElementException",
          "displayName": "'Iterator.next()' which can't throw 'NoSuchElementException'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of <b>Iterator.next()</b>\nwhich can not throw <b>java.util.NoSuchElementException</b>. Such\nimplementations violate the contract of <b>java.util.Iterator</b>,\nand may result in subtle bugs if the iterator is ever used in a non-standard fashion.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CanSealedSubClassBeObject",
          "displayName": "Sealed sub-class without state and overridden equals",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports direct inheritors of <b>sealed class</b> that have no state and no overridden <b>equals</b>.\nIt's highly recommended to override <b>equals</b> to provide comparison stability or convert <b>class</b> to <b>object</b> with the same effect.\n</body>\n</html>"
        },
        {
          "shortName": "KotlinCovariantEquals",
          "displayName": "Covariant 'equals()'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>equals()</b> methods taking an argument type other than <b>Any?</b>.\nOnly reports if the containing class does not have another <b>equals()</b> method which does take <b>Any?</b> as its argument type.\nNormally, this is a mistake.\n</body>\n</html>"
        },
        {
          "shortName": "ConflictingExtensionProperty",
          "displayName": "Extension property conflicting with synthetic one",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports extension properties that conflict with synthetic ones automatically produced from Java <b>get/set</b> methods. These properties should be either removed or renamed to avoid breaking code by future changes in the compiler.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoPrintFunctions",
          "displayName": "Incorrect usage of Println/Printf-like functions",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports incorrect usage of <strong>Println</strong>-like and <strong>Printf</strong>-like functions.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyNonShortCircuitBoolean",
          "displayName": "Non short-circuit boolean",
          "enabled": false,
          "description": "<html>\n<body>\nReports the non-short-circuit forms of boolean 'and' and 'or' ( <b>&</b>\nand <b>|</b> ). The non-short-circuit versions are occasionally useful, but\ntheir presence is often due to typos of the short-circuit forms ( <b>&&</b>\nand <b>||</b> ), and may lead to subtle bugs.\n</body>\n</html>\n"
        },
        {
          "shortName": "StringEqualsCharSequence",
          "displayName": "'String.equals()' called with 'CharSequence' argument",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>String.equals()</b> calls on a <b>CharSequence</b> argument.\n<b>String.equals()</b> can only return <b>true</b> for <b>String</b> arguments.\nTo compare the contents of a String for equality with a non-String CharSequence argument, use the <b>contentEquals()</b> method.\n<!-- tooltip end -->\n<p>\n<small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "JSPotentiallyInvalidConstructorUsage",
          "displayName": "Potentially invalid constructor usage",
          "enabled": false,
          "description": "<html>\n<body>\nReports potentially invalid constructor function usages such as: using non constructor in new, using\nconstructor's prototype and\nconstructor call without new. Constructor function assumed to have upper case name (optional) or have explicit JSDoc <b>@constructor</b> tag.\nThe validation works in JavaScript, html or jsp files.\n</body>\n</html>\n"
        },
        {
          "shortName": "StringConcatenationMissingWhitespace",
          "displayName": "String literal concatenation missing whitespace",
          "enabled": false,
          "description": "<html>\n<body>\nReports string concatenations where the left-hand side does not\nend with whitespace or a symbol and the right-hand side does not start with whitespace or a symbol. For example:\n<pre><code>\n  String sql = \"SELECT column\" +\n               \"FROM table\";\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection only report when both the left and right side of the concatenation are literals.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JSPotentiallyInvalidUsageOfClassThis",
          "displayName": "Potentially invalid reference to 'this' of a class from closure",
          "enabled": false,
          "description": "<html>\n<body>\nWarns against a common mistake of trying to reference a member of an ECMAScript class via <b>this.</b> qualifier in a nested function that is not a lambda.<br/>\n<b>this</b> in a nested function that is not a lambda is the function's own 'this' and doesn't relate to the outer class.\n</body>\n</html>\n"
        },
        {
          "shortName": "ComparableImplementedButEqualsNotOverridden",
          "displayName": "Comparable implemented but 'equals()' not overridden",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which implement <b>java.lang.Comparable</b>\nwhich do not override <b>equals()</b>. If <b>equals()</b>\nis not overridden, the <b>equals()</b> implementation is not consistent with\nthe <b>compareTo()</b> implementation. If an object of such a class is added\nto a collection such as <b>java.util.SortedSet</b>, this collection will violate\nthe contract of <b>java.util.Set</b>, which is defined in terms of\n<b>equals()</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonShortCircuitBoolean",
          "displayName": "Non-short-circuit boolean expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any uses of the non-short-circuit forms of boolean 'and' and 'or' (<b>&</b>\nand <b>|</b>). The non-short-circuit versions are occasionally useful, but\ntheir presence is often due to typos of the short-circuit forms (<b>&&</b>\nand <b>||</b>), and may lead to subtle bugs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousArrayMethodCall",
          "displayName": "Suspicious Arrays method calls",
          "enabled": false,
          "description": "<html>\n<body>\nReports when a non-generic-array manipulation method like <code>Arrays.fill()</code> is called with mismatched argument types.\nSuch a call will not do anything useful and is likely a mistake.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CoffeeScriptInfiniteLoop",
          "displayName": "Infinite loop statement",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports any instances of <b><font color=\"#000080\">for</font></b>, <b><font\n    color=\"#000080\">while</font></b>,\nor <b><font color=\"#000080\">do</font></b> statements which\ncan only exit by throwing an exception. While such statements may be correct, they\nare often a symptom of coding errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "InfiniteRecursionJS",
          "displayName": "Infinite recursion",
          "enabled": false,
          "description": "<html>\n<body>\nReports functions which must either recurse\ninfinitely or throw an exception. Functions reported by this inspection can not\nreturn normally.\n</body>\n</html>\n"
        },
        {
          "shortName": "EqualsWhichDoesntCheckParameterClass",
          "displayName": "'equals()' method which does not check class of parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>equals()</b>\nmethods which do not check the type of their parameter. Failure to check the type of the parameter\nin the <b>equals()</b> method may result in latent errors if the object is later used in an untyped collection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceArrayEqualityOpWithArraysEquals",
          "displayName": "Replace '==' with 'Arrays.equals'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects usages of <b>==</b> or <b>!=</b> operator for arrays that should be replaced with <b>contentEquals</b>.\n</body>\n</html>"
        },
        {
          "shortName": "RecursiveEqualsCall",
          "displayName": "Recursive equals call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports recursive <b>equals</b> calls. For example:\n<br /><br />\n\n<pre>\nclass X {\n    override fun equals(other: Any?): Boolean {\n        if (this == other) return true // recursive equals call\n        return false\n    }\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "LeakingThis",
          "displayName": "Leaking 'this' in constructor",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports dangerous operations inside constructors including:\n\n<ul>\n  <li>Accessing a non-final property in constructor</li>\n  <li>Calling a non-final function in constructor</li>\n  <li>Using <b>this</b> as a function argument in a constructor of a non-final class</li>\n</ul>\n\nThese operations are dangerous because your class can be inherited,\nand a derived class is not yet initialized at this moment. Typical example:\n<br /><br />\n\n<pre>\n<b>abstract class</b> Base {\n    <b>val</b> code = calculate()\n    <b>abstract fun</b> calculate(): Int\n}\n\n<b>class</b> Derived(<b>private val</b> x: Int) : Base() {\n    <b>override fun</b> calculate() = x\n}\n\n<b>fun</b> testIt() {\n    println(Derived(42).code) <i>// Expected: 42, actual: 0</i>\n}\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "StaticFieldReferenceOnSubclass",
          "displayName": "Static field referenced via subclass",
          "enabled": false,
          "description": "<html>\n<body>\nReports static field accesses where the call is qualified\nby a subclass of the declaring class, rather than the declaring class itself. Java\nallows such qualification, but such accesses\nmay be confusing, and may indicate a subtle confusion of inheritance and overriding.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoStandardMethods",
          "displayName": "Non-standard signature for well-known function names",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that method whose name matches one of several well-known interface methods \nfrom the standard library has the correct signature.\n</body>\n</html>"
        },
        {
          "shortName": "InfiniteRecursion",
          "displayName": "Infinite recursion",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods which must either recurse\ninfinitely or throw an exception. Methods reported by this inspection can not\nreturn normally.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MismatchedArrayReadWrite",
          "displayName": "Mismatched read and write of array",
          "enabled": false,
          "description": "<html>\n<body>\nReports any array fields or variables whose contents are read but not written,\nor written but not read. Such mismatched reads and writes are pointless, and probably indicate\ndead, incomplete or erroneous code.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyDivideByZero",
          "displayName": "Divide by zero",
          "enabled": false,
          "description": "<html>\n<body>\nReports division by zero or remainder by zero.\n</body>\n</html>\n"
        },
        {
          "shortName": "StringConcatenationInMessageFormatCall",
          "displayName": "String concatenation as argument to 'MessageFormat.format()' call",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-constant string concatenations used as an argument to a call to\n<b>MessageFormat.format()</b>.\nOften this is the result of mistakenly concatenating a string format argument by typing\na '+' when a ',' was meant.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationInFormatCall",
          "displayName": "String concatenation as argument to 'format()' call",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-constant string concatenations used as a format string argument.\nOften this is the result of mistakenly concatenating a string format argument by typing a '+'\nwhen a ',' was meant.\nThis inspection checks calls to appropriate methods on\n<b>java.util.Formatter</b>,\n<b>java.lang.String</b>, \n<b>java.io.PrintWriter</b>,\nor <b>java.io.PrintStream</b>.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyUntypedAccess",
          "displayName": "Access to untyped expression",
          "enabled": false,
          "description": "<html>\n<body>\n       Reports the references whose type can't be determined by IntelliJ IDEA\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyLabeledStatement",
          "displayName": "Labeled statement inspection",
          "enabled": false,
          "description": "<html>\n<body>\nReports already used labels.\n</body>\n</html>\n"
        },
        {
          "shortName": "ImplicitArrayToString",
          "displayName": "Call to 'toString()' on array",
          "enabled": false,
          "description": "<html>\n<body>\nReports any arrays used in <b>String</b>\nconcatenations or as parameters to <b>java.io.PrintStream</b>\nmethods (such as <b>System.out.println()</b>). Usually in such\na case, the contents of the array were meant to be used and not the array object itself.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CssMissingComma",
          "displayName": "Missing comma",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects missing comma between selectors at the end of line.\n</body>\n</html>"
        },
        {
          "shortName": "DestructuringWrongName",
          "displayName": "Variable in destructuring declaration uses name of a wrong data class property",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports entries of destructuring declarations that match the name of a different property of the destructured data class.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSTypeOfValues",
          "displayName": "Typeof comparing with non-standard value",
          "enabled": false,
          "description": "<html>\n<body>\nReports when literal string in a comparing with <b>typeof</b> is not one of the standard types:\n<b>undefined</b>, <b>object</b>, <b>boolean</b>, <b>number</b>, <b>string</b>, <b>function</b> or <b>symbol</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoStringsReplaceCount",
          "displayName": "Incorrect strings.Replace count argument",
          "enabled": false,
          "description": "<html>\n<body>\nReports <strong>strings.Replace</strong> calls with the replace count <strong>0</strong> instead of <strong>-1</strong>.\n<p>The count argument for how many times a string should be replaced should not be <strong>0</strong>\nas it will not replace anything and make the function call redundant. Use <strong>-1</strong> instead.</p>\n</body>\n</html>"
        },
        {
          "shortName": "JSIncompatibleTypesComparison",
          "displayName": "Comparison of expressions having incompatible types",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that operands in comparisons have compatible types in JavaScript files. Operands of types without possible common values are reported.\n</body>\n</html>"
        },
        {
          "shortName": "MisspelledEquals",
          "displayName": "'equal()' instead of 'equals()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any declaration of a <b>equal()</b> method, taking one argument.\nNormally, this is a typo of <b>equals()</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SubtractionInCompareTo",
          "displayName": "Subtraction in 'compareTo()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports subtraction in\n<b>compareTo()</b> methods and methods implementing <b>java.util.Comparator.compare()</b>. While it is a common idiom to\nuse the results of integer subtraction as the result of a <b>compareTo()</b>\nmethod, this construct may cause subtle and difficult bugs in cases of integer overflow.\nComparing the integer values directly and returning <b>-1</b>, <b>0</b>, or <b>1</b> is better practice in most cases.\n<p>\n  The subtraction on floating point values which is immediately cast to integral type is also warned as precision loss is possible due to\n  rounding.\n</p>\n<p>\nThe warning is not issued when it's statically determined that value ranges are limited, and overflow never occurs.\nAdditionally subtraction on <b>int</b> numbers greater than or equal to <b>0</b> will never overflow.\nTherefore this inspection tries not to warn in those cases.\nMethods that always return zero or greater can be specified in this inspection's settings.\n<p>\n<!-- tooltip end -->\n<p>\nUse the table below to specify methods which are safe to use inside a subtraction.\nMethods are safe when they return an <b>int</b> value that is always greater than or equal to <b>0</b>.\nAlternatively you may use <b>javax.annotation.Nonnegative</b> annotation on such methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EqualsBetweenInconvertibleTypes",
          "displayName": "'equals()' between objects of inconvertible types",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>.equals()</b> where the target and argument are\nof incompatible types. While such a call might theoretically be useful, most likely it represents\na bug.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EndlessStream",
          "displayName": "Non-short-circuit operation consumes infinite stream",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-short-circuit operations consuming an infinite stream. Such operations can only be completed by throwing an exception.\n<!-- tooltip end -->\n<p>Example:</p>\n<p><code>\n  Stream.iterate(0, i -> i + 1).collect(Collectors.toList())\n</code></p>\n</body>\n</html>"
        },
        {
          "shortName": "IgnoreResultOfCall",
          "displayName": "Result of method call ignored",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to specific methods where the result of that call is ignored.\nMethod calls inspected are:\n<ul>\n  <li>Calls to simple getters (which do nothing except return a field)</li>\n  <li>Calls to methods specified in the settings of this inspection</li>\n  <li>Calls to Methods annotated with <b>org.jetbrains.annotations.Contract(pure=true)</b></li>\n  <li>Calls to Methods annotated with .*.<b>CheckReturnValue</b></li>\n  <li>Calls to Methods located in a class annotated with <b>javax.annotation.CheckReturnValue</b></li>\n  <li>Calls to Methods located in a package annotated with <b>javax.annotation.CheckReturnValue</b></li>\n  <li>Optionally all calls to non-library methods</li>\n</ul>\n<p>For calls to many methods ignoring the result is perfectly\nlegitimate, but for some methods it is almost certainly an error. Examples of methods where ignoring\nthe result of a call is likely to be an error include <b>java.io.inputStream.read()</b>,\nwhich returns the number of bytes actually read and any method on\n<b>java.lang.String </b> or <b>java.math.BigInteger</b>,\nas all of those methods are side-effect free and thus pointless if ignored.\n<!-- tooltip end -->\n<p>\nUse the panel below to specify the names of the classes containing the methods and method name patterns of the methods you wish to check.\nClass names have to be specified as a fully qualified name string and will match a class and all its inheritors.\nMethod name patterns use the Java regular expression syntax.\n<p>\nUse the checkbox below to report all calls to non-library methods where the result of that call is ignored\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NumberEquality",
          "displayName": "Number comparison using '==', instead of 'equals()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any use of <b>==</b> or <b>!=</b> to test for Number equality,\ninstead of an <b>equals()</b> call. With auto-boxing it is easy\nto make the mistake of comparing two Integer (or other subclass of java.lang.Number) objects instead\nof two ints.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JSPotentiallyInvalidUsageOfThis",
          "displayName": "Potentially invalid reference to 'this' from closure",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for <b>this</b> to be the same in closure and in outer context.\nThe validation works in JavaScript, html, or jsp files.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyInArgumentCheck",
          "displayName": "Incompatible 'in' argument types",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports usages of membership operator which check items and containers of incompatible types.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoDivisionByZero",
          "displayName": "Division by zero",
          "enabled": false,
          "description": "<html>\n<body>\nReports division by zero.\n<p>Division by zero will lead to a runtime panic.</p>\n</body>\n</html>"
        },
        {
          "shortName": "RecursivePropertyAccessor",
          "displayName": "Recursive property accessor",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports recursive property accessor calls which can end up with a <b>StackOverflowError</b>. For example:\n<br /><br />\n\n<pre>\n<b>class</b> A {\n    <b>var</b> x = 0\n        <b>get</b>() {\n            <b>return</b> x //recursive getter call\n        }\n\n    <b>var</b> y = 0\n        <b>set</b>(value) {\n            <b>if</b> (value > 0) {\n                y = value //recursive setter call\n            }\n        }\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "Lombok",
          "displayName": "Lombok annotations inspection",
          "enabled": false,
          "description": "<html lang=\"en\">\n<body>\n<span style=\"font-family: verdana,serif; font-size: smaller;\">Inspection for Lombok annotations </span>\n</body>\n</html>\n"
        },
        {
          "shortName": "EqualsUsesNonFinalVariable",
          "displayName": "Non-final field referenced in 'equals()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of <b>equals()</b> which access\nnon-<b>final</b> variables. Such access may result in <b>equals()</b>\nreturning different results at different points in an object's lifecycle, which may in turn cause problems when\nusing the standard Collections classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoUnusedCallResult",
          "displayName": "Unused function or method call result",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to certain functions/methods that do not handle a call result.\n</body>\n</html>"
        },
        {
          "shortName": "ConstantConditions",
          "displayName": "Constant conditions & exceptions",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection analyzes method control and data flow to report possible conditions that are always <b>true</b> or <b>false</b>,\nexpressions whose value is statically proven to be constant, and situations that can lead to nullability contract violations.<p/>\n  \nVariables, method parameters and return values marked as <code>@Nullable</code> or <code>@NotNull</code> are treated as nullable (or not-null, respectively)\nand used during the analysis to check nullability contracts, e.g. report <code>NullPointerException</code> (NPE) errors that might be produced.<p/>\n\nMore complex contracts can be defined using <code>@Contract</code> annotation, for example:<p/>\n<code>@Contract(\"_, null -> null\")</code> &mdash; method returns null if its second argument is null<br/>\n<code>@Contract(\"_, null -> null; _, !null -> !null\")</code> &mdash; method returns null if its second argument is null and not-null otherwise<br/>\n<code>@Contract(\"true -> fail\")</code> &mdash; a typical <code>assertFalse</code> method which throws an exception if <code>true</code> is passed to it<br/>\n<p/>\nThe inspection can be configured to use custom <code>@Nullable</code>/<code>@NotNull</code> annotations (by default the ones from annotations.jar will be used)\n</body>\n</html>\n"
        },
        {
          "shortName": "EqualsOnSuspiciousObject",
          "displayName": "'equals()' called on StringBuilder",
          "enabled": false,
          "description": "<html>\n<body>\nReports when <b>equals()</b> is called on specific classes like <b>StringBuilder</b> or <b>StringBuffer</b>.\nThe <b>equals()</b> method is not overridden in these classes, so may return false even when the contents of two objects are the same.\nIf reference equality is intended, it's better to use <b>==</b> to avoid confusion.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "GrUnresolvedAccess",
          "displayName": "Access to unresolved expression",
          "enabled": false,
          "description": "<html>\n<body>\n       Reports unresolved references\n</body>\n</html>\n"
        },
        {
          "shortName": "StaticCallOnSubclass",
          "displayName": "Static method referenced via subclass",
          "enabled": false,
          "description": "<html>\n<body>\nReports static method calls where the call is qualified\nby a subclass of the declaring class, rather than the declaring class itself\n(e.g. <b>MyThreadSubclass.sleep()</b>). Java allows such qualification, but such calls\nmay be confusing, and may indicate a subtle confusion of inheritance and overriding.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoVetCopyLock",
          "displayName": "Locks mistakenly passed by value",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for locks mistakenly passed by value.\n<!-- tooltip end -->\n<p> Inadvertently copying a value containing a lock (which is a type implementing <strong>sync/Locker</strong>, such as\n  <strong>sync/Mutex</strong> or <strong>sync/WaitGroup</strong>), may cause both copies to work incorrectly. Generally such values should be\n  referred to through a pointer.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SelfAssignment",
          "displayName": "Assignment of variable to itself",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects assignments of a variable to itself.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinEqualsBetweenInconvertibleTypes",
          "displayName": "'equals()' between objects of inconvertible types",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>equals()</b> between objects of inconvertible primitive / enum / string types.\n</body>\n</html>"
        },
        {
          "shortName": "VariableNotUsedInsideIf",
          "displayName": "Reference checked for 'null' is not used inside 'if'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any references to variables which are checked for nullity\nin the condition of an <b>if</b> statement or\nconditional expression but which are not used inside the\n<b>if</b> statement. Usually this either means that\nthe check is unnecessary or that the variable is not referenced inside the\n<b>if</b> statement because of a typo.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverflowingLoopIndex",
          "displayName": "Loop executes zero or billions times",
          "enabled": false,
          "description": "<html>\n<body>\nReports loops that cannot complete without an index overflow or that don't loop at all.\n<!-- tooltip end -->\nUsually it happens because of a mistake in the update operation\n<p>Example:</p>\n<pre>\n<code>\n  void foo(int s) {\n    for (int i = s; i > 12; i++) { // i-- should be here\n      System.out.println(i);\n    }\n  }\n</code>\n</pre>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "LateinitVarOverridesLateinitVar",
          "displayName": "lateinit var property overrides lateinit var property",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports when one lateinit var property overrides another lateinit var property.\nAn instance of a subclass will have two fields for the single property and the one from a superclass remains effectively unused.\n</body>\n</html>"
        },
        {
          "shortName": "ResultSetIndexZero",
          "displayName": "Use of index 0 in JDBC ResultSet",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempts to access column 0 of a <b>java.sql.ResultSet</b> or <b>java.sql.PreparedStatement</b>. For historical\nreasons columns of <b>java.sql.ResultSet</b>s and <b>java.sql.PreparedStatement</b>s are numbered beginning with 1, rather than\n0, and accessing column 0 is a common error in JDBC programming.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThrowableNotThrown",
          "displayName": "Throwable not thrown",
          "enabled": false,
          "description": "<html>\n<body>\nReports instantiations of <b>Throwable</b> and subclasses, where the created <b>Throwable</b>\nis never actually thrown. Also reports method calls which return <b>Throwable</b> instances,\nwhere the result of the method call is not thrown. These are simple mistakes to make which\nare hard to catch in tests.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantAssertCondition",
          "displayName": "'assert' statement condition is constant",
          "enabled": false,
          "description": "<html>\n<body>\nReports assert statement conditions which are constants. Assert\nstatements with constant conditions will either always fail or always succeed.\nSuch statements can easily be left over after refactoring and are probably a bug.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GrEqualsBetweenInconvertibleTypes",
          "displayName": "'equals()' between objects of inconvertible types",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <strong>.equals()</strong> and <strong>==</strong> operator usages \nwhere the target and argument are of incompatible types. \nWhile such a call might theoretically be useful, most likely it represents a bug.\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousToArrayCall",
          "displayName": "Suspicious 'Collection.toArray()' call",
          "enabled": false,
          "description": "<html>\n<body>\nReports two types of suspicious calls to <b>Collection.toArray()</b>.\nThe first type is any calls where the type of the specified array argument is not of the same type as the array type to which the result is casted.\nExample:\n<pre><code>\nvoid m(List list) {\n  Number[] ns = (Number[])\n      list.toArray(new String[0]);\n}\n</code></pre>\nThe second type is any calls where the type of the specified array argument does not match the type parameter of the collection declaration.\nExample:\n<pre><code>\nvoid m(List&lt;Number&gt; list) {\n  Number[] ns =\n      list.toArray(new String[0]);\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoErrorsAs",
          "displayName": "Incorrect usage of the errors.As function",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that the second argument to errors.As is a pointer to an interface or to a type implementing error.\n<p>See: <a href=\"https://golang.org/pkg/errors/#As\">https://golang.org/pkg/errors/#As</a></p>\n</body>\n</html>"
        },
        {
          "shortName": "CovariantEquals",
          "displayName": "Covariant 'equals()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>equals()</b> methods taking an argument type other than <b>java.lang.Object</b>.\nOnly reports if the containing class does not have another <b>equals()</b> method\nwhich does take <b>java.lang.Object</b> as its argument type. Normally, this is a mistake.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceAllDot",
          "displayName": "Suspicious regex expression argument",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to\n<b>String.replaceAll()</b> or <b>String.split()</b> where the first argument is a single regex meta character argument.\nThe regex meta characters are one of \".$|()[{^?*+\\\", and these have a special meaning in regular expressions.\nFor example calling <b>\"ab.cd\".replaceAll(\".\", \"-\")</b> produces <b>\"-----\"</b>, because the dot matches any character.\nMost likely the escaped variant <b>\"\\\\.\"</b> was intended instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TextLabelInSwitchStatement",
          "displayName": "Text label in 'switch' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports labelled statements inside of <b>switch</b> statements.\nWhile occasionally intended, this construction is often the result of a typo.\n<pre>\n    <b>switch</b> (x) {\n        <b>case</b> 1:\n        case2:   //typo!\n        <b>case</b> 3:\n            <b>break</b>;\n    }\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EmptyRange",
          "displayName": "Range with start greater than endInclusive is empty",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports ranges that are empty because the <b>start</b> value is greater than the <b>endInclusive</b> value.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
          "displayName": "Possibly incorrect target of indexed property access",
          "enabled": false,
          "description": "<html>\n<body>\nReports potentially invalid <b>indexed property access</b> such as <b>Array[1]</b>.\nThe validation works in JavaScript, html, or jsp files.\n</body>\n</html>\n"
        },
        {
          "shortName": "PrimitiveArrayArgumentToVariableArgMethod",
          "displayName": "Confusing primitive array argument to varargs method",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to a variable arity method where the call has a primitive array in\nthe variable arity parameter position (e.g <b>System.out.printf(\"%s\", new int[]{1, 2, 3})</b> ).\nSuch a primitive-array argument may be confusing, as it will be wrapped as a single-element array, rather than each individual\nelement being boxed, as might be expected.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyAccessibility",
          "displayName": "Access to inaccessible element",
          "enabled": false,
          "description": "<html>\n<body>\nReports all references which exceed access rights.\n</body>\n</html>"
        },
        {
          "shortName": "WrapUnaryOperator",
          "displayName": "Ambiguous unary operator use with number constant",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a unary operator followed by a dot qualifier (such as <b>-1.inc()</b>) that is potentially wrong, because it has a lower precedence.\n</body>\n</html>\n"
        },
        {
          "shortName": "CopyConstructorMissesField",
          "displayName": "Copy constructor misses field",
          "enabled": false,
          "description": "<html>\n<body>\nReports copy constructors that don't copy all fields in the class.\nFields with the modifier <b>transient</b> are considered unnecessary to copy.\n<p><small>New in 2018.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "ObjectToString",
          "displayName": "Call to default 'toString()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>.toString()</b>\nwhich use the default implementation from <b>java.lang.Object</b>.\nThe default implementation is rarely desired, but easy to use by accident. Calls\nto <b>.toString()</b> on objects with\n<b>java.lang.Object</b>, interface or abstract class type are ignored by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "HashCodeUsesNonFinalVariable",
          "displayName": "Non-final field referenced in 'hashCode()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of <b>hashcode()</b> which access\nnon-<b>final</b> variables. Such access may result in <b>hashcode()</b>\nreturning different values at different points in an object's lifecycle, which may in turn cause problems when\nusing the standard Collections classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MultipleRepositoryUrls",
          "displayName": "Multiple repository urls",
          "enabled": false,
          "description": "<html>\n<body>\nReports usage of multiple urls per repository(maven or ivy) block.\nThe problem is that no more than one url will be picked up for the repo and others will be ignored.\n</body>\n</html>"
        },
        {
          "shortName": "EmptyStatementBody",
          "displayName": "Statement with empty body",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b>, <b>while</b>, <b>do</b>, <b>for</b> and <b>switch</b> statements\nhaving empty bodies. While occasionally intended, this construction is confusing, and often the result of a typo.\n<!-- tooltip end -->\n<p>\nThis inspection is disabled in JSP files.\n<p>\nUse the first checkbox below to indicate whether this inspection should report statements whose body is an\nempty code block, rather than just empty statements.\n<p>\nUse the second checkbox below to ignore empty statement bodies which contain a comment.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SortedCollectionWithNonComparableKeys",
          "displayName": "Sorted collection with non-comparable elements",
          "enabled": false,
          "description": "<html>\n<body>\nReports construction of sorted collections, for example <code>new TreeSet&lt;&gt;()</code>, that rely on natural ordering,\nbut their element type doesn't implement the <code>Comparable</code> interface.\nIt's unlikely that such a collection will work properly.\n<p>\n  A false positive is possible if the collection element is a non-comparable super-type,\n  but it's intended to hold only comparable sub-types. This is however error-prone.\n  It's better to narrow the collection element type or declare the super-type as <code>Comparable</code>.\n</p>\n<!-- tooltip end -->\n<p>\n  The inspection also reports cases when the collection element is a type parameter which is not declared as <code>extends Comparable</code>.\n  You can suppress the warnings on type parameters using the provided option (for example, to keep the API compatibility).\n</p>\n<p>\n  <small>New in 2018.3</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "GoDeferGo",
          "displayName": "Defer/go statement calls recover or panic directly",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports <strong>defer</strong> and <strong>go</strong> statements that call <strong>recover()</strong> or <strong>panic()</strong> directly.\n<p>See <a href=\"https://golang.org/ref/spec#Handling_panics\">Handling panics</a> and <a href=\"https://golang.org/ref/spec#Go_statements\">Go statements</a>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousNameCombination",
          "displayName": "Suspicious variable/parameter name combination",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments and function calls where the name of the variable to which\na value is assigned or the function parameter does not seem to match the name of the value assigned to it.\nFor example:\n<pre><code><font color=\"#000080\">\n  <b>int</b> x = 0;\n  <b>int</b> y = x;</font></code></pre> or <pre><code><font color=\"#000080\">\n  <b>int</b> x = 0, y = 0;\n  Rectangle rc = <b>new</b> Rectangle(y, x, 20, 20);</font></code></pre>\nThe configuration pane allows to specify the names which should not be used together: the error is reported\nif the parameter name or assignment target name contains words from one group and the name of the assigned or passed\nvariable contains words from a different group.\n</body>\n</html>"
        },
        {
          "shortName": "InvalidComparatorMethodReference",
          "displayName": "Invalid method reference used for Comparator",
          "enabled": false,
          "description": "<html>\n<body>\nReports method references mapped to Comparator interface which don't fulfill its contract.\n<p>\nSome method references like <code>Integer::max</code> can be mapped to <code>Comparator</code> interface.\nHowever using them as <code>Comparator</code> is meaningless and result might be unpredictable.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StringTokenizerDelimiter",
          "displayName": "Duplicated delimiters in java.util.StringTokenizer",
          "enabled": false,
          "description": "<html>\n<body>\nReports StringTokenizer delimiter arguments which contain duplicated characters.\n</body>\n</html>"
        },
        {
          "shortName": "StringEquality",
          "displayName": "String comparison using '==', instead of 'equals()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any use of <b>==</b> or <b>!=</b> to test for String equality,\ninstead of an <b>equals()</b> call.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoShift",
          "displayName": "Exceeded shift expression",
          "enabled": false,
          "description": "<html>\n<body>\nChecks shift expressions that equal or exceed the width of the integer.\n</body>\n</html>"
        },
        {
          "shortName": "EqualsWithItself",
          "displayName": "'equals()' called on itself",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>equals()</b> or <b>compareTo()</b> were an object is compared for equality with itself.\nThis means the argument and the qualifier to the call are identical, and it will always return <b>true</b> for <b>equals()</b>\nor always <b>0</b> for <b>compareTo()</b>.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ControlFlowWithEmptyBody",
          "displayName": "Control flow with empty body",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports that <b>if</b>, <b>when</b>, <b>for</b>, <b>while</b> and also expressions has empty body.\n</body>\n</html>"
        },
        {
          "shortName": "JSConsecutiveCommasInArrayLiteral",
          "displayName": "Consecutive commas in array literal",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that array literal doesn't contain consecutive commas. Skipped element takes <b>undefined</b> value,\nbut it could be done unintentionally, e.g. when commas are at the end of one line and at the beginning of the following.\n</body>\n</html>"
        },
        {
          "shortName": "NewStringBufferWithCharArgument",
          "displayName": "StringBuilder constructor call with 'char' argument",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>new StringBuffer()</b>\nand <b>new StringBuilder()</b> calls with an argument\nof type <b>char</b>. Such an argument is silently\ncast to an integer and interpreted as initial capacity of the buffer. Usually this is\nnot what was intended.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousDateFormat",
          "displayName": "Suspicious date format pattern",
          "enabled": false,
          "description": "<html>\n<body>\nReports date format patterns that are likely used by mistake.\nUsages of the following patterns are reported:\n<ul>\n  <li>Uppercase \"Y\", unless \"w\" appears nearby because it's a \"Week year\" that almost always \n    the same as normal \"Year\" (lowercase \"y\" pattern), but may point to the next year\n    at the end of December.</li>\n  <li>Uppercase \"M\" (month) close to \"H\", \"K\", \"h\", or \"k\" (hour). It's likely that a lowercase \"m\" (minute) was intended</li>\n  <li>Lowercase \"m\" (minute) close to \"y\" (year) or \"d\" (day in month). It's likely that an uppercase \"M\" (month) was intended</li>\n  <li>Uppercase \"D\" (day in year) close to \"M\", or \"L\" (month). It's likely that a lowercase \"d\" (day in month) was intended</li>\n  <li>Uppercase \"S\" (milliseconds) close to \"m\" (minutes). It's likely that a lowercase \"s\" (seconds) was intended</li>\n</ul>\n<p>\n  Examples:<br>\n  <code>new SimpleDateFormat(\"YYYY-MM-dd\")</code>: likely <code>\"yyyy-MM-dd\"</code> was intended.<br>\n  <code>new SimpleDateFormat(\"yyyy-MM-DD\")</code>: likely <code>\"yyyy-MM-dd\"</code> was intended.<br>\n  <code>new SimpleDateFormat(\"HH:MM\")</code>: likely <code>\"HH:mm\"</code> was intended.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2020.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ResultOfObjectAllocationIgnored",
          "displayName": "Result of object allocation ignored",
          "enabled": false,
          "description": "<html>\n<body>\nReports object allocations where the object allocated is ignored, and not assigned to a variable or used in another way.\nSuch allocation expressions are legal Java, but are usually either inadvertent, or\nevidence of a very odd object initialization strategy.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousMethodCalls",
          "displayName": "Suspicious collections method calls",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports method calls to parameterized collections, where actual argument type does not\ncorrespond to the collection's elements type. <br> <br>\nFor example if you have the following code: <br> \n<pre>\n&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Integer&gt; list = getListOfElements();\n&nbsp;&nbsp;&nbsp;&nbsp;list.remove(\"\");\n</pre>\n\n- the call to <b><font color=\"#000080\">remove()</font></b> will be highlighted. <br>\n\n<p>\n\n  The option '<b>Report suspicious but possibly correct method calls</b>' makes it possible to ignore\n  potentially correct code, like this: <br>\n\n  <pre>\n&nbsp;&nbsp;&nbsp;&nbsp;Number number = <b><font color=\"#000080\">new</font></b> Integer(<font color=\"#0000FF\">0</font>);\n&nbsp;&nbsp;&nbsp;&nbsp;list.remove(number));\n  </pre>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ForLoopThatDoesntUseLoopVariableJS",
          "displayName": "'for' loop where update or condition does not use loop variable",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b> loops where the condition or update does not use the <b>for</b> loop variable.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSSuspiciousNameCombination",
          "displayName": "Suspicious name combination",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments and function calls where the name of the variable to which\na value is assigned or the function parameter does not seem to match the name of the value assigned to it.\nFor example:\n<pre><code>\n  <b>var</b> x = 0;\n  <b>var</b> y = x;</code></pre> or <pre><code>\n  <b>var</b> x = 0, y = 0;\n  <b>var</b> rc = <b>new</b> Rectangle(y, x, 20, 20);</code></pre>\nThe configuration pane allows to specify the names which should not be used together: the error is reported\nif the parameter name or assignment target name contains words from one group and the name of the assigned or passed\nvariable contains words from a different group.\n</body>\n</html>"
        },
        {
          "shortName": "CssUnitlessNumber",
          "displayName": "Missing measure unit",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights CSS number property values for which no units\nof measurement are specified.\n</body>\n</html>"
        },
        {
          "shortName": "ConvertNaNEquality",
          "displayName": "Convert equality check with 'NaN' to 'isNaN' call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports an equality check with <b>Double.NaN</b> which can be replaced with <b>a.isNaN()</b>.\n\nFor every floating point value <b>a</b>, <b>a == NaN</b> will always result in <b>false</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "NullArgumentToVariableArgMethod",
          "displayName": "Confusing argument to varargs method",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to a variable arity method where the call has a single argument\nin the variable arity parameter position, which is either a <b>null</b> or an array of a subtype of the variable arity parameter.\nSuch an argument may be confusing as it is unclear if a varargs or non-varargs call is desired.\nFor example <code>System.out.printf(\"%s\", null)</code>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoStructTag",
          "displayName": "Malformed struct tag",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2015 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports that the  struct tags conforms to <a href=\"https://golang.org/pkg/reflect/#StructTag\">Go conventions</a>.\n\n<p>According to these conventions, tag strings are a concatenation of optionally space-separated <strong>key:\"value\"</strong> pairs. Each\nkey is a non-empty string consisting of non-control characters other than <strong>space (U+0020 ' ')</strong>, <strong>quote (U+0022 '\"')</strong>, and\n<strong>colon (U+003A ':')</strong>. Each value is quoted using <strong>U+0022 '\"'</strong> characters and Go string literal syntax.</p>\n\n<p>Also, checks that fields with tags are exported.</p>\n\n<p>Example of a good tag is:</p>\n<pre>\n    type Example struct {\n        Field int `json:\"field\" xml:\"demo\"`\n    }\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "SelfReferenceConstructorParameter",
          "displayName": "Constructor has non-null self reference parameter",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports constructor that has a non-null self reference parameter. A class with such a constructor can never be instantiated.\n</body>\n</html>"
        },
        {
          "shortName": "GoReservedWordUsedAsName",
          "displayName": "Reserved word used as name",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports declarations of variables, arguments or functions that overlap with the built-in or reserved keyword.\n<p>If you receive this error then your code might not be as explicit as possible and might confuse other users.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "MoveSuspiciousCallableReferenceIntoParentheses",
          "displayName": "Suspicious callable reference used as lambda result",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a lambda expression with one callable reference because it is a common error to replace a lambda with a callable reference without changing curly braces to parentheses.\n</body>\n</html>\n"
        },
        {
          "shortName": "CoffeeScriptSwitchStatementWithNoDefaultBranch",
          "displayName": "'switch' statement with no default branch",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports any <b><font color=\"#000080\">switch</font></b> statements in CoffeeScript content which\nlack <b><font color=\"#000080\">default</font></b> branches.  Such statements\nmay result in difficult bugs, if unexpected cases are silently ignored.\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousSystemArraycopy",
          "displayName": "Suspicious 'System.arraycopy()' call",
          "enabled": false,
          "description": "<html>\n<body>\nReports suspicious calls to <b>System.arraycopy()</b>.\nWarnings reported by this inspection are:\n<ul>\n<li>source or destination which are not of an array type.\n<li>source and destination have a different type.\n<li>copied chunk length is always bigger than src.length - srcPos.\n<li>copied chunk length is always bigger than dest.length - destPos.\n<li>ranges always intersect in case, when source and destination is the same array.\n</ul>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReflectionForUnavailableAnnotation",
          "displayName": "Reflective access to a source-only annotation",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempts to reflectively check for the presence of an\nannotation which is not defined as being retained at runtime.\nUsing <b>Class.isAnnotationPresent()</b> to test for an annotation\nwhich has source retention or class-file retention (the default) will always result in a negative result,\nbut is easy to do inadvertently.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DataClassPrivateConstructor",
          "displayName": "Private data class constructor is exposed via the 'copy' method",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports private constructors of data classes because they are always exposed via the generated <b>copy</b> method.\n</body>\n</html>"
        },
        {
          "shortName": "GoVetAtomic",
          "displayName": "Incorrect usage of the sync/atomic package",
          "enabled": false,
          "description": "<html>\n<body>\nReports common mistaken usages of the <strong>sync/atomic</strong> package.\n</body>\n</html>"
        },
        {
          "shortName": "ForEachParameterNotUsed",
          "displayName": "Iterated elements are not used in forEach",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection guards against useless forEach loops by identifying when the iterable's values are not used.\n</body>\n</html>"
        },
        {
          "shortName": "MismatchedStringBuilderQueryUpdate",
          "displayName": "Mismatched query and update of StringBuilder",
          "enabled": false,
          "description": "<html>\n<body>\nReports any StringBuilder or StringBuffer fields or variables whose contents are read but not written,\nor written but not read. Such mismatched reads and writes are pointless, and probably indicate\ndead, incomplete or erroneous code.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "Contract",
          "displayName": "Contract issues",
          "enabled": false,
          "description": "<html>\n<body>\nReports various method contract (@Contract annotation) well-formedness issues:\n<li>Errors in contract syntax</li>\n<li>Contracts not conforming to the method signature (wrong parameter count)</li>\n<li>Method implementations that contradict the contract (e.g. returning \"true\" when the contract says \"false\")</li>\n</body>\n</html>"
        },
        {
          "shortName": "KDocUnresolvedReference",
          "displayName": "Unresolved reference in KDoc",
          "enabled": false,
          "description": "<html><body>\nThis inspection reports unresolved references in KDoc comments.\n</body></html>"
        },
        {
          "shortName": "GoImportUsedAsName",
          "displayName": "Imported package name as name identifier",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports declarations of variables, arguments or functions that overlap with the used import.\n<p>While legal, such declarations will make using the package exported identifiers impossible after the declaration or create confusion when reading the code.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassGetClass",
          "displayName": "Class.getClass() call",
          "enabled": false,
          "description": "<html>\n<body>\nReports when <b>getClass()</b> method is called on <b>java.lang.Class</b> instance. This is usually a mistake as the result is\n  always equivalent to <b>Class.class</b>. If it's mistake then the <b>getClass()</b> call should be removed and qualifier should be used\n  directly. If the behavior is intended, then it's better to write <b>Class.class</b> explicitly to avoid confusion.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CoffeeScriptModulesDependencies",
          "displayName": "Missing import statement",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that all modules are referenced through <b>import</b> statements.\n<p>Suggests inserting the import statement.</p>\n</body>\n</html>"
        },
        {
          "shortName": "MagicConstant",
          "displayName": "Magic Constant",
          "enabled": false,
          "description": "<html>\n<body>\nReport occurrences where usages of \"magic\" constants are preferred\nbut other expressions are used instead. <br>\nE.g.\n\n<br> <br>\n\n<code>// bare literal used, warning:</code><br>\n<code><b>new </b> Font(\"Arial\", <span style=\"background-color: yellow;\"><b>2</b></span>)</code><br>\n\n<br>\ninstead of<br> <br>\n\n<code>// \"magic\" constant used, good:</code><br>\n<code><b>new </b> Font(\"Arial\", Font.<b>ITALIC</b>)</code><br>\n\n<br> <br>\n\nPlease see <code>org.intellij.lang.annotations.MagicConstant</code> annotation description for details.\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousIndentAfterControlStatement",
          "displayName": "Suspicious indentation after control statement without braces",
          "enabled": false,
          "description": "<html>\n<body>\nReports any suspicious indentation of statements after a control statement\nwithout braces. Such indentation can make it look like the statement is part of the control\nstatement, when in fact it will be executed after the control statement.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofIncompatibleInterface",
          "displayName": "'instanceof' with incompatible interface",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>instanceof</b> expressions where\nthe compared type is an interface, and the compared expression has a class type which neither\nimplements the compared interface, nor has any visible subclasses which implement or extend the compared interface.\nWhile it is possible that this was intended, such a construct is most likely an error, where\nthe resulting <b>instanceof</b> expression always evaluates to\n<b>false</b>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CollectionAddedToSelf",
          "displayName": "Collection added to self",
          "enabled": false,
          "description": "<html>\n<body>\nReports cases where the argument of a method call on a <b>java.util.Collection</b>\nor <b>java.util.Map</b> is the collection or map itself.\nThis includes adding a collection to itself, which can lead to a <b>java.lang.StackOverflowError</b> when,\nfor example, calling <b>hashCode()</b> on the self-containing collection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MainFunctionReturnUnit",
          "displayName": "Entry point function should return Unit",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a entry point function with incorrect return type (should be <b>Unit</b>).\n</body>\n</html>\n"
        },
        {
          "shortName": "InstantiationOfUtilityClass",
          "displayName": "Instantiation of utility class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>new</b> expressions which instantiate utility classes.\nUtility classes have all fields and methods declared <b>static</b>, and their\npresence may indicate a lack of object-oriented design. Instantiation of such classes most likely indicates\nprogrammer error.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassNewInstance",
          "displayName": "Unsafe call to 'Class.newInstance()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to\n<b>java.lang.Class.newInstance()</b>.\nThe <b>newInstance</b> method propagates any\nexception thrown by the no-arg constructor, including checked exceptions. Use\nof this method effectively bypasses the compile-time exception checking that\nwould otherwise be performed by the compiler. Replacing such a method call with\na call to the <b>java.lang.reflect.Constructor.newInstance()</b>\nmethod avoids this problem by wrapping any exception thrown by the constructor\nin a <b>java.lang.reflect.InvocationTargetException</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnusedAssignment",
          "displayName": "Unused assignment",
          "enabled": false,
          "description": "<html>\n<body>\nPoints out cases where a variable value\nis never used after its assignment, i.e.: <br>\n&nbsp;- the variable never gets read after assignment OR <br>\n&nbsp;- the value is always overwritten with another assignment before the next variable read OR <br>\n&nbsp;- the variable initializer is redundant (for one of the above two reasons)\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantModifiersValueLombok",
          "displayName": "Redundant modifiers on @Value lombok annotations inspection",
          "enabled": false,
          "description": "<html lang=\"en\">\n<body>\n<span style=\"font-family: verdana,serif; font-size: smaller;\">Inspection for Lombok @Value annotation and redundant modifiers</span>\n</body>\n</html>\n"
        },
        {
          "shortName": "ArrayEquality",
          "displayName": "Array comparison using '==', instead of 'Arrays.equals()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any use of <b>==</b> or <b>!=</b> to test for array equality,\nrather than the <b>java.util.Arrays.equals()</b> method.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyRangeTypeCheck",
          "displayName": "Incorrect range arguments",
          "enabled": false,
          "description": "<html>\n<body>\nReports types used in ranges that do not have a <b>next()</b> or <b>previous()</b> method\nor do not implement the <b>java.lang.Comparable</b> interface.\n</body>\n</html>\n"
        },
        {
          "shortName": "CompareToUsesNonFinalVariable",
          "displayName": "Non-final field referenced in 'compareTo()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any implementations of <b>compareTo()</b> which access\nnon-<b>final</b> variables. Such access may result in <b>compareTo()</b>\nreturning different results at different points in an object's lifecycle, which may in turn cause problems when\nusing the standard Collections classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DeferredResultUnused",
          "displayName": "Deferred result is never used",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls with <b>Deferred</b> result that is never used,\nso nobody will wait for execution of all related actions.\n</body>\n</html>"
        },
        {
          "shortName": "ArrayInDataClass",
          "displayName": "Array property in data class",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports array properties in a data class without overridden <b>equals()</b> or <b>hashCode()</b> inside.\nDue to default <b>equals()</b> behaviour for arrays in JVM, it is strongly recommended to override <b>equals()</b> and <b>hashCode()</b> in such cases.\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspendFunctionOnCoroutineScope",
          "displayName": "Ambiguous coroutineContext due to CoroutineScope receiver of suspend function",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls & accesses of <b>CoroutineScope</b> extensions or members\ninside suspend functions with <b>CoroutineScope</b> receiver.\n\nBoth suspend functions and <b>CoroutineScope</b> members & extensions have access to <b>coroutineContext</b>.\nWhen some function is simultaneously suspend <b>and</b> has <b>CoroutineScope</b> receiver,\nit has ambiguous access to <b>CoroutineContext</b>:\nfirst via <b>kotlin.coroutines.coroutineContext</b> and second via <b>CoroutineScope.coroutineContext</b>,\nand two these contexts are different in general case.\nSo when we call some <b>CoroutineScope</b> extension or access <b>coroutineContext</b> from such a function,\nit's unclear which from these two context do we have in mind.\n\nNormal ways to fix this are to wrap suspicious call inside <b>coroutineScope { ... }</b> or\nto get rid of <b>CoroutineScope</b> function receiver.\n</body>\n</html>"
        },
        {
          "shortName": "DelegationToVarProperty",
          "displayName": "Delegating to 'var' property",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports delegation to <b>var</b> property.\nIn fact, only starting value of <b>var</b> property is used for delegation so it's not recommended to do so.\n</body>\n</html>\n"
        },
        {
          "shortName": "CoffeeScriptArgumentsOutsideFunction",
          "displayName": "Arguments object outside function",
          "enabled": false,
          "description": "<html>\n<body>\nChecks if arguments object used outside function\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitNullableNothingType",
          "displayName": "Implicit `Nothing?` type",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports variables / functions with implicit <b>Nothing?</b> type.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSEqualityComparisonWithCoercion",
          "displayName": "Equality operator may cause type coercion",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of equality operators which may cause unexpected type coercions.\nIt is considered a good practice to use the type-safe equality operators <b>===</b> and <b>!==</b>\ninstead of their regular counterparts <b>==</b> and <b>!=</b>.\n\n<p>Depending on the option selected, this will either highlight:</p>\n\n<ul>\n  <li>\n    All usages of <b>==</b> and <b>!=</b> operators.\n  </li>\n  <li>\n    All usages except comparison with null. Some code styles allow using <b>x == null</b> as a replacement for\n    <b>x === null || x === undefined</b>.\n  </li>\n  <li>\n    Only suspicious expressions, such as: <b>==</b> or <b>!=</b> comparisons\n    to <b>0</b>, <b>''</b>,\n    <b>null</b>, <b>true</b>,\n    <b>false</b>, or <b>undefined</b>.\n  </li>\n</ul>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedLambdaExpressionBody",
          "displayName": "Unused return value of a function with lambda expression body",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls with an unused return value when the called function returns a lambda from an expression body.\nThis can happen when someone accidentally puts <b>=</b> between function header and body block.\n</body>\n</html>\n"
        },
        {
          "shortName": "DivideByZeroJS",
          "displayName": "Division by zero",
          "enabled": false,
          "description": "<html>\n<body>\nReports division by zero or remainder by zero.\n</body>\n</html>\n"
        },
        {
          "shortName": "OverwrittenKey",
          "displayName": "Overwritten Map key or Set element",
          "enabled": false,
          "description": "<html>\n<body>\nWarns if <code>Map</code> key or <code>Set</code> element was overwritten in the sequence of add/put calls or using a Java 9 factory method\nlike <code>Set.of</code> (which will result in runtime exception). This usually occurs due to copy-paste error. Example:\n<pre>\n  map.put(\"A\", 1);\n  map.put(\"B\", 2);\n  map.put(\"C\", 3);\n  map.put(\"D\", 4);\n  map.put(\"A\", 5); // duplicating key \"A\", overwrites previously written entry\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2017.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CssNoGenericFontName",
          "displayName": "Missing generic font name",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection verifies that the CSS <b>font-family</b> property contains a generic font name as a fallback alternative.\n</body>\n</html>"
        },
        {
          "shortName": "ArrayObjectsEquals",
          "displayName": "'Objects.equals()' called on arrays",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>java.util.Objects.equals()</b> called on two arrays.\nCalling <b>java.util.Objects.equals()</b> with array arguments compares identity and is equivalent to using <b>==</b>.\nUse <b>Arrays.equals()</b> to compare the contents of two arrays\nor <b>Arrays.deepEquals()</b> to compare the contents of two multi-dimensional arrays.\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousVarProperty",
          "displayName": "Suspicious 'var' property: its setter does not influence its getter result",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>var</b> properties with default setter and getter that doesn't reference backing field.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyInfiniteRecursion",
          "displayName": "Infinite recursion",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods which must either recurse\ninfinitely or throw an exception. Methods reported by this inspection can not\nreturn normally.\n</body>\n</html>\n"
        },
        {
          "shortName": "SetterBackingFieldAssignment",
          "displayName": "Existing backing field is not assigned by the setter",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a setter of a property with a backing field that doesn't update the backing field.\n</body>\n</html>"
        },
        {
          "shortName": "ArrayHashCode",
          "displayName": "'hashCode()' called on array",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>hashCode()</b> being called\non an array. To get the same hash code for two arrays\nwith identical contents call <b>Arrays.hashCode()</b>.\nUse <b>Arrays.deepHashCode()</b> to calculate the hash\ncode of a multi-dimensional array.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GoLoopClosure",
          "displayName": "Loop variables captured by func literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports references to loop variables from within nested functions.\n<!-- tooltip end -->\n<p>This analyzer checks for references to loop variables from within a\n  function literal inside the loop body. It checks only instances where\n  the function literal is called in a defer or go statement that is the\n  last statement in the loop body.</p>\n\n<p>See: <a href=\"https://golang.org/doc/go_faq.html#closures_and_goroutines\">Go Closures and Goroutines FAQ</a></p>\n</body>\n</html>"
        },
        {
          "shortName": "GoVetUnmarshal",
          "displayName": "Unmarshal is called with incorrect argument",
          "enabled": false,
          "description": "<html>\n<body>\nAnalyzes calls to functions such as <strong>json.Unmarshal</strong>. Reports a problem if the argument\nthat is passed to store the result is not a pointer or an interface. Such calls are guaranteed to fail and return an error.\n<!-- tooltip end -->\n<p>See: <a href=\"https://golang.org/pkg/encoding/json/#Unmarshal\">https://golang.org/pkg/encoding/json/#Unmarshal</a></p>\n</body>\n</html>"
        },
        {
          "shortName": "MismatchedCollectionQueryUpdate",
          "displayName": "Mismatched query and update of collection",
          "enabled": false,
          "description": "<html>\n<body>\nReports collection fields or variables whose contents are either queried and\nnot updated, or updated and not queried. Such mismatched queries and updates are pointless, and may indicate\neither dead code or a typographical error.\n<!-- tooltip end -->\n<p>\nUse the tables below to specify which methods are update and/or query methods. The names are matched with\nthe beginning of the method name. Query methods which return their result are automatically detected, only\nquery methods which return their result in an argument (e.g. write to OutputStream) need to be specified.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoNilness",
          "displayName": "Nilness analyzer",
          "enabled": false,
          "description": "<html>\n<body>\nReports problems caused by incorrect use of <strong>nil</strong> value.\n\n<p>Analyses the data flow to determine if variables could have <strong>nil</strong> or not <strong>nil</strong> values.\nBased on this, reports potential bugs in the code. For example:</p>\n<ul>\n  <li>Method calls with <strong>nil</strong> receiver could lead to 'nil pointer dereference'.</li>\n  <li><strong>nil</strong> slice indexing could cause panics.</li>\n  <li>Comparisons like <strong>v == nil</strong> could be meaningless if <strong>v</strong> is known to be always <strong>nil</strong> or not <strong>nil</strong>.</li>\n  <li>Variable has a corresponding error and it is not checked to be not <strong>nil</strong>. An error corresponds to a variable when they are defined or assigned together in statements like <strong>v, err := foo()</strong>.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "MalformedXPath",
          "displayName": "Malformed XPath expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports malformed XPath expressions. XPath expressions\nare reported if they are compile-time constants used as arguments to appropriate methods on\n<b>javax.xml.xpath.XPath</b> and do not fit the standard XPath syntax.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JSConstructorReturnsPrimitive",
          "displayName": "Constructor returns primitive value",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that function recognized as constructor does not return primitive values.\nWhen called with <b>new</b> , this value will be lost and object will be returned instead. To avoid warnings, you can explicitly specify\nfunction's return type with <b>@return</b> tag.\n</body>\n</html>"
        },
        {
          "shortName": "CastToIncompatibleInterface",
          "displayName": "Casting to incompatible interface",
          "enabled": false,
          "description": "<html>\n<body>\nReports type cast expressions where\nthe cast type is an interface, and the cast expression has a class type which neither\nimplements the cast interface, nor has any visible subclasses which implement or extend the cast interface.\nWhile it is possible that this was intended, such a construct is most likely an error, and will\nresult in a <b>java.lang.ClassCastException</b> at runtime.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EqualsOrHashCode",
          "displayName": "equals() and hashCode() not paired",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports classes that override <b>equals()</b> but do not override <b>hashCode()</b>, or vice versa, which could potentially lead to problems when a class is added to a <b>Collection</b>.\nIt also reports object declarations which override either <b>equals()</b> or <b>hashCode()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "EqualsAndHashcode",
          "displayName": "'equals()' and 'hashCode()' not paired",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that override the\n<b><font color=\"#000080\">equals()</font></b> method but do not override the\n<b><font color=\"#000080\">hashCode()</font></b> method, or vice versa, which could potentially lead to problems\nwhen the class is added to a <b><font color=\"#000080\">Collection</font></b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnsafeCastFromDynamic",
          "displayName": "Implicit (unsafe) cast from dynamic type",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports expressions with a dynamic type in the specified inspection scope that are implicitly cast to another type.\n</body>\n</html>\n"
        },
        {
          "shortName": "ArrayEquals",
          "displayName": "'equals()' called on array",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>equals()</b> being called\nto compare two arrays. Calling <b>equals()</b> on an array\ncompares identity and is equivalent to using <b>==</b>. Use\n<b>Arrays.equals()</b> to compare the contents of two arrays\nor <b>Arrays.deepEquals()</b> to compare the content of two\nmulti-dimensional arrays.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "CoffeeScriptLiteralNotFunction",
          "displayName": "Literal is not a function",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports when literal expression used as function call.\n\n</body>\n</html>\n"
        },
        {
          "shortName": "MathRandomCastToInt",
          "displayName": "'Math.random()' cast to 'int'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>Math.random()</b> which are immediately\ncast to <b>int</b>. Casting a <b>double</b> between <b>0.0</b> (inclusive) and\n<b>1.0</b> (exclusive) will always round down to zero. A <b>Math.random()</b> value\nshould first be multiplied with some factor before casting it to an <b>int</b> to\nget a value between zero (inclusive) and the multiplication factor (exclusive).\nAnother possible solution would be to use the <b>nextInt()</b> method of\n<b>java.util.Random</b>.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "DeprecatedLombok",
          "displayName": "Deprecated lombok annotations inspection",
          "enabled": true,
          "description": "<html lang=\"en\">\n<body>\n<span style=\"font-family: verdana,serif; font-size: smaller;\">Inspection for deprecated experimental lombok annotations,\n  which are not supported any more and which should be replaced by ones promoted to main package.</span>\n</body>\n</html>\n"
        },
        {
          "shortName": "InnerClassReferencedViaSubclass",
          "displayName": "Inner class referenced via subclass",
          "enabled": false,
          "description": "<html>\n<body>\nReports accesses of inner and nested classes where the call is qualified\nby a subclass of the declaring class, rather than the declaring class itself. Java\nallows such qualification, but such accesses\nmay be confusing, and may indicate a subtle confusion of inheritance and overriding.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnusedUnaryOperator",
          "displayName": "Unused unary operator",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports unary operators that are not used.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Class structure",
      "inspections": [
        {
          "shortName": "NoopMethodInAbstractClass",
          "displayName": "No-op method in abstract class",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"no-op\" methods in <b>abstract</b> classes. It is usually a better\ndesign to make such methods <b>abstract</b> themselves, so that classes which inherit the methods will not forget to provide\ntheir own implementations.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinalClass",
          "displayName": "'final' class",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes being declared <b>final</b>. Some coding\nstandards discourage <b>final</b> classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LimitedScopeInnerClass",
          "displayName": "Limited-scope inner class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any limited-scope inner classes. Some code standards discourage\nthe use of limited-scope inner classes, and they are unusual enough as to possibly be\nconfusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassNameDiffersFromFileName",
          "displayName": "Class name differs from file name",
          "enabled": false,
          "description": "<html>\n<body>\nReports top-level class names which do not match the name of\ntheir containing file. While the Java specification allows such naming for non-<b>public</b> classes,\nsuch misnamed files can be confusing, and may degrade the usefulness of various\nsoftware tools.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FieldCanBeLocal",
          "displayName": "Field can be local",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection searches for redundant class fields that can be replaced with local variables.\nIf all local usages of a field are preceded by assignments to that field, the\nfield can be removed and its usages replaced with local variables.\n</body>\n</html>\n"
        },
        {
          "shortName": "PublicConstructor",
          "displayName": "'public' constructor",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>public</b> constructors. Some coding standards discourage <b>public</b> constructors, preferring to use\n<b>static</b> factory methods. This way the implementation can be swapped out without affecting the call sites.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalFieldInEnum",
          "displayName": "Non-'final' field in enum",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>final</b> fields in enumeration types. A non-<b>final</b> field in an enum is rarely needed.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceMayBeAnnotatedFunctional",
          "displayName": "Interface may be annotated @FunctionalInterface",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>interface</b> that may be annotated as <b>@FunctionalInterface</b>, which is available in JDK 1.8.\nAnnotating an interface with <b>@FunctionalInterface</b> can be useful to indicate that the interface is supposed to be functional and\nfurther <b>abstract</b> methods should not be added to it.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "EmptyClass",
          "displayName": "Empty class",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty classes and Java files without any defined classes. A class is empty if it\ndoesn't have any fields, methods, constructors or initializers. Empty classes are often left over\nafter large changes or refactorings.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Classes annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\nUse the first checkbox below to ignore classes which parameterize a super class, for example\n<pre><code><b>class</b> MyList <b>extends</b> ArrayList&lt;String&gt; {}</code></pre>\n<p>\nUse the second checkbox below to ignore classes which extend <b>java.lang.Throwable</b>.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassMayBeInterface",
          "displayName": "Abstract class may be interface",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>abstract</b> classes which can be converted to interfaces.\nA class may be converted to an interface if it has no superclass (other\nthan Object), has no fields declared that are not <b>static</b>, <b>final</b>, and <b>public</b>, and has no\nmethods declared that are not <b>public</b> and <b>abstract</b> and no inner classes that are not <b>public</b>.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to report classes containing <b>static</b> methods and non-abstract methods which can be converted to <b>default</b>\n  methods, when using a language level of 8 or higher .\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinalMethod",
          "displayName": "'final' method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods being declared <b>final</b>. Some coding\nstandards discourage <b>final</b> methods.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParameterCanBeLocal",
          "displayName": "Parameter can be local",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection searches for redundant method parameters that can be replaced with local variables.\nIf all local usages of a parameter are preceded by assignments to that parameter, the\nparameter can be removed and its usages replaced with local variables.\n</body>\n</html>\n"
        },
        {
          "shortName": "Singleton",
          "displayName": "Singleton",
          "enabled": false,
          "description": "<html>\n<body>\nReports singleton classes.\nSingleton classes are declared so that only one instance of the\nclass may ever be instantiated. Singleton classes complicate testing,\nand their presence may indicate a lack of object-oriented design.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinalMethodInFinalClass",
          "displayName": "'final' method in 'final' class",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods being declared <b>final</b> in\nclasses that are declared <b>final</b>. This is unnecessary, and may be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UtilityClassWithPublicConstructor",
          "displayName": "Utility class with 'public' constructor",
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes with <b>public</b> constructors. Utility\nclasses have all fields and methods declared <b>static</b>. Giving such classes a <b>public</b>\nconstructor is confusing, and may lead to the class being inadvertently instantiated.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UtilityClass",
          "displayName": "Utility class",
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes.\nUtility classes have all fields and methods declared <b>static</b>, and their\npresence may indicate a lack of object-oriented design.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Classes annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MarkerInterface",
          "displayName": "Marker interface",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"marker\" interfaces which have no methods or fields.\nSuch interfaces may be confusing, and normally indicate a design failure.\nInterfaces which extend two or more other interfaces or interfaces\nwhich specialize the generic type of their superinterface will not be reported by\nthis inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantDeclaredInAbstractClass",
          "displayName": "Constant declared in abstract class",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any constants (i.e. <b>public static final</b> fields) declared in abstract\nclasses. Some coding standards require that constants be declared in interfaces instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ProtectedMemberInFinalClass",
          "displayName": "'protected' member in 'final' class",
          "enabled": false,
          "description": "<html>\n<body>\nReports members being declared <b>protected</b> in\nclasses that are declared <b>final</b>. Such members may be declared <b>private</b>\nor package-visible instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodReturnAlwaysConstant",
          "displayName": "Method returns per-class constant",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods which only ever return a constant, probably different for different inheritors.\nBecause this inspection requires global code analysis it is only available for <em>Analyze|Inspect Code</em> or\n<em>Analyze|Run Inspection by Name</em> and it will not report in the editor.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UtilityClassCanBeEnum",
          "displayName": "Utility class can be 'enum'",
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes that can be converted to an <b>enum</b>.\nTo avoid code coverage problems in <b>private</b> constructors, some coding styles mandate that utility classes are implemented as enums.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "InnerClassOnInterface",
          "displayName": "Inner class of interface",
          "enabled": false,
          "description": "<html>\n<body>\nReports inner classes\nof <b>interface</b> classes. Some coding standards\ndiscourage such classes. Enumeration classes and annotation classes are not reported\nby this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticNonFinalField",
          "displayName": "'static', non-'final' field",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>final</b> <b>static</b> fields.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection only report on <b>public</b> fields.\n</body>\n</html>"
        },
        {
          "shortName": "ConstantDeclaredInInterface",
          "displayName": "Constant declared in interface",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any constants (i.e. <b>public static final</b> fields) declared in interfaces.\nSome coding standards require that constants be declared in abstract classes instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithOnlyPrivateConstructors",
          "displayName": "Class with only 'private' constructors should be declared 'final'",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes with only <b>private</b> constructors.\nSuch a class cannot be extended outside its containing file and should be declared <b>final</b>.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassInitializer",
          "displayName": "Non-'static' initializer",
          "enabled": false,
          "description": "<html>\n<body>\nReports any non-<b>static</b> initializers\nin classes. Some coding standards prohibit instance initializers, preferring initialization to be done\nin constructors or field initializers. Non-<b>static</b> initializers\nmay also be inadvertently created by deleting the <b>static</b> keyword,\nresulting in obscure bugs.\nThis inspection does not warn on instance initializers in anonymous classes.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore instance initializers in classes which do not have any constructors.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ListenerMayUseAdapter",
          "displayName": "Class may extend adapter instead of implementing listener",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which implement a listener, but may extend\nthe corresponding adapter instead. The quickfix for this inspection will also\nremove any redundant empty methods left over after replacing the implementation\nof the listener with an extension of the corresponding adapter.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate if the inspection should warn even if no empty\nimplementing methods are found.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UtilityClassWithoutPrivateConstructor",
          "displayName": "Utility class without 'private' constructor",
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes which do not have <b>private</b> constructors.\nUtility classes have all fields and methods declared <b>static</b>. Giving such classes a <b>private</b>\nconstructor prevents them from being inadvertently instantiated.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Classes annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\nUse the checkbox below to ignore classes which only have a main method and no other methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalUtilityClass",
          "displayName": "Utility class is not 'final'",
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes which are not final.\nUtility classes have all fields and methods declared <b>static</b>. Giving such classes making them <b>final</b>\n prevents them from being inadvertently subclassed.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousInnerClass",
          "displayName": "Anonymous inner class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any anonymous inner classes.\nSome code standards discourage the use of anonymous inner classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicConstructorInNonPublicClass",
          "displayName": "'public' constructor in non-public class",
          "enabled": false,
          "description": "<html>\n<body>\nReports all constructors in non-<b>public</b>\nclasses that are declared <b>public</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinalStaticMethod",
          "displayName": "'static' method declared 'final'",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods declared <b>final</b> and <b>static</b>.\nWhen a <b>static</b> method is overridden in a subclass it can still be\naccessed via the super class, making a <b>final</b> declaration not very necessary.\nDeclaring a <b>static</b> method <b>final</b>\ndoes prevent subclasses from defining a <b>static</b> method with the same\nsignature.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MultipleTopLevelClassesInFile",
          "displayName": "Multiple top level classes in single file",
          "enabled": false,
          "description": "<html>\n<body>\nReports multiple top-level classes in a single java file. Putting multiple\ntop-level classes in a file can be confusing, and may degrade the usefulness of various\nsoftware tools.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinalPrivateMethod",
          "displayName": "'private' method declared 'final'",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods\ndeclared <b>final</b> and <b>private</b>.\nAs <b>private</b> methods cannot be meaningfully overridden, declaring them\n<b>final</b> is redundant.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Function metrics",
      "inspections": [
        {
          "shortName": "StatementsPerFunctionJS",
          "displayName": "Overly long function",
          "enabled": false,
          "description": "<html>\n<body>\nReports overly long functions.\nFunction length is calculated by counting up the number of non-empty statements in the function.\nFunctions that are too long are error-prone, and difficult to test.\n<p>\n  Use the field provided below to specify the maximum acceptable number of statements a function\n  might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "CyclomaticComplexityJS",
          "displayName": "Overly complex function",
          "enabled": false,
          "description": "<html>\n<body>\nReports functions that have too high cyclomatic complexity.\nCyclomatic complexity is basically a measurement of the number of branching points in a function. Functions\nwith too high a cyclomatic complexity may be confusing and difficult to test.\n<p>\n  Use the field provided below to specify the maximum acceptable cyclomatic complexity a function\n  might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "ThreeNegationsPerFunctionJS",
          "displayName": "Function with more than three negations",
          "enabled": false,
          "description": "<html>\n<body>\nReports functions with three or more negation operations (<b>!</b> or <b>!=</b>).\nSuch functions may be unnecessarily confusing.\n</body>\n</html>\n"
        },
        {
          "shortName": "FunctionWithMultipleReturnPointsJS",
          "displayName": "Function with multiple return points",
          "enabled": false,
          "description": "<html>\n<body>\nReports functions with multiple return points.\nSome coding standards warn against functions with multiple returns, as they may make functions\nmore difficult to understand and maintain.\n</body>\n</html>\n"
        },
        {
          "shortName": "ParametersPerFunctionJS",
          "displayName": "Function with too many parameters",
          "enabled": false,
          "description": "<html>\n<body>\nReports functions with too many parameters.\nFunctions with too many parameters are often an indication of design weakness.\n<p>\n  Use the field provided below to specify the maximum acceptable number of parameters a function\n  might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "NestingDepthJS",
          "displayName": "Overly nested function",
          "enabled": false,
          "description": "<html>\n<body>\nReports functions whose bodies are contain statements too deeply nested within other statements.\nFunctions with too much statement nesting may be confusing, and are a good sign that refactoring may be necessary.\n<p>\n  Use the field provided below to specify the maximum acceptable nesting depth a function might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "FunctionWithMultipleLoopsJS",
          "displayName": "Function with multiple loops",
          "enabled": false,
          "description": "<html>\n<body>\nReports functions containing multiple loop statements.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Style",
      "inspections": [
        {
          "shortName": "ChangeToOperator",
          "displayName": "Change to operator",
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls that can be replaced with operators.\n<p>\n<small>New in 2017.1</small>\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrUnnecessaryDefModifier",
          "displayName": "Unnecessary 'def'",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <b>def</b> modifiers when used with explicit type declaration.\n<p>For example:</p>\n<pre>\n<b>def</b> boolean foo() {} // modifier is unnecessary\n<b>def</b> Object bar // modifier is unnecessary\n<b>def</b> (int a, String b) = [] // modifier is required and therefore not highlighted\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "ChangeToMethod",
          "displayName": "Change to method",
          "enabled": false,
          "description": "<html>\n<body>\nReports operator calls that can be replaced with methods.\n<p>\n<small>New in 2017.1</small>\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrUnnecessaryAlias",
          "displayName": "Unnecessary import alias",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary import aliases\n<p>\n  <small>New in 2018.1</small>\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaStylePropertiesInvocation",
          "displayName": "Java-style property access",
          "enabled": false,
          "description": "<html>\n<body>\nReports properties accessed via method calls.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrUnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary semicolons.\n<p>For example:</p>\n<pre>\nprint 2; print 3 // semicolon is required\nprint 2; // semicolon is unnecessary\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "GrUnnecessaryPublicModifier",
          "displayName": "Unnecessary 'public'",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <b>public</b> modifiers.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Abstraction issues",
      "inspections": [
        {
          "shortName": "MethodOnlyUsedFromInnerClass",
          "displayName": "Private method only used from inner class",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>private</b> methods, which\nare only called from an inner class of the class containing the method. Such\nmethods could be safely moved into that inner class.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore <b>private</b>\nmethods which are called from an anonymous class.\n<p>\nUse the second checkbox to ignore <b>private static</b>\nmethods which are accessed from a non-static inner class.\n<p>\nUse the third checkbox to only report <b>static</b> methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassReferencesSubclass",
          "displayName": "Class references one of its subclasses",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which contain references to one of their subclasses.\nSuch references may be confusing, and violate several rules of object-oriented design.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodReturnOfConcreteClass",
          "displayName": "Method return of concrete class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any methods whose return type is declared to be a concrete class, rather than an interface.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore methods whose return type is an abstract class.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OptionalUsedAsFieldOrParameterType",
          "displayName": "'Optional' used as field or parameter type",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <b>java.util.Optional&lt;T&gt;</b>, <b>java.util.OptionalDouble</b>, <b>java.util.OptionalInt</b>,\n<b>java.util.OptionalLong</b> or <b>com.google.common.base.Optional</b> as the type for a field or a parameter.\nOptional was designed to provide a limited mechanism for library method return types where there needed\nto be a clear way to represent \"no result\".\nUsing a field with type <b>java.util.Optional</b> is also problematic if the class needs to be <b>Serializable</b>,\nwhich <b>java.util.Optional</b> is not.\n<!-- tooltip end -->\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "DeclareCollectionAsInterface",
          "displayName": "Collection declared by class, not interface",
          "enabled": false,
          "description": "<html>\n<body>\nReports on declarations of Collection variables made by using the collection class as the type,\nrather than an appropriate interface.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TypeMayBeWeakened",
          "displayName": "Type may be weakened",
          "enabled": false,
          "description": "<html>\n<body>\nReports any variables which may be declared with a weaker type. For instance,\na variable may be of type <tt>ArrayList</tt>, and only the method\n<tt>isEmpty()</tt> is called on it. In this case the type\n<tt>List</tt> would do just as well.\n<!-- tooltip end -->\n<p>\nEnable the <b>Use righthand type</b> checkbox below\nto prevent weakening the left side of assignments when the right side is not\na type cast or new expression. When storing the result of a method call in a variable, it is\nuseful to retain the type of the method call result instead of unnecessarily weakening it.\n<p>\nEnable the <b>Use parameterized type</b> checkbox below\nto use the parameterized type of the collection as weakest type when\nthe object evaluated is used as an argument to a collection method with a parameter type of\n<tt>java.lang.Object</tt>.\nUse this option to prevent weakening to <tt>Object</tt> when passing an object to the collection methods\n<tt>get()</tt>, <tt>remove()</tt>,\n<tt>contains()</tt>, <tt>indexOf()</tt>,\n<tt>lastIndexOf()</tt>, <tt>containsKey()</tt> and <tt>containsValue()</tt>.\n<p>\nEnable the <b>Do not weaken to Object</b> checkbox below\nto specify whether a type should be weakened to <tt>java.lang.Object</tt>.\nWeakening to <tt>java.lang.Object</tt> is often not very useful.\n<p>\nEnable the <b>Only weaken to an interface</b> checkbox below\nto only report when the type can be weakened to an interface type.\n<p>\nEnable the <b>Do not weaken return type</b> checkbox below\nto prevent reporting when return type may be weakened.\nOnly variables will be analyzed.\n<p>\n<b>Stop classes</b> are intended to prevent weakening to classes\nlower than stop classes, even if it would be possible.\nIn some cases this may improve readability.\n</body>\n</html>\n"
        },
        {
          "shortName": "ParameterOfConcreteClass",
          "displayName": "Method parameter of concrete class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any method parameters whose type is declared to be a concrete class, rather than an interface.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore method parameters whose type is an abstract class.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofChain",
          "displayName": "Chain of 'instanceof' checks",
          "enabled": false,
          "description": "<html>\n<body>\nReports any chains of <b>if</b>-<b>else</b> statements all of whose conditions are <b>instanceof</b> expressions\nor class equality expressions (e.g. comparison with <b>String.class</b>).\nSuch constructions usually indicate a failure of object-oriented design, which\ndictates that such type-based dispatch should be done via polymorphic method calls rather than explicit chains\nof type tests.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore instanceof expressions on library classes.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofThis",
          "displayName": "'instanceof' check for 'this'",
          "enabled": false,
          "description": "<html>\n<body>\nReports on uses of <b>instanceof</b> or <b>getClass() == SomeClass.class</b> where the\nexpression checked is <b>this</b>. Such expressions\nare indicative of a failure of object-oriented design, and should be replaced by\npolymorphic constructions.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticVariableOfConcreteClass",
          "displayName": "Static field of concrete class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>static</b> fields whose type is declared to be a concrete class, rather than an interface.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore static fields whose type is an abstract class.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FeatureEnvy",
          "displayName": "Feature envy",
          "enabled": false,
          "description": "<html>\n<body>\nReports the \"Feature Envy\" code smell. Feature\nenvy is defined as occurring when a method calls methods on another class three\nor more times. Calls to library classes, parent classes, contained or containing\nclasses are not counted for purposes of this inspection. Feature\nenvy is often an indication that functionality is located in the wrong class.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MagicNumber",
          "displayName": "Magic number",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"magic numbers\", which are numeric literals used without being named by a constant declaration.\nMagic numbers can result in code whose intention is unclear, and may result in errors if a magic\nnumber is changed in one code location but not another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0L, 1L, 2L,\n0.0, 1.0, 0.0F and 1.0F are not reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to disable this inspection within <b>hashCode()</b> methods.\n<p>\nUse the second checkbox below to ignore magic numbers in annotations.\n<p>\nUse the third checkbox below to ignore magic numbers used as initial capacity when constructing <b>Collection</b>, <b>Map</b>,\n<b>StringBuilder</b> or <b>StringBuffer</b> objects.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceMethodClashesWithObject",
          "displayName": "Interface method clashes with method in 'java.lang.Object'",
          "enabled": false,
          "description": "<html>\n<body>\nReports interface methods that clash with the <b>protected</b> methods <code>clone()</code> and <code>finalize()</code> in <code>java.lang.Object</code>.\nIn an interface it is possible to declare those methods with a return type that is incompatible with the <code>java.lang.Object</code> methods.\nThis makes it impossible to create a class implementing such an interface.\nWhen the interface is functional it remains possible to create a lambda from it, but this can still be confusing.\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "BooleanParameter",
          "displayName": "'public' method with 'boolean' parameter",
          "enabled": false,
          "description": "<html>\n<body>\nIt's almost always a mistake to add a <b>boolean</b> parameter to a public method (part of an API) if that method is not a setter.\nWhen reading code using such a method, it can be difficult to decipher what the <b>boolean</b> stands for without looking at\nthe source or documentation.\nThis problem is also known as <a href=\"https://ariya.io/2011/08/hall-of-api-shame-boolean-trap\">the boolean trap</a>.\nThe <b>boolean</b> parameter can often be profitably replaced with an <b>enum</b>\n<!-- tooltip end -->\n<p>\nUse the option below to only warn when a method contains more than one boolean parameter.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofInterfaces",
          "displayName": "'instanceof' a concrete class",
          "enabled": false,
          "description": "<html>\n<body>\nReports on uses of <b>instanceof</b> or <b>getClass() == SomeClass.class</b> where the type checked for is a concrete class,\nrather than an interface. Such uses often indicate excessive coupling to concrete implementations, rather\nthan abstractions. <b>instanceof</b> expressions whose classes come from system or third-party libraries will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore <b>instanceof</b> on abstract classes.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicMethodNotExposedInInterface",
          "displayName": "'public' method not exposed in interface",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>public</b> methods in classes\nwhich are not exposed as in interface. Exposing all <b>public</b> methods via interface is important for\nmaintaining loose coupling, and may be necessary for certain component-based programming styles.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Methods annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\nUse the checkbox below to ignore methods of which the containing class does not\nimplement a non-library interface.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverlyStrongTypeCast",
          "displayName": "Overly strong type cast",
          "enabled": false,
          "description": "<html>\n<body>\nReports type casts which are overly strong. For instance,\ncasting an object to <b>ArrayList</b> when casting it to\n<b>List</b> would do just as well. <b>Note:</b> much like the <i>Redundant type cast</i>\ninspection, applying the fix for this inspection may change the semantics of your program, if you are\nintentionally using an overly strong cast to cause a <b>ClassCastException</b> to be generated. Use caution.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticMethodOnlyUsedInOneClass",
          "displayName": "Static member only used from one other class",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>static</b> methods and fields which\nare only used from a different class than the class containing the\nmethod. Such members could be moved into the using class.\nFactory methods and members accessed from an anonymous class inside the member's class are ignored by this inspection.\nConvenience overloads, which call a method with the same name in the same class, but have fewer parameters, are also ignored.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to have this inspection not report when the static member is only used from a test class.\n<p>\nUse the second checkbox below to ignore member usages from inside anonymous, local and non-static inner classes.\n<p>\nUse the third checkbox below to not warn on members which cannot be moved without problems.\nFor example because a method with an identical signature is already present in the target class.\nOr because a field or method used inside the method will not be accessible when the method is moved.\n<p>\nUse the fourth checkbox to ignore members located in utility classes.\n</body>\n</html>"
        },
        {
          "shortName": "LocalVariableOfConcreteClass",
          "displayName": "Local variable of concrete class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any local variables whose type is declared to be a concrete class.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\n<b>catch</b> block parameters of concrete exception type will also not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore local variables whose type is an abstract class.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceVariableOfConcreteClass",
          "displayName": "Type of instance field is concrete class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instance fields whose type is declared to be a concrete class, rather than an interface.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore instance fields whose type is an abstract class.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CastToConcreteClass",
          "displayName": "Cast to a concrete class",
          "enabled": false,
          "description": "<html>\n<body>\nReports casting a value to a concrete class, rather than an interface.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\nCasts to system or library classes and casts inside <b>equals()</b> and <b>clone()</b> methods will not be reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection ignore casts to abstract classes.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Haml",
      "inspections": [
        {
          "shortName": "HamlNestedTagContent",
          "displayName": "Illegal nesting",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that HAML tag has content only on the same line or has it nested.<br>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "CFML",
      "inspections": [
        {
          "shortName": "CfmlFileReference",
          "displayName": "File reference",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that file path references are resolved correctly.\n</body>\n</html>\n"
        },
        {
          "shortName": "CfmlReferenceInspection",
          "displayName": "References inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that functions references are resolved correctly.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Batch",
      "inspections": [
        {
          "shortName": "SpringBatchModel",
          "displayName": "Spring Batch Model",
          "enabled": false,
          "description": "Spring Batch Model Inspection."
        }
      ]
    },
    {
      "name": "Spring Integration",
      "inspections": [
        {
          "shortName": "UnresolvedMessageChannel",
          "displayName": "Unresolved Message Channel",
          "enabled": false,
          "description": "Highlights unresolved channel attributes in @Gateway, @ServiceActivator, etc."
        },
        {
          "shortName": "SpringIntegrationDeprecations21",
          "displayName": "Spring Integration 2.1 Deprecations",
          "enabled": true,
          "description": "Spring Integration 2.1 Deprecations (XML).\n<p/>\nPlease see <a href=\"https://github.com/SpringSource/spring-integration/wiki/Spring-Integration-2.0-to-2.1-Migration-Guide\">Migration Guide</a>."
        },
        {
          "shortName": "SpringIntegrationMethodEndpointInconsistency",
          "displayName": "Spring Integration endpoint methods errors",
          "enabled": false,
          "description": "Spring Integration endpoint methods errors."
        },
        {
          "shortName": "SpringIntegrationModel",
          "displayName": "Spring Integration Model",
          "enabled": false,
          "description": "Spring Integration Model Inspection.\n"
        }
      ]
    },
    {
      "name": "XPath",
      "inspections": [
        {
          "shortName": "IndexZeroUsage",
          "displayName": "Use of index 0 in XPath predicates",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks for any accidental use of zero in a predicate index or in a comparision with the function\n  <code>position()</code>. Such is almost always a bug because in XPath, the index starts at one, <em>not</em> at zero.\n</p>\n\n<p>\n  Example:\n</p>\n\n<p>\n  <code>//someelement[<b>position() = 0</b>]</code> or <code>//something[<b>0</b>]</code>\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "CheckNodeTest",
          "displayName": "Check node test",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks whether any element/attribute names that are used in XPath-expressions are actually part of an\n  associated XML file or are defined in a referenced schema. This helps to avoid problems caused by typos in\n  XPath-expressions that would otherwise occur when running the script and may even then not be recognized immediately.\n</p>\n\n<p>Example:</p>\n\n<p>\n  <code>&lt;xsl:template match=\"<b>h:txtarea</b>\" /></code>\n</p>\n\n<p>\n  If the prefix \"h\" is bound to the XHTML namespace, the inspection will flag this part of the match-expression as an\n  unknown element name because the correct name of the element is \"textarea\".\n</p>\n\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ImplicitTypeConversion",
          "displayName": "Implicit type conversion",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks for any implicit conversions between the predefined XPath-types STRING, NUMBER, BOOLEAN and\n  NODESET. While this is usually not a problem as the conversions are well-defined by the standard, this inspection can\n  help to write XSLT scripts that are more expressive about types and can even help to avoid subtle bugs:\n</p>\n\n<p>\n  <code>&lt;xsl:if test=\"<b>foo</b>\" /></code> is not the same as <code>&lt;xsl:if test=\"<b>string(foo)</b>\" /></code>\n</p>\n\n<p>\n  The first test checks whether the element \"foo\" exists (<code>count(foo) > 0)</code>, the latter one however is only\n  true if the element actually contains any text (<code>string-length(foo) > 0</code>). The plugin will then offer to\n  make the type-conversion more explicit.\n</p>\n\n<p>\n  There are several options to adjust the inspection to personal preferences by offering the possibility to\n  individually enable it for implicit conversions between certain types.<br>\n</p>\n\n<p>\n  The plugin can also be told to always flag explicit conversions that do not result in the actually expected type, such\n  as <code>&lt;xsl:if test=\"number(foo)\" /></code> and provides a special option to ignore the conversion from NODESET\n  to BOOLEAN by using the <code>string()</code> function as a shortcut for writing <code>string-length() > 0</code>.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "HardwiredNamespacePrefix",
          "displayName": "Hardwired namespace prefix",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks for comparisons of the <tt>name()</tt>-function against strings that contain a \":\" - which\n  usually indicates a hardwired namespace-prefix in the comparison. Such code will break when run against XML that\n  uses a different prefix for the same namespace.\n</p>\n\n<p>Example:</p>\n\n<p>\n  <code>&lt;xsl:if test=\"name() = 'xlink:href'\">...&lt;xsl:if></code>\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantTypeConversion",
          "displayName": "Redundant type conversion",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks whether any type-conversion with the functions <code>string()</code>, <code>number()</code> or\n  <code>boolean()</code> is redundant, i.e. whether the type of argument is the same as the functions return type or if\n  the expected type of the expression is of type \"any\". While such an explicit conversion may sometimes be intentional\n  to emphasize the type, this can usually be safely removed.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Reflective access",
      "inspections": [
        {
          "shortName": "MetaAnnotationWithoutRuntimeRetention",
          "displayName": "Non-runtime annotation to be used by reflection",
          "enabled": false,
          "description": "<html>\n<body>\n<p>Report meta annotations which are used by frameworks by reflection but their retention policy is not RUNTIME.\n  If retention policy is missed, then default retention policy 'CLASS' would be used, which means that annotations by default are not visible at runtime</p>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Java9ReflectionClassVisibility",
          "displayName": "Reflective access across modules issues",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects reflective access to classes which aren't visible due to Java 9 module accessibility rules.\n</body>\n</html>"
        },
        {
          "shortName": "JavaReflectionMemberAccess",
          "displayName": "Reflective access to nonexistent/not visible class member",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects reflective access to fields and methods which don't exist or aren't visible.\n<!-- tooltip end -->\n<p>\n  With a 'final' class it's clear if there's a field or method with the specified name in the class.\n</p>\n<p>\n  With non-final classes it's possible that a subclass has a field or method with that name, so there could be false positives.\n  You may use the inspection settings to get rid of such false positives, everywhere or with specific classes.\n</p>\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "JavaLangInvokeHandleSignature",
          "displayName": "MethodHandle/VarHandle type mismatch",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects the case where the signature of a MethodHandle or the type of a VarHandle doesn't match the actual method or field.\n<p>It also checks that the arguments provided to MethodHandle.invoke(), VarHandle.set(), etc match the method signature/field type.\n  <!-- tooltip end -->\n\n<p>Examples:</p>\n<pre><code>\n  MethodHandle mh = MethodHandles.lookup().findVirtual(\n      MyClass.class, \"foo\", MethodType.methodType(void.class, int.class));\n  <i>// the argument should be an <b>int</b> value</i>\n  mh.invoke(myObj, \"<b>abc</b>\");\n</code></pre>\n<br>\n<pre><code>\n  <i>// the argument should be <b>String</b>.class</i>\n  VarHandle vh = MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", <b>int</b>.class);\n</code></pre>\n<br>\n<pre><code>\n  VarHandle vh = MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", String.class);\n  <i>// the argument should be a <b>String</b> value</i>\n  vh.set(myObj, <b>42</b>);\n</code></pre>\n<p>\n  <small>New in 2017.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "JavaReflectionInvocation",
          "displayName": "Reflective invocation arguments mismatch",
          "enabled": false,
          "description": "<html>\n<body>\nThe inspection checks that the arguments provided to Method.invoke() and Constructor.newInstance()\nmatch the signature specified in Class.getMethod() and Class.getConstructor()\n<!-- tooltip end -->\n<p>Example:</p>\n<pre><code>\n  Method m = myObj.getClass().getMethod(\"myMethod\", <b>int</b>.class);\n  <i>// the argument should be an <b>int</b> value</i>\n  m.invoke(myObj, \"<b>abc</b>\");\n</code></pre>\n\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Imports and dependencies",
      "inspections": [
        {
          "shortName": "ES6UnusedImports",
          "displayName": "Unused ES6 / TypeScript imports",
          "enabled": false,
          "description": "<html>\n<body>\nReports unused JavaScript or TypeScript <b>import</b> bindings or specifiers.\nThe validation works in ES6 and TypeScript files.\n</body>\n</html>"
        },
        {
          "shortName": "PackageJsonMismatchedDependency",
          "displayName": "Mismatched dependencies in package.json",
          "enabled": false,
          "description": "<html>\n<body>\nReports dependencies in package.json that are not installed or don't match the specified <a href=\"https://docs.npmjs.com/misc/semver\">version range</a>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ES6ModulesDependencies",
          "displayName": "Missing import statement",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that all modules are referenced through <b>import</b> statements.\n<p>Suggests inserting the import statement.</p>\n<p>When using libraries that define their own global symbols outside their visible JavaScript code (e.g. <code>describe()</code>\n  in <a href=\"https://mochajs.org/\">Mocha</a>),<br/>\n  it is recommended that you <a href=\"https://www.jetbrains.com/webstorm/help/configuring-javascript-libraries.html#d24640e316\">add</a>\n  the corresponding TypeScript type definition file as a JavaScript library in <em>Preferences | Languages & Frameworks | JavaScript | Libraries</em>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "NpmUsedModulesInstalled",
          "displayName": "Missing module dependency",
          "enabled": false,
          "description": "<html>\n<body>\nChecks whether the module in the <b>require()</b> call or <b>import</b> statement exists, whether it is listed in package.json dependencies, and whether it is locally installed.\n<p>Suggests installing the module and/or including it into package.json.</p>\n<p>For <b>require()</b> calls, works only in files in the scope of <em>Node.js Core</em> JavaScript library.</p>\n</body>\n</html>"
        },
        {
          "shortName": "JSXNamespaceValidation",
          "displayName": "Missing React import with JSX",
          "enabled": false,
          "description": "<html>\n<body>\nWhen using JSX, it's usually required to have <b>import</b> from React in the file scope. Otherwise, the code may not compile properly.\n</body>\n</html>"
        },
        {
          "shortName": "ES6CheckImport",
          "displayName": "Imports validation",
          "enabled": false,
          "description": "<html>\n<body>\nValidates names and paths in ECMAScript <b>import</b> declarations.\n</body>\n</html>"
        },
        {
          "shortName": "AmdModulesDependencies",
          "displayName": "Missing AMD module dependency",
          "enabled": false,
          "description": "<html>\n<body>\nInside an AMD module definition, checks that all used modules are specified as dependencies.\n<p>Suggests inserting the module dependency.</p>\n<p>Works only in files in the scope of \"HTML\" JavaScript library.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Cloud Stream",
      "inspections": [
        {
          "shortName": "SpringCloudStreamInconsistencyInspection",
          "displayName": "Spring Cloud Stream handler methods errors",
          "enabled": false,
          "description": "Spring Cloud Stream handler methods errors."
        },
        {
          "shortName": "SpringCloudStreamMessageChannelInspection",
          "displayName": "Unresolved Message Channel",
          "enabled": false,
          "description": "Highlights unresolved channel attributes in @StreamListener, @SendTo, @Output, @Input."
        }
      ]
    },
    {
      "name": "Pages Navigation Model",
      "inspections": [
        {
          "shortName": "PagesFileModelInspection",
          "displayName": "Page File Navigation errors (index.page.xml)",
          "enabled": false,
          "description": "Pages File Navigation Model Inspection"
        }
      ]
    },
    {
      "name": "Other problems",
      "inspections": [
        {
          "shortName": "PublicApiImplicitType",
          "displayName": "Public API declaration has implicit return type",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>public</b> and <b>protected</b> functions and properties that have an implicit return type.\nFor API stability reasons, it's recommended to specify such types explicitly.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceWithEnumMap",
          "displayName": "Replace with EnumMap",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>hashMapOf</b> and similar function calls replaceable with the constructor of <b>EnumMap</b>.\n</body>\n</html>"
        },
        {
          "shortName": "MigrateDiagnosticSuppression",
          "displayName": "Diagnostic name should be replaced",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports suppressions with old diagnostic names, for example <b>@Suppress(\"HEADER_WITHOUT_IMPLEMENTATION\")</b>.\n</body>\n</html>"
        },
        {
          "shortName": "KDocMissingDocumentation",
          "displayName": "Missing KDoc comments for public declarations",
          "enabled": false,
          "description": "<html><body>\nThis inspection reports public declarations that do not have KDoc comments.\n</body></html>"
        },
        {
          "shortName": "DeprecatedCallableAddReplaceWith",
          "displayName": "@Deprecated annotation without 'replaceWith' argument",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports deprecated functions and properties that do not have a <b>kotlin.ReplaceWith</b> argument in its <b>kotlin.deprecated</b> annotation\nand there is a suggestion to add one based on the body.\n</body>\n</html>\n"
        },
        {
          "shortName": "OverridingDeprecatedMember",
          "displayName": "Overriding deprecated member",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports deprecated members being overridden.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Plugin descriptor",
      "inspections": [
        {
          "shortName": "PluginXmlValidity",
          "displayName": "Plugin.xml validity",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection finds various problems in plugin.xml.\n</body>\n</html>"
        },
        {
          "shortName": "InspectionMappingConsistency",
          "displayName": "<inspection> tag consistency",
          "enabled": false,
          "description": "<html>\n<body>\nChecks inspection mappings consistency.\n</body>\n</html>"
        },
        {
          "shortName": "PluginXmlDynamicPlugin",
          "displayName": "Plugin.xml dynamic plugin verification",
          "enabled": false,
          "description": "<html>\n<body>\nReports dynamic plugin problems.\n<p>\n  Dynamic plugins can be installed, updated and uninstalled without restarting the IDE (supported in 2020.1 and later).\n</p>\n<p>\n  Please see <a href=\"http://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/dynamic_plugins.html\">Dynamic Plugins</a> for further reference.\n</p>\n<p><small>New in 2020.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "PluginXmlI18n",
          "displayName": "Plugin.xml i18n verification",
          "enabled": false,
          "description": "<html>\n<body>\n<p>This inspection finds hardcoded names or descriptions in plugin.xml.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PluginXmlCapitalization",
          "displayName": "Plugin.xml text capitalization",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights text capitalization problems in plugin.xml.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Data",
      "inspections": [
        {
          "shortName": "SpringDataRepositoryMethodParametersInspection",
          "displayName": "Spring Data Repository Method Parameters errors",
          "enabled": false,
          "description": "<html>\n<body>\nSpring Data Repository Method Parameters errors.\n</body>\n</html>"
        },
        {
          "shortName": "SpringDataMethodInconsistencyInspection",
          "displayName": "Spring Data Repository Method errors",
          "enabled": false,
          "description": "<html>\n<body>\nSpring Data Repository Method errors.\n</body>\n</html>"
        },
        {
          "shortName": "SpringDataRepositoryMethodReturnTypeInspection",
          "displayName": "Spring Data Repository Method Return Type errors",
          "enabled": false,
          "description": "<html>\n<body>\nSpring Data Repository Method Return Types errors.<br><br>\n\nThe following table lists the return types generally supported by Spring Data repositories.<br>\n<table border=\"3\" >\n   <tr>\n     <td><strong>Return type</strong></td>\n     <td><strong>Description</strong></td>\n  </tr>\n  <tr>\n    <td><p><code>void</code></p></td>\n    <td><p>Denotes no return value.</p></td>\n  </tr>\n  <tr>\n    <td><p>Primitives</p></td>\n    <td><p>Java primitives.</p></td>\n  </tr>\n  <tr>\n    <td><p>Wrapper types</p></td>\n    <td><p>Java wrapper types.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>T</code></p></td>\n    <td><p>An unique entity. Expects the query method to return one result at most. In case no result is found <code>null</code> is returned. More than one result will trigger an <code>IncorrectResultSizeDataAccessException</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Iterator&lt;T&gt;</code></p></td>\n    <td><p>An <code>Iterator</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Collection&lt;T&gt;</code></p></td>\n    <td><p>A <code>Collection</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>List&lt;T&gt;</code></p></td>\n    <td><p>A <code>List</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Optional&lt;T&gt;</code></p></td>\n    <td><p>A Java 8 or Guava <code>Optional</code>. Expects the query method to return one result at most. In case no result is found <code>Optional.empty()</code>/<code>Optional.absent()</code> is returned. More than one result will trigger an <code>IncorrectResultSizeDataAccessException</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Option&lt;T&gt;</code></p></td>\n    <td><p>An either Scala or JavaSlang <code>Option</code> type. Semantically same behavior as Java 8&#8217;s <code>Optional</code> described above.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Stream&lt;T&gt;</code></p></td>\n    <td><p>A Java 8 <code>Stream</code>.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Future&lt;T&gt;</code></p></td>\n    <td><p>A <code>Future</code>. Expects method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability enabled.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>CompletableFuture&lt;T&gt;</code></p></td>\n    <td><p>A Java 8 <code>CompletableFuture</code>. Expects method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability enabled.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>ListenableFuture</code></p></td>\n    <td><p>A <code>org.springframework.util.concurrent.ListenableFuture</code>. Expects method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability enabled.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Slice</code></p></td>\n    <td><p>A sized chunk of data with information whether there is more data available. Requires a <code>Pageable</code> method parameter.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>Page&lt;T&gt;</code></p></td>\n    <td><p>A <code>Slice</code> with additional information, e.g. the total number of results. Requires a <code>Pageable</code> method parameter.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>GeoResult&lt;T&gt;</code></p></td>\n    <td><p>A result entry with additional information, e.g. distance to a reference location.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>GeoResults&lt;T&gt;</code></p></td>\n    <td><p>A list of <code>GeoResult&lt;T&gt;</code> with additional information, e.g. average distance to a reference location.</p></td>\n  </tr>\n  <tr>\n    <td><p><code>GeoPage&lt;T&gt;</code></p></td>\n    <td><p>A <code>Page</code> with <code>GeoResult&lt;T&gt;</code>, e.g. average distance to a reference location.</p></td>\n  </tr>\n  </tbody>\n</table>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Kotlin",
      "inspections": [
        {
          "shortName": "KotlinMavenPluginPhase",
          "displayName": "Kotlin Maven Plugin misconfigured",
          "enabled": false,
          "description": "Reports kotlin-maven-plugin configuration issues"
        },
        {
          "shortName": "DifferentMavenStdlibVersion",
          "displayName": "Library and maven plugin versions are different",
          "enabled": false,
          "description": "<html>\n<body>\nReports different kotlin stdlib and compiler versions that could lead to unpredictable issues\n</body>\n</html>"
        },
        {
          "shortName": "DifferentKotlinMavenVersion",
          "displayName": "Maven and IDE plugins versions are different",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports different IDE and Maven plugin versions are used.\nThis can cause inconsistencies between IDE and Maven build in error reporting or code behaviour.\n</body>\n</html>"
        },
        {
          "shortName": "DifferentStdlibGradleVersion",
          "displayName": "Kotlin library and Gradle plugin versions are different",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports different kotlin stdlib and compiler versions that could lead to unpredictable issues.\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedMavenDependency",
          "displayName": "Deprecated library is used in Maven",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports that some deprecated dependency is used in Maven.\n</body>\n</html>"
        },
        {
          "shortName": "DifferentKotlinGradleVersion",
          "displayName": "Kotlin Gradle and IDE plugins versions are different",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports that different IDE and Gradle plugin versions are used.\nThis can cause inconsistencies between IDE and Gradle builds in error reporting or code behaviour.\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedGradleDependency",
          "displayName": "Deprecated library is used in Gradle",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports that some deprecated dependency is used in Gradle.\n</body>\n</html>"
        },
        {
          "shortName": "KotlinInvalidBundleOrProperty",
          "displayName": "Invalid property key",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports unresolved references to .properties file keys and resource bundles in Kotlin files.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinTestJUnit",
          "displayName": "kotlin-test-junit could be used",
          "enabled": false,
          "description": "<html>\n<body>\nIf you have kotlin-test and junit dependency\nthen most likely you better to include kotlin-test-junit instead of just kotlin-test\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Android Lint",
      "inspections": [
        {
          "shortName": "PermissionUsageInspection",
          "displayName": "Permission Check for Location APIs",
          "enabled": false,
          "description": "Description is under construction"
        }
      ]
    },
    {
      "name": "Play",
      "inspections": [
        {
          "shortName": "PlayCustomTagNameInspection",
          "displayName": "Unknown custom tag",
          "enabled": false,
          "description": "Validate Custom Tags Existence"
        },
        {
          "shortName": "PlayPropertyInspection",
          "displayName": "Unknown Properties",
          "enabled": false,
          "description": "Validate invalid i18n property key\n\n"
        }
      ]
    },
    {
      "name": "Spring Web Flow",
      "inspections": [
        {
          "shortName": "WebflowConfigModelInspection",
          "displayName": "Web Flow Config Model",
          "enabled": false,
          "description": "Validates Web Flow config model."
        },
        {
          "shortName": "WebflowSetupInspection",
          "displayName": "Web Flow Setup",
          "enabled": false,
          "description": "Validates Web Flow setup (Spring configuration)."
        },
        {
          "shortName": "WebflowModelInspection",
          "displayName": "Web Flow Model",
          "enabled": false,
          "description": "Validates Web Flow model."
        },
        {
          "shortName": "FlowRequiredBeanTypeInspection",
          "displayName": "Web Flow Required Bean Type",
          "enabled": false,
          "description": "Web Flow: checks bean reference for required bean type."
        }
      ]
    },
    {
      "name": "Unused symbols",
      "inspections": [
        {
          "shortName": "JSUnusedAssignment",
          "displayName": "Unused assignment",
          "enabled": false,
          "description": "<html>\n<body>\nChecks JavaScript for unused assignments.\nThe validation works in JavaScript, ActionScript, HTML and JSP files.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSUnusedGlobalSymbols",
          "displayName": "Unused global symbol",
          "enabled": false,
          "description": "<html>\n<body>\nReports unused globally accessible public functions, variables, classes, and properties.\nThe validation works in JavaScript, ActionScript, HTML and JSP files.\n</body>\n</html>"
        },
        {
          "shortName": "JSUnusedLocalSymbols",
          "displayName": "Unused local symbol",
          "enabled": false,
          "description": "<html>\n<body>\nReports unused locally accessible parameters, local variables, functions, classes and private member declarations.\nThe validation works in JavaScript, ActionScript, HTML and JSP files.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Core",
      "inspections": [
        {
          "shortName": "SpringHandlersSchemasHighlighting",
          "displayName": "Spring Custom Namespace Registration",
          "enabled": false,
          "description": "Validates spring.handlers/spring.schemas files"
        },
        {
          "shortName": "SpringElStaticFieldInjectionInspection",
          "displayName": "Spring EL in static fields",
          "enabled": false,
          "description": "Check injecting to static fields.\nSpring does not allow injecting to static fields ('null' value is injected)."
        },
        {
          "shortName": "SpringElInspection",
          "displayName": "Spring EL",
          "enabled": false,
          "description": "Checks Spring Expression Language (SpEL) problems."
        }
      ]
    },
    {
      "name": "Other",
      "inspections": [
        {
          "shortName": "TypeCustomizer",
          "displayName": "Type customizer inspection",
          "enabled": false,
          "description": "<html>\n<body>\nReports files which can be custom type checkers and are not added to compiler resources yet.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 14",
      "inspections": [
        {
          "shortName": "TextBlockBackwardMigration",
          "displayName": "Text block can be replaced with regular string literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports text blocks which can be replaced with a regular string literal.\n<!-- tooltip end -->\n<p>Example:\n<pre><code>\n  Object obj = engine.eval(\"\"\"\n                           function hello() {\n                             print('\"Hello, world\"');\n                           }\n\n                           hello();\n                           \"\"\");\n</code></pre>\n<p>can be replaced with</p>\n<pre><code>\n  Object obj = engine.eval(\"function hello() {\\n\" +\n                           \"  print('\\\"Hello, world\\\"');\\n\" +\n                           \"}\\n\" +\n                           \"\\n\" +\n                           \"hello();\\n\");\n</code></pre>\n<p>This inspection only reports if the configured language level is 14 Preview.</p>\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "PatternVariableCanBeUsed",
          "displayName": "Pattern variable can be used",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variable declarations that can be replaced with pattern variables. E.g.:\n<pre><code>\n  if (obj instanceof String) {\n    String str = (String) obj;\n    System.out.println(str);\n  }\n</code></pre>\nCan be replaced with:\n<pre><code>\n  if (obj instanceof String str) {\n    System.out.println(str);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 14 (Preview) or higher</p>\n<p><small>New in 2020.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "EnhancedSwitchMigration",
          "displayName": "Statement can be replaced with enhanced 'switch'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements, which can be replaced with an enhanced <b>switch</b> statement or expression.\n\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 14 or higher</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "TextBlockMigration",
          "displayName": "Text block can be used",
          "enabled": false,
          "description": "<html>\n<body>\nReports when a string or concatenation of strings can be replaced with a text block.\n<!-- tooltip end -->\nExample:\n<pre><code>\n  String html = \"&lt;html&gt;\\n\" +\n                \"    &lt;body&gt;\\n\" +\n                \"        &lt;p>Hello, world&lt;/p&gt;\\n\" +\n                \"    &lt;/body&gt;\\n\" +\n                \"&lt;/html&gt;\\n\";\n</code></pre>\n<p>can be replaced with</p>\n<pre><code>\n  String html = \"\"\"\n                &lt;html&gt;\n                    &lt;body&gt;\n                        &lt;p>Hello, world&lt;/p&gt;\n                    &lt;/body&gt;\n                &lt;/html&gt;\n                \"\"\";\n</code></pre>\n<p>This inspection only reports if the configured language level is 14 Preview.</p>\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "EnhancedSwitchBackwardMigration",
          "displayName": "New style 'switch' can be replaced with old style one",
          "enabled": false,
          "description": "<html>\n<body>\nReports enhanced <b>switch</b> statements and expressions which can be replaced with a traditional <b>switch</b> statement.\n\n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java EE",
      "inspections": [
        {
          "shortName": "EjbEntityClassInspection",
          "displayName": "Entity EJB Class Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following error-level EJB specification violations:\n<li>Finder and Selector methods should be defined correctly</li>\n<li>CMP and CMR fields accessors should be defined correctly</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaeeApplicationDomInspection",
          "displayName": "Java EE Application Descriptor Inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in your application.xml used to deploy\nyour Java EE application to a server:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbInterceptorWarningsInspection",
          "displayName": "Interceptor Method Names Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following warning-level EJB specification violations:\n<li>Should not start with 'ejb' in certain cases</li>\n<li>Interceptor class doesn't define any interceptor methods</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbEntityInterfaceInspection",
          "displayName": "Entity EJB Interface Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following error-level EJB specification violations:\n<li>Class should implement... (EJBLocalObject, EJBObject, etc.)</li>\n<li>Checking for EJB classes modifiers</li>\n<li>Public no-args constructor required</li>\n<li>Class should be interface or vice versa</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "ServletWithoutMappingInspection",
          "displayName": "Servlet Mapping Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nChecks if all servlets have mappings\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbStaticAccessInspection",
          "displayName": "Static Access Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following warning-level EJB specification violations:\n<li>EJB shouldn't write to the static fields</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbProhibitedPackageUsageInspection",
          "displayName": "Prohibited Package Usage Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following warning-level EJB specification violations:\n<li>EJB should not use specific packages and classes</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbInterfaceSignatureInspection",
          "displayName": "EJB Interface Signature Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following error-level EJB specification violations:\n<li>EJB interfaces should extends the correct EJB interfaces</li>\n<li>EJB interfaces should be public and not final</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbThisExpressionInspection",
          "displayName": "''This'' Usage Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following warning-level EJB specification violations:\n<li>EJB should not pass ''this'' as a method result or parameter</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbInterceptorInspection",
          "displayName": "EJB Interceptor Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following error-level EJB specification violations:\n<li>Class should not be defined as EJB and Interceptor class at the same time</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbClassBasicInspection",
          "displayName": "EJB Class Basic Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following error-level EJB specification violations:\n<li>Class should implement... (EJBLocalObject, EJBObject, etc.)</li>\n<li>Checking for EJB classes modifiers</li>\n<li>Public no-args constructor required</li>\n<li>Class should be interface or vice versa</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "MimeType",
          "displayName": "MIME type",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you control MIME type name validity.\n\n</body>\n</html>"
        },
        {
          "shortName": "WebProperties",
          "displayName": "Web.xml errors",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in descriptors that are used to deploy your\nWeb Module to a server:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbEntityHomeInspection",
          "displayName": "Entity Home Interface Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nInspects the correctness of the definition of the following Entity EJB related items:\n<li>Class should implement... (EJBLocalObject, EJBObject, etc.)</li>\n<li>Checking for EJB classes modifiers</li>\n<li>Public no-args constructor required</li>\n<li>Class should be interface or vice versa</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "WebWarnings",
          "displayName": "Web.xml warnings",
          "enabled": false,
          "description": "<!--\n  ~ Copyright (c) 2000-2007 JetBrains s.r.o. All Rights Reserved.\n  -->\n\n<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in descriptors that are used to deploy your\nWeb Module to a server:\n\n<li>Duplicate welcome-file\n\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbDomInspection",
          "displayName": "EJB Descriptor Inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in your ejb-jar.xml and other XML descriptors used to deploy\nyour EJB to a Java EE server:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>"
        },
        {
          "shortName": "EjbSessionHomeInterfaceInspection",
          "displayName": "Session Home Interface Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following error-level EJB specification violations:\n<li>'Create' methods should be defined correctly</li>\n<li>There should no be any 'finder' method</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbClassWarningsInspection",
          "displayName": "EJB Class Warnings Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following warning-level EJB specification violations:\n<li>Class should not implement some interfaces</li>\n<li>Class should not have static and not final fields</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbEnvironmentInspection",
          "displayName": "EJB Environment Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following error-level EJB specification violations:\n<li>Injected property invalid type</li>\n<li>EJB references consistency with ejb-jar.xml</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbRemoteRequirementsInspection",
          "displayName": "RMI Distribution Requirements Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following error-level EJB specification violations:\n<li>Method should declare java.rmi.RemoteException in its throws list</li>\n<li>Method arguments or return type is not RMI/IIOP compatible</li>\n<li>EJB Service Endpoint Interface cannot have constant declarations</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbInterfaceMethodInspection",
          "displayName": "EJB Interface Method Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the following error-level EJB specification violations:\n<li>EJB class should not be exposed through interface</li>\n<li>Method name conflicts</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "EjbQlInspection",
          "displayName": "EJB QL Problems",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection controls whether the EJB QL Queries are error-checked\n</body>\n</html>\n"
        },
        {
          "shortName": "ManagedBeanClassInspection",
          "displayName": "Managed Bean Class Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that Managed Bean class is not final, abstract or non-static inner class\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Initialization",
      "inspections": [
        {
          "shortName": "OverriddenMethodCallDuringObjectConstruction",
          "displayName": "Overridden method called during object construction",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to overridden methods of the current class during object construction.\nA call is made during object construction if it is performed in a constructor, in an non-static instance initializer,\nin a non-static field initializer or in a <b>clone()</b>, <b>readObject()</b> or <b>readObjectNoData()</b> method.\nSuch calls may result in subtle bugs, as the object is not guaranteed to be initialized\nbefore the method call occurs.\n<!-- tooltip end -->\n<p>\nThe inspections <i>Overridable method called during object construction</i>,\n<i>Overridden method called during object construction</i> and\n<i>Abstract method called during object construction</i> report overlapping problem sets and only one should be enabled at a time\nto prevent duplicate warnings.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticVariableUninitializedUse",
          "displayName": "Static field used before initialization",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>static</b> variables which are read prior to initialization.\nEquality checks with <b>null</b> are ignored by this inspection.\n<p>\nNote: This inspection uses a very conservative dataflow algorithm, and may report static variables\nused uninitialized incorrectly. Variables reported as initialized will always be initialized.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate whether you want uninitialized primitive fields to be reported.\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "InstanceVariableInitialization",
          "displayName": "Instance field may not be initialized",
          "enabled": false,
          "description": "<html>\n<body>\nReports instance variables which are not guaranteed to be initialized upon object initialization.\n<p>\nNote: This inspection uses a very conservative dataflow algorithm, and may report instance variables\nas uninitialized incorrectly. Variables reported as initialized will always be initialized.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate whether you want uninitialized primitive fields to be reported.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DoubleBraceInitialization",
          "displayName": "Double brace initialization",
          "enabled": false,
          "description": "<html>\n<body>\nReports <a href=\"http://www.c2.com/cgi/wiki?DoubleBraceInitialization\">Double Brace Initialization</a>.\nDouble brace initialization can cause memory leaks when used from a non-<b>static</b> context,\nbecause the anonymous <b>class</b> created will maintain a reference to the surrounding object.\nIt has worse performance than regular initialization because of the additional class loading required.\nIt can cause <b>equals()</b> comparisons to fail, if the <b>equals()</b> method does not accept subclasses as parameter (see link above).\nAnd finally, pre Java 9 it cannot be combined with the diamond operator, because that cannot be used with anonymous classes.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NonThreadSafeLazyInitialization",
          "displayName": "Unsafe lazy initialization of 'static' field",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>static</b> variables being lazily initialized\nin a non-thread-safe manner. Lazy initialization of <b>static</b> variables should be done\nin an appropriate synchronization construct, to prevent different threads from\nperforming conflicting initialization.\n<p>\nIf applicable, a quickfix is suggested\nwhich introduces the static holder pattern described in\n<a href=\"http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom\">\nhttp://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom\n</a>\nwhere the JVM guarantees the thread safety of such initializations.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceVariableUninitializedUse",
          "displayName": "Instance field used before initialization",
          "enabled": false,
          "description": "<html>\n<body>\nReports instance variables which are read prior to initialization.\nEquality checks with <b>null</b> are ignored by this inspection.\n<p>\nNote: This inspection uses a very conservative dataflow algorithm, and may report instance variables\nas uninitialized incorrectly. Variables reported as initialized will always be initialized.\n<!-- tooltip end -->\n<p>\nUse the list below to specify special annotations. Fields annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\nUse the checkbox below to indicate whether you want uninitialized primitive fields to be reported.\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "OverridableMethodCallDuringObjectConstruction",
          "displayName": "Overridable method called during object construction",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to overridable methods of the current class during object construction.\nA call is during object construction if it is made inside a constructor, in an non-static instance initializer,\nin a non-static field initializer or inside a <b>clone()</b>, <b>readObject()</b> or <b>readObjectNoData()</b> method.\nMethods are overridable if they are not declared <b>final</b>, <b>static</b> or <b>private</b>.\nPackage local methods are considered safe, even though they are overridable.\nSuch calls may result in subtle bugs, as the object is not guaranteed to be initialized\nbefore the method call occurs.\n<!-- tooltip end -->\n<p>\nThe inspections <i>Overridable method called during object construction</i>,\n<i>Overridden method called during object construction</i> and\n<i>Abstract method called during object construction</i> report overlapping problem sets and only one should be enabled at a time\nto prevent duplicate warnings.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticVariableInitialization",
          "displayName": "Static field may not be initialized",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>static</b> variables which are not guaranteed to be initialized upon class initialization.\n<p>\nNote: This inspection uses a very conservative dataflow algorithm, and may report static variables\nas uninitialized incorrectly. Variables reported as initialized will always be initialized.\n<!-- tooltip end -->\n<p>\n Use the checkbox below to indicate whether you want uninitialized primitive fields to be reported.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AbstractMethodCallInConstructor",
          "displayName": "Abstract method called during object construction",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls of <b>abstract</b> methods of the current class during object construction.\nA call is during object construction if it is made inside a constructor, in an non-static instance initializer,\nin a non-static field initializer or inside a <b>clone()</b>, <b>readObject()</b> or <b>readObjectNoData()</b> method.\nSuch calls may result in subtle bugs, as the object is not guaranteed to be initialized\nbefore the method call occurs.\n<!-- tooltip end -->\n<p>\nThe inspections <i>Overridable method called during object construction</i>,\n<i>Overridden method called during object construction</i> and\n<i>Abstract method called during object construction</i> report overlapping problem sets and only one should be enabled at a time\nto prevent duplicate warnings.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThisEscapedInConstructor",
          "displayName": "'this' reference escaped in object construction",
          "enabled": false,
          "description": "<html>\n<body>\nReports possible escapes of <b>this</b>\nduring object construction. Escapes occur when <b>this</b>\nis used as a method argument or the object of an assignment in a constructor or\ninitializer. Such escapes may result in subtle bugs, as the object is now\navailable in a context in which it is not guaranteed to be initialized.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "NonFinalStaticVariableUsedInClassInitialization",
          "displayName": "Non-final static field is used during class initialization",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of non-<b>final</b> <b>static</b> variables during initialization\nof a class. Such uses may make the semantics of the code dependent on order of class\ncreation, may cause variables to be used before initialized, and generally cause\nextremely difficult and confusing bugs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Google Web Toolkit",
      "inspections": [
        {
          "shortName": "GWTStyleCheck",
          "displayName": "Unresolved references to CSS classes",
          "enabled": false,
          "description": "<html>\n<body>\nReports arguments of methods like UIObject.setStyleName()\nand attributes like 'styleName' in ui.xml files which does not refer to a CSS class.\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtOverlayTypeRestrictionsViolated",
          "displayName": "Overlay type restrictions violated",
          "enabled": false,
          "description": "<html>\n<body>\nReports problems in overlay types (subclasses of JavaScriptObject class).\n</body>\n</html>"
        },
        {
          "shortName": "GwtInconsistentSerializableClass",
          "displayName": "Incorrect serializable class",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which implement the IsSerializable interface\nand violate the following conditions:\n<ul>\n  <li>serializable class should have public no-arg constructor\n  <li>all non-transient fields are serializable\n</ul>\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtIncorrectArgumentOfGwtCreateMethod",
          "displayName": "Incorrect argument of GWT.create() method",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection verifies that the argument of GWT.create() method is a class literal.\n</body>\n</html>"
        },
        {
          "shortName": "GwtDeprecatedPropertyKeyJavadocTag",
          "displayName": "Deprecated @gwt.key tag in JavaDoc comments",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <b><font color=\"#000080\">@gwt.key</font></b> tag in JavaDoc comment.\nThis tag is deprecated in GWT 1.5 and should be replaced with <b><font color=\"#000080\">LocalizableResource.Key</font></b> annotation.\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtServiceNotRegistered",
          "displayName": "GWT Remote Service is not registered in web.xml",
          "enabled": false,
          "description": "<html>\n<body>\nReports any GWT remote service which is not registered as a servlet in web.xml file\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtUiFieldAssignment",
          "displayName": "Assignment to @UiField fields",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments to fields marked with the @UiField annotation.\nSuch fields are initialized by UiBinder so they should not be changed by user code. If you want to initialize such fields in your code you\nneed to set the 'provided' attribute to 'true' in the @UiField annotation.\n\n</body>\n</html>"
        },
        {
          "shortName": "GwtUiBinderErrors",
          "displayName": "GWT UiBinder Errors",
          "enabled": false,
          "description": "<html>\n<body>\nReports errors related to custom UiBinder interface implementations\n</body>\n</html>"
        },
        {
          "shortName": "GwtObsoleteTypeArgsJavadocTag",
          "displayName": "Deprecated @gwt.typeArgs tag in JavaDoc comments",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <b><font color=\"#000080\">@gwt.typeArgs</font></b> tag in JavaDoc comment.\nThis tag is deprecated in GWT 1.5 and should be replaced by using parametrized types.\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtDefaultPackageNotRegistered",
          "displayName": "'client' package or 'public' directory is not registered in gwt.xml file",
          "enabled": false,
          "description": "<html>\n<body>\nReports GWT module descriptors which have &lt;source&gt; or\n&lt;super-source&gt; elements but does not have &lt;source path=&apos;client&apos;&gt; element. This is usually a mistake\nbecause the &apos;client&apos; subpackage is implicitly added to the source path only when there are no &lt;source&gt; or &lt;super-source&gt;\nelements.\n<br> <br>\nAlso this inspection reports GWT module descriptors which have &lt;public&gt; elements but does not have &lt;public path='public'&gt;\nelement.\n</body>\n</html>"
        },
        {
          "shortName": "GwtCssResourceErrors",
          "displayName": "CssResource Errors",
          "enabled": false,
          "description": "<html>\n<body>\nReports inconsistencies between interfaces extending CssResource\nand corresponding css files.\n</body>\n</html>"
        },
        {
          "shortName": "GwtUiHandlerErrors",
          "displayName": "@UiHandler Errors",
          "enabled": false,
          "description": "<html>\n<body>\nReports errors in @UiHandler annotated methods.\n</body>\n</html>"
        },
        {
          "shortName": "GwtInconsistentI18nInterface",
          "displayName": "Inconsistent GWT localizable interface",
          "enabled": false,
          "description": "<html>\n<body>\nReports any inconsistency between a methods of an interface extending Constants or Messages\nand a properties of the corresponding file\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtToHtmlReferences",
          "displayName": "Unresolved references to html tags",
          "enabled": false,
          "description": "<html>\n<body>\nReports arguments of the method RootPanel.get\nwhich do not refer to a html tag id.\n</body>\n</html>\n"
        },
        {
          "shortName": "NonJREEmulationClassesInClientCode",
          "displayName": "Classes not from JRE Emulation Library in client code",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages in client code of JDK classes which are not present in the JRE Emulation Library.\n</body>\n</html>\n"
        },
        {
          "shortName": "GwtMethodWithParametersInConstantsInterface",
          "displayName": "Method with parameters in interface extending Constants",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with parameters in an interface extending com.google.gwt.i18n.client.Constants.\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtClientClassFromNonInheritedModule",
          "displayName": "Client class from non inherited GWT module usages",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages in client code of classes from a GWT module which are not inherited by the current module.\n</body>\n</html>\n"
        },
        {
          "shortName": "GwtUiXmlReferences",
          "displayName": "Unresolved references in ui.xml files",
          "enabled": false,
          "description": "<html>\n<body>\nReports invalid references in ui.xml files.\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtUiFieldErrors",
          "displayName": "@UiField Errors",
          "enabled": false,
          "description": "<html>\n<body>\nReports errors related to @UiField annotated fields\nand \"ui:field\" attributes in ui.xml files.\n</body>\n</html>"
        },
        {
          "shortName": "GWTRemoteServiceAsyncCheck",
          "displayName": "Inconsistent GWT Remote Service",
          "enabled": false,
          "description": "<html>\n<body>\nReports any inconsistencies between methods of synchronous and\nasynchronous interfaces of a remote service.\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtJavaScriptReferences",
          "displayName": "Unresolved references in JSNI methods",
          "enabled": false,
          "description": "<html>\n<body>\nReports invalid references from JSNI methods to Java classes, methods or fields.\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtSetServiceEntryPointCalls",
          "displayName": "Redundant 'setServiceEntryPoint()' method calls",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <b><font color=\"#000080\">ServiceDefTarget.setServiceEntryPoint()</font></b>\nwhich can be replaced by a <b><font color=\"#000080\">@RemoteServiceRelativePath</font></b> annotation.\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtDeprecatedEventListeners",
          "displayName": "Deprecated event listeners",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of event listener classes which are deprecated in GWT 1.6.\n</body>\n</html>\n\n"
        },
        {
          "shortName": "GwtJavaFromJSMethodCalls",
          "displayName": "Incorrect calls of Java methods from JavaScript code",
          "enabled": false,
          "description": "<html>\n<body>\nReports incorrect calls of Java methods from JavaScript native interface methods\n</body>\n</html>"
        },
        {
          "shortName": "gwtRawAsyncCallback",
          "displayName": "Raw use of AsyncCallback in asynchronous service interfaces",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <b><font color=\"#000080\">com.google.gwt.user.client.rpc.AsyncCallback</font></b>\nwithout type parameter in asynchronous variants of service methods if GWT version 1.5 or later is used.\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableServiceParameters",
          "displayName": "Non-serializable parameter type or return type of service method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods of a remote service which have\nnon-serializable parameter types, return type or thrown exception types.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Redundant constructs",
      "inspections": [
        {
          "shortName": "RedundantGetter",
          "displayName": "Redundant property getter",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant property getters.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedSymbol",
          "displayName": "Unused symbol",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantSamConstructor",
          "displayName": "Redundant SAM constructor",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports SAM constructor usages which can be replaced with lambdas.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantSetter",
          "displayName": "Redundant property setter",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant property setters.\n</body>\n</html>\n"
        },
        {
          "shortName": "ExplicitThis",
          "displayName": "Redundant explicit 'this'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports usages of explicit <b>this</b> when it can be omitted.\n</body>\n</html>\n"
        },
        {
          "shortName": "CanBePrimaryConstructorProperty",
          "displayName": "Property is explicitly assigned to constructor parameter",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports properties which are explicitly assigned to constructor parameters and can be declared directly in the constructor instead.\n</body>\n</html>"
        },
        {
          "shortName": "RemoveEmptyClassBody",
          "displayName": "Replace empty class body",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports and offers to remove an empty class body.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantExplicitType",
          "displayName": "Explicitly given type is redundant here",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports local variables' explicitly given types which are obvious and thus redundant, like <b>val f: Foo = Foo()</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantCompanionReference",
          "displayName": "Redundant Companion reference",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant <b>Companion</b> reference, for example:\n<br /><br />\n\n<pre>\n<b>class</b> A {\n    <b>companion object</b> {\n        <b>fun</b> create() = \"Hello\"\n    }\n}\n<b>fun</b> test() {\n    <b>val</b> s = A.Companion.create() // redundant Companion reference\n}\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryVariable",
          "displayName": "Unnecessary local variable",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports local variables either used only in the very next <b>return</b> statement or exact copies of other variables.\nIn both cases it's better to inline such a variable.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantUnitReturnType",
          "displayName": "Redundant 'Unit' return type",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a redundant <b>Unit</b> return type which can be omitted.\n</body>\n</html>"
        },
        {
          "shortName": "RemoveRedundantBackticks",
          "displayName": "Remove redundant backticks",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant backticks in references.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantRequireNotNullCall",
          "displayName": "Redundant 'requireNotNull' or 'checkNotNull' call",
          "enabled": false,
          "description": "<html>\n<body>This inspection reports redundant <b>requireNotNull</b> or <b>checkNotNull</b> call:\n\n<pre>\nfun foo(i: Int) {\n  requireNotNull(i) // This 'i' is always not null, so this 'requireNotNull' call is redundant.\n}\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantSemicolon",
          "displayName": "Redundant semicolon",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant semicolon (<b>;</b>) tokens which are not required in Kotlin and may be removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinRedundantOverride",
          "displayName": "Redundant overriding method",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant <b>override</b> modifiers which can be omitted.\n</body>\n</html>"
        },
        {
          "shortName": "SimpleRedundantLet",
          "displayName": "Redundant receiver-based `let` call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects a redundant receiver-based <b>let</b> call.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantVisibilityModifier",
          "displayName": "Redundant visibility modifier",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveRedundantCallsOfConversionMethods",
          "displayName": "Remove redundant calls of conversion methods",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant calls of conversion methods (for example, <b>toString()</b> on a <b>String</b>).\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantEnumConstructorInvocation",
          "displayName": "Redundant enum constructor invocation",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant enum entry constructor invocation:\n\n<pre>\nenum class Foo {\n    A(), // This '()' is redundant.\n    B(),\n    C\n}\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "RemoveSetterParameterType",
          "displayName": "Redundant setter parameter type",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports explicitly given parameter types in property setters.\nA setter parameter type always matches the property type, so it's not required to be explicit.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveSingleExpressionStringTemplate",
          "displayName": "Remove redundant string template",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports single-expression string templates that can be safely removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveExplicitTypeArguments",
          "displayName": "Unnecessary type argument",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports function calls with type arguments that can be safely removed and inferred.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveEmptyParenthesesFromLambdaCall",
          "displayName": "Remove unnecessary parentheses from function call with lambda",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports unnecessary parentheses of function calls where the only parameter is a lambda that's outside the parentheses.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantWith",
          "displayName": "Redundant 'with' call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a redundant <b>with</b> function call that don't access anything from the receiver.\n</body>\n</html>"
        },
        {
          "shortName": "WhenWithOnlyElse",
          "displayName": "'when' has only 'else' branch and can be simplified",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>when</b> expressions with only an <b>else</b> branch that can be simplified to the <b>else</b> branch's expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantReturnLabel",
          "displayName": "Redundant 'return' label",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant return label outside of lambda.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantEmptyInitializerBlock",
          "displayName": "Redundant empty initializer block",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant empty initializer block.\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveRedundantQualifierName",
          "displayName": "Remove redundant qualifier name",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant qualifier name in references. For example:\n<pre>\n<b>package</b> my.simple.name\n<b>class</b> Foo\n\n<b>fun</b> test() {\n    <b>val</b> s = my.simple.name.Foo() // redundant qualifier name\n}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "RemoveEmptyPrimaryConstructor",
          "displayName": "Remove empty primary constructor",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects an empty primary constructor when it would be implicitly available anyway.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantSuspendModifier",
          "displayName": "Redundant 'suspend' modifier",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a <b>suspend</b> modifier as redundant if no other suspend functions are called inside.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantIf",
          "displayName": "Redundant 'if' statement",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>if</b> statements which can be simplified to single statements. For example:\n<br /><br />\n\n<pre>\n<b>if</b> (foo()) {\n   <b>return true</b>\n} <b>else</b> {\n   <b>return false</b>\n}\n</pre>\n\n<p>can be simplified to <b>return foo()</b>.</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveEmptySecondaryConstructorBody",
          "displayName": "Remove empty constructor body",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects empty bodies of secondary constructors.\n</body>\n</html>"
        },
        {
          "shortName": "KotlinUnusedImport",
          "displayName": "Unused import directive",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>import</b> statements in Kotlin code that are unused.\n</body>\n</html>"
        },
        {
          "shortName": "NullChecksToSafeCall",
          "displayName": "Null-checks replaceable with safe-calls",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports when chained null-checks can be replaced with safe-calls.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinDoubleNegation",
          "displayName": "Redundant double negation",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant double negation usages, like <b>val truth = !!true</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveToStringInStringTemplate",
          "displayName": "Remove redundant call to 'toString()' in string template",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports calls to <b>toString()</b> in string templates that can be safely removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantUnitExpression",
          "displayName": "Redundant 'Unit'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports a redundant <b>Unit</b> type specification which can be omitted.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantModalityModifier",
          "displayName": "Redundant modality modifier",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports modality modifiers which match the default modality of an element\n(<b>final</b> for most elements, <b>open</b> for members with an <b>override</b>).\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveExplicitSuperQualifier",
          "displayName": "Unnecessary supertype qualification",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>super</b> member calls with redundant supertype qualification.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveRedundantSpreadOperator",
          "displayName": "Redundant spread operator",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports the use of a redundant spread operator for a family of <b>arrayOf</b> function calls.\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifyWhenWithBooleanConstantCondition",
          "displayName": "Simplifiable 'when'",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects <b>when</b> expressions with <b>true</b> or <b>false</b> branches that can be simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveForLoopIndices",
          "displayName": "Unused loop index",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>for</b> loops iterating over a collection of values using a <b>withIndex()</b> function with index variable not used in the loop body.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveCurlyBracesFromTemplate",
          "displayName": "Redundant curly braces in string template",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports usages of curly braces in a string template around a simple identifier.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedReceiverParameter",
          "displayName": "Unused receiver parameter",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports an unused receiver parameter of extension functions and properties.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantLambdaArrow",
          "displayName": "Redundant lambda arrow",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports lambdas without parameters that use the lambda arrow.\n</body>\n</html>\n"
        },
        {
          "shortName": "ComplexRedundantLet",
          "displayName": "Redundant argument-based `let` call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects a redundant argument-based <b>let</b> call.\n</body>\n</html>\n"
        },
        {
          "shortName": "CanBeParameter",
          "displayName": "Constructor parameter is never used as a property",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports primary constructor parameters that can have <b>val</b> or <b>var</b> removed.\nUnnecessary usage of <b>val</b> or <b>var</b> in the primary constructor consumes memory.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConstantConditionIf",
          "displayName": "Condition of 'if' expression is constant",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>if</b> expressions whose condition is constant and therefore the expression can be simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedEquals",
          "displayName": "Unused equals expression",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports unused <b>equals</b> expressions.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Serialization issues",
      "inspections": [
        {
          "shortName": "ReadObjectInitialization",
          "displayName": "Instance field may not be initialized by 'readObject()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports variables which are not guaranteed to be initialized after the object is\ndeserialized by the <b>readObject()</b> method.\n<p>\nNote: This inspection uses a very conservative dataflow algorithm, and may report instance variables\nas uninitialized incorrectly. Variables reported as initialized will always be initialized.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableHasSerializationMethods",
          "displayName": "Serializable class without 'readObject()' and 'writeObject()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes\nwhich do not provide <b>readObject</b> and\n<b>writeObject</b> methods. If <b>readObject</b>\nand <b>writeObject</b> methods are not provided, the default serialization\nalgorithms are used, which may be sub-optimal in many environments for performance and compatibility\npurposes.\n<!-- tooltip end -->\n<p>\nUse the table below to specify what specific classes and inheritors should be excluded\nfrom being checked by this inspection. This is meant for those classes which, although they inherit\nSerializable from a superclass, are not intended for serialization. Such classes would lead this\ninspection to report unnecessarily.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableFieldInSerializableClass",
          "displayName": "Non-serializable field in a Serializable class",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>Serializable</b>\nfields in <b>Serializable</b> classes. Such fields will result\nin runtime exceptions if the object is serialized. Fields declared\n<b>transient</b> or <b>static</b>\nare not reported, nor are fields of classes which have defined a <b>writeObject</b>\nmethod. For purposes of this inspection, fields with\n<b>java.util.Collection</b> or\n<b>java.util.Map</b> types are assumed to be\n<b>Serializable</b>, unless the types\nthey are declared to contain are non-<b>Serializable</b>.\n<!-- tooltip end -->\n<p>\nUse the first list below to specify what specific classes and inheritors should be excluded\nfrom being checked by this inspection. This is meant for those classes which, although they inherit\nSerializable from a superclass, are not intended for serialization. Such classes would lead this\ninspection to report unnecessarily.\n<p>\nUse the second list below to specify special annotations. Fields annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableHasSerialVersionUIDField",
          "displayName": "Serializable class without 'serialVersionUID'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>Serializable</b> classes which do not provide a <b>serialVersionUID</b> field.\nWithout a <b>serialVersionUID</b> field, any change to a class will make previously serialized versions unreadable.\n<!-- tooltip end -->\n<p>\nUse the table below to specify what specific classes and inheritors should be excluded\nfrom being checked by this inspection. This is meant for those classes which, although they inherit\nSerializable from a superclass, are not intended for serialization. Such classes would lead this\ninspection to report unnecessarily.\n<p>\nUse the checkbox below to ignore <b>Serializable</b> anonymous classes.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableWithUnconstructableAncestor",
          "displayName": "Serializable class with unconstructable ancestor",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes whose closest non-serializable ancestor lacks\na no-argument constructor. Such classes can not be deserialized.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableWithSerializationMethods",
          "displayName": "Non-serializable class with 'readObject()' or 'writeObject()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>Serializable</b> classes which define <b>readObject()</b>\nor <b>writeObject()</b> methods. Such methods normally indicate programmer error.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableObjectPassedToObjectStream",
          "displayName": "Non-serializable object passed to ObjectOutputStream",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>Serializable</b> objects used as arguments to\n<b>java.io.ObjectOutputStream.write()</b>. Such calls will result in runtime exceptions.\nFor purposes of this inspection, objects with <b>java.util.Collection</b> or\n<b>java.util.Map</b> types are assumed to be <b>Serializable</b>, unless the types\nthey are declared to contain are non-<b>Serializable</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReadObjectAndWriteObjectPrivate",
          "displayName": "'readObject()' or 'writeObject()' not declared 'private'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes where the <b>readObject</b>\nand <b>writeObject()</b> methods are not declared <b>private</b>. There is no reason these methods should ever\nhave greater visibility than that.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExternalizableWithSerializationMethods",
          "displayName": "Externalizable class with 'readObject()' or 'writeObject()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Externalizable</b> classes which define <b>readObject()</b>\nor <b>writeObject()</b> methods. These methods are not called for serialization of\n<b>Externalizable</b> objects.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExternalizableWithoutPublicNoArgConstructor",
          "displayName": "Externalizable class without 'public' no-arg constructor",
          "enabled": false,
          "description": "<html>\n<body>\nReports a <b>Externalizable</b> classes without a public no-argument constructor.\nWhen an Externalizable object is reconstructed, an instance is created using the public no-arg constructor before the readExternal\nmethod called. If a public no-arg constructor is not present a <b>java.io.InvalidClassException</b> will be thrown at runtime.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SerialVersionUIDNotStaticFinal",
          "displayName": "'serialVersionUID' field not declared 'private static final long'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes whose <b>serialVersionUID</b> field\nis not declared <b>private static final long</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ComparatorNotSerializable",
          "displayName": "Comparator class not declared Serializable",
          "enabled": false,
          "description": "<html>\n<body>\nReports on subclasses of <b>java.lang.Comparator</b> which are not\nalso <b>Serializable</b>. Objects of <b>java.util.TreeMap</b>\nor <b>java.util.TreeSet</b> will become non-<b>Serializable</b>\nif instantiated with such <b>Comparator</b>s. This can result in unexpected and difficult-to-diagnose\nbugs. Since subclasses of <b>java.lang.Comparator</b> are often stateless, simply marking\nthem <b>Serializable</b> is a small cost to avoid such issues.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerialPersistentFieldsWithWrongSignature",
          "displayName": "'serialPersistentFields' field not declared 'private static final ObjectStreamField[]'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes whose <b>serialPersistentFields</b> field.\nis not declared <b>private static final ObjectStreamField[]</b>.\nIf the <b>serialPersistentFields</b> field does not have these modifiers,\nthe serialization behavior will be as if the field were not declared at all.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableInnerClassWithNonSerializableOuterClass",
          "displayName": "Serializable non-'static' inner class with non-Serializable outer class",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> non-static\ninner classes whose outer classes are non-<b>Serializable</b>. Such classes\nare unlikely to serialize correctly, due to implicit references from the inner to outer class.\n<!-- tooltip end -->\n<p>\nUse the table below to specify what specific classes and inheritors should be excluded\nfrom being checked by this inspection. This is meant for those classes which, although they inherit\nSerializable from a superclass, are not intended for serialization. Such classes would lead this\ninspection to report unnecessarily.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableObjectBoundToHttpSession",
          "displayName": "Non-serializable object bound to HttpSession",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>Serializable</b> objects used as arguments to\n<b>javax.servlet.http.HttpSession.setAttribute()</b> or\n<b>javax.servlet.http.HttpSession.putValue()</b>.\nSuch objects will not be serialized if the HttpSession is passivated or migrated, and may result in difficult-to-diagnose\nbugs. For purposes of this inspection, objects with <b>java.util.Collection</b> or\n<b>java.util.Map</b> types are assumed to be <b>Serializable</b>, unless the types\nthey are declared to contain are non-<b>Serializable</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableStoresNonSerializable",
          "displayName": "Serializable object implicitly stores non-Serializable object",
          "enabled": false,
          "description": "<html>\n<body>\nChecks lambda's, local and anonymous classes and reports references to local variables outside the class or lambda that are not\n<b>Serializable</b>.\nWhen a local variable is referenced from an anonymous class, it's value is stored in an implicit field in the anonymous class.\nThe same happens for local classes and lambda's.\nIf that variable is of a non-Serializable type, serialization will fail.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ReadResolveAndWriteReplaceProtected",
          "displayName": "'readResolve()' or 'writeReplace()' not declared 'protected'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> classes where the <b>readResolve()</b>\nand <b>writeReplace()</b> methods are not declared <b>protected</b>. Note: in the case\nof classes declared <b>final</b>, these methods may be\ndeclared <b>private</b>, instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TransientFieldInNonSerializableClass",
          "displayName": "Transient field in non-serializable class",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>transient</b> fields in non-<b>Serializable</b> classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableWithSerialVersionUIDField",
          "displayName": "Non-serializable class with 'serialVersionUID'",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>Serializable</b> classes which define a <b>serialVersionUID</b>\nfield. This is usually an indication of a programmer error.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TransientFieldNotInitialized",
          "displayName": "Transient field is not initialized on deserialization",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>transient</b> fields which\nare initialized during normal object construction, but whose class does not have a\n<b>readObject</b> method.\nBecause <b>transient</b> fields are not serialized they need\nto be initialized separately in a <b>readObject</b> method\nduring deserialization. Any <b>transient</b> fields which \nare not initialized during normal object construction are considered to use the default\ninitialization and are not reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableInnerClassHasSerialVersionUIDField",
          "displayName": "Serializable non-'static' inner class without 'serialVersionUID'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Serializable</b> non-static\ninner classes which do not provide a <b>serialVersionUID</b> field.\nWithout a <b>serialVersionUID</b> field, any change to a class will make previously serialized versions unreadable.\nIt is strongly recommended that <b>Serializable</b> non-static inner classes have\na <b>serialVersionUID</b> field, otherwise the default serialization algorithm\nmay result in serialized versions being incompatible between compilers, due to differences in synthetic\naccessor methods.\n<!-- tooltip end -->\n<p>\nUse the table below to specify what specific classes and inheritors should be excluded\nfrom being checked by this inspection. This is meant for those classes which, although they inherit\nSerializable from a superclass, are not intended for serialization. Such classes would lead this\ninspection to report unnecessarily.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Batch Applications",
      "inspections": [
        {
          "shortName": "BatchJobDomInspection",
          "displayName": "Job Xml issues",
          "enabled": false,
          "description": "<html>\n<body>\nBatch Job File issues.\n</body>\n</html>\n"
        },
        {
          "shortName": "BatchXmlDomInspection",
          "displayName": "batch.xml issues",
          "enabled": false,
          "description": "<html>\n<body>\nbatch.xml config file errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "RequiredArtifactTypeInspection",
          "displayName": "Required Artifact Ref Type",
          "enabled": false,
          "description": "<html>\n<body>\nChecks required types in batch files\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "HTML",
      "inspections": [
        {
          "shortName": "HtmlDeprecatedAttribute",
          "displayName": "Deprecated HTML attribute",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights attributes deprecated in HTML5.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlExtraClosingTag",
          "displayName": "Redundant closing tag for HTML element",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection spots extra closing tag for the empty elements like IMG or BR. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "CheckImageSize",
          "displayName": "Image size mismatch",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights <code>width</code> and <code>height</code> attribute values of <code>IMG</code> tag\nthat are different from the width and height of the original image. <br>\n</body>\n</html>"
        },
        {
          "shortName": "RequiredAttributes",
          "displayName": "Missing required attribute",
          "enabled": false,
          "description": "<html>\n<body>\nReports XML/HTML tags with missing mandatory attributes.\nYou can specify attribute names that should not be reported.\n</body>\n</html>\n"
        },
        {
          "shortName": "HtmlUnknownAnchorTarget",
          "displayName": "Anchor reference problems",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks unresolved anchor references in HTML. <br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlUnknownBooleanAttribute",
          "displayName": "Unknown HTML boolean tag attribute",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights HTML non-boolean tag attributes without value as invalid, and lets mark such attributes as Custom to avoid highlighting them as\ninvalid.<br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlUnknownTag",
          "displayName": "Unknown HTML tag",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights unknown HTML tags, and lets mark such tags as Custom to avoid highlighting them as unknown in future. <br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlUnknownTarget",
          "displayName": "File reference problems",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks unresolved file references in HTML. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CheckValidXmlInScriptTagBody",
          "displayName": "Malformed content of <script> tag",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that the <b>script</b> tag content is valid XML. <br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlMissingClosingTag",
          "displayName": "Missing closing tag",
          "enabled": false,
          "description": "<html>\n<body>\nReports HTML elements without a closing tag.\nSome coding styles require a closing tag on HTML elements even where this is optional.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlPresentationalElement",
          "displayName": "Presentational HTML tag",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights pure presentational HTML tags and provides the ability to replace them with CSS or with other tags. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CheckEmptyScriptTag",
          "displayName": "Empty tag",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty tags (like <b>script</b> ) that do not work in some browsers.\nThe validation works in html or jsp file types. <br>\n\n\n</body>\n</html>"
        },
        {
          "shortName": "HtmlNonExistentInternetResource",
          "displayName": "Non-existent web resource",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights links to non-existent web resources.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlUnknownAttribute",
          "displayName": "Unknown HTML tag attribute",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights unknown HTML tag attributes as invalid, and lets mark such attributes as Custom to avoid highlighting them as\ninvalid. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "HtmlDeprecatedTag",
          "displayName": "Deprecated HTML tag",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights deprecated HTML tags and provides ability to replace them with CSS or with other tags for some of them. <br>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring Boot",
      "inspections": [
        {
          "shortName": "SpringBootApplicationYaml",
          "displayName": "Spring Boot application.yml",
          "enabled": false,
          "description": "<html>\n<body>\nChecks Spring Boot application <code>.yaml</code> configuration files.\nHighlights unresolved and deprecated configuration keys and invalid values.\n<!-- tooltip end -->\n<p>\n  Values inside replacement token (<code>@property.key@</code>) will not be highlighted.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SpringBootAdditionalConfig",
          "displayName": "Spring Boot additional-spring-configuration-metadata.json",
          "enabled": false,
          "description": "<html>\n<body>\nChecks Spring Boot <code>additional-spring-configuration-metadata.json</code> configuration file.\nHighlights unresolved references and invalid values.\n</body>\n</html>"
        },
        {
          "shortName": "ConfigurationProperties",
          "displayName": "Spring Boot @ConfigurationProperties",
          "enabled": false,
          "description": "<html>\n<body>\nVerifies <code>@ConfigurationProperties</code> setup.\n<small>New in 2018.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "SpringBootReactorHooksOnDebug",
          "displayName": "Suspicious Hooks.onOperatorDebug() usage",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Highlights usage of <code>Hooks.onOperatorDebug()</code> when <code>ReactorDebugAgent.init()</code> is called.\n  Starting from Spring 2.2.0, if <code>ReactorDebugAgent</code> is in the classpath, and <code>spring.reactor.debug-agent.enabled</code>\n  is <code>true</code> (by default, it is <code>true</code>) <code>ReactorDebugAgent.init()</code> is called automatically at\n  startup.\n  Using both <code>Hooks.onOperatorDebug()</code> and <code>ReactorDebugAgent.init()</code> cause doubled debugging stack frames,\n  generated by Reactor. Also, <code>Hooks.onOperatorDebug()</code> can cause performance overhead.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SpringBootApplicationSetup",
          "displayName": "Spring Boot Application Setup",
          "enabled": false,
          "description": "<html>\n<body>\nChecks Spring Boot Application Setup.\n<ul>\n  <li><code>@SpringBootApplication</code> used in default package</li>\n  <li><code>Redundant @ComponentScan declaration</code></li>\n  <li><code>Redundant @EnableAutoConfiguration declaration</code></li>\n</ul>\n<small>New in 2018.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "SpringBootApplicationProperties",
          "displayName": "Spring Boot application.properties",
          "enabled": false,
          "description": "<html>\n<body>\nChecks Spring Boot application <code>.properties</code> configuration files.\nHighlights unresolved and deprecated configuration keys and invalid values.\n<!-- tooltip end -->\n<p>\n  Values inside replacement token (<code>@property.key@</code>) will not be highlighted.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring AOP",
      "inspections": [
        {
          "shortName": "MissingAspectjAutoproxyInspection",
          "displayName": "Missing aspectj-autoproxy",
          "enabled": false,
          "description": "In Spring versions before 2.5, one should have <strong>&lt;aop:aspectj-autoproxy/&gt;</strong> to enable @AspectJ annotations.\nChecks presence and suggests quick fix."
        },
        {
          "shortName": "SpringAopErrorsInspection",
          "displayName": "Spring AOP Errors",
          "enabled": false,
          "description": "<li> Advices and advisors should contain either pointcut or pointcut-ref attribute\n<li> Highlights AspectJ pointcut designators which are not supported by Spring    "
        },
        {
          "shortName": "JdkProxiedBeanTypeInspection",
          "displayName": "JDK-proxied beans type",
          "enabled": false,
          "description": "Checks reference type for JDK-proxied beans.\nSee <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop-api.html#aop-pfb-proxy-types\">JDK- and CGLIB-based proxies</a>\nsection of Spring documentation for details."
        },
        {
          "shortName": "SpringAopWarningsInspection",
          "displayName": "Spring AOP Warnings",
          "enabled": false,
          "description": "Check that aspects have ref attribute and pointcuts have id attribute.<br>\nWarns about aspect beans being matched by some AOP advices, which leads to runtime errors."
        }
      ]
    },
    {
      "name": "Arquillian",
      "inspections": [
        {
          "shortName": "ArquillianTooManyDeployment",
          "displayName": "Arquillian test class should have only one method with @Deployment annotation",
          "enabled": false,
          "description": "<html>\n<body>\nArquillian test class should have only one method with @Deployment annotation\n</body>\n</html>"
        },
        {
          "shortName": "ArquillianDeploymentSignature",
          "displayName": "Wrong signature of @Deployment method",
          "enabled": false,
          "description": "<html>\n<body>\n  Method annotated with @Deployment should be public static\n</body>\n</html>"
        },
        {
          "shortName": "ArquillianDeploymentReturnType",
          "displayName": "Wrong return type of @Deployment method",
          "enabled": false,
          "description": "<html>\n<body>\nMethod annotated with @Deployment should return ShrinkWrap archive\n</body>\n</html>"
        },
        {
          "shortName": "ArquillianClassEnabled",
          "displayName": "Arquillian test class should be properly prepared",
          "enabled": false,
          "description": "<html>\n<body>\n  Arquillian test class should be properly prepared for testing\n<p>\n  Arquillian TestNG test class should extend org.jboss.arquillian.testng.Arquillian\n<p>\n  Arquillian JUnit test class should be annotated with @RunWith(Arquillian.class)\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "ArquillianDeploymentAbsent",
          "displayName": "Arquillian test class should have method with @Deployment annotation",
          "enabled": false,
          "description": "<html>\n<body>\nArquillian test class should have public static method with @Deployment annotation\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Pattern validation",
      "inspections": [
        {
          "shortName": "PatternOverriddenByNonAnnotatedMethod",
          "displayName": "Non-annotated Method overrides @Pattern Method",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        This inspecton Checks whether a method without any <code>@Pattern</code> or derived annotation overrides an annotated\n        method from its base classes. This is not necessary for the error-highlighting inside the editor, however the\n        runtime-check instrumentation doesn't pick up annotations from base-class methods.\n      </p>\n\n      <p>\n        A QuickFix is provided to add an annotation that matches the one from the base-class method. This ensures the\n        runtime-check instrumentation works correctly.\n      </p>\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\"><p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        },
        {
          "shortName": "PatternNotApplicable",
          "displayName": "Pattern Annotation not applicable",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        Checks whether a pattern-validation annotation (<code>@Pattern</code> or derived ones)\n        is valid to be applied to the annotated element. Only elements of type <code>String</code>\n        may be annotated.\n      </p>\n\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\"><p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        },
        {
          "shortName": "PatternValidation",
          "displayName": "Validate annotated patterns",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        Provides on-the-fly validation for expressions passed as argments for <code>@Pattern</code> parameters and\n        values returned from <code>@Pattern</code>-annotated methods.\n      </p>\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\">\n        <p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "docker-compose",
      "inspections": [
        {
          "shortName": "ComposeUnknownKeys",
          "displayName": "Unknown docker-compose YAML keys",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection finds unrecognized keys in `docker-compose` files and highlights them in the editor.\n<br>\n</body>\n</html>"
        },
        {
          "shortName": "ComposeUnknownValues",
          "displayName": "Unknown docker-compose YAML values",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection finds unrecognized values in `docker-compose` files and highlights them in the editor.\n<br>\n</body>\n</html>"
        },
        {
          "shortName": "ComposeMissingKeys",
          "displayName": "Missing docker-compose YAML keys",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection finds missing required keys in `docker-compose` files and highlights them in the editor.\n<br>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "YAML",
      "inspections": [
        {
          "shortName": "YAMLUnusedAnchor",
          "displayName": "Unused anchor",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights unused anchors.\n</body>\n</html>"
        },
        {
          "shortName": "YAMLSchemaDeprecation",
          "displayName": "Deprecated YAML key",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection checks for deprecated keys in YAML files<br>\nDeprecation is checked only if there exists a JSON schema associated with corresponding YAML file.<br>\nNote that deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard extension 'deprecationMessage'.\n</body>\n</html>"
        },
        {
          "shortName": "YAMLRecursiveAlias",
          "displayName": "Recursive alias",
          "enabled": false,
          "description": "<html>\n<body>\nAlias can't be recursive and used inside data referenced by corresponding anchor\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "YAMLUnresolvedAlias",
          "displayName": "Unresolved alias",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection warns about unresolved aliases in yaml files\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "YAMLDuplicatedKeys",
          "displayName": "Duplicated YAML keys",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects duplicated keys in YAML files and highlights them in the editor.\n<br>\n</body>\n</html>"
        },
        {
          "shortName": "YAMLSchemaValidation",
          "displayName": "Validation by JSON Schema",
          "enabled": false,
          "description": "<html>\n<body>\nValidates YAML file against a JSON Schema, if the schema is specified\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Data flow",
      "inspections": [
        {
          "shortName": "LawOfDemeter",
          "displayName": "Method call violates Law of Demeter",
          "enabled": false,
          "description": "<html>\n<body>\nReports any Law of Demeter violations.\nSee here <a href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\">http://en.wikipedia.org/wiki/Law_of_Demeter</a>\nfor an explanation what the Law of Demeter is.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryLocalVariable",
          "displayName": "Redundant local variable",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary local variables, which add\nnothing to the comprehensibility of a method. Variables caught include local variables\nwhich are immediately returned, local variables that are immediately assigned to another\nvariable and then not used, and local variables which always have the same value as another\nlocal variable or parameter.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to have this inspection ignore variables which are immediately\nreturned or thrown. Some coding styles suggest using such variables for clarity and\nease of debugging.\n<p>\nUse the second checkbox below to have this inspection ignore variable which are annotated.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BooleanVariableAlwaysNegated",
          "displayName": "Boolean variable is always inverted",
          "enabled": false,
          "description": "<html>\n<body>\nReports any boolean variables or fields which are always negated\nwhen its value is used.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "TooBroadScope",
          "displayName": "Scope of variable is too broad",
          "enabled": false,
          "description": "<html>\n<body>\nReports any variable declarations which can be moved to a smaller scope. Especially\nuseful for <i>Pascal style</i> declarations at the start of a method, but variables with too broad\na scope are also often left over after refactorings.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to only report variables that can be moved inside deeper code blocks.\n<p>\nUse the second checkbox below to report variables which are initialized\nwith a new expression. This makes the inspection potentially unsafe in cases where the\nconstructor has non-local side-effects.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyUnusedIncOrDec",
          "displayName": "Unused incrementing or decrementing",
          "enabled": false,
          "description": "<html>\n<body>\nReports on unnecessary incrementing and decrementing expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyVariableNotAssigned",
          "displayName": "Variable Not assigned",
          "enabled": false,
          "description": "<html>\n<body>\nReports variables that might not have been initialized.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnusedAssignment",
          "displayName": "Unused assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary assignments.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReuseOfLocalVariable",
          "displayName": "Reuse of local variable",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables that are \"reused\", overwriting their\nvalues with new values unrelated to their original use. Such local variable reuse may be confusing,\nas the intended semantics of the local variable may vary with each use. It may also be\nprone to bugs, if code changes result in values that were thought to be overwritten actually\nbeing live. It is good practices to keep variable lifetimes as short as possible, and not\nreuse local variables for the sake of brevity.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantValueVariableUse",
          "displayName": "Use of variable whose value is known to be constant",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of variables which are known to be constant. This\nis the case if the (read) use of the variable is surrounded by an\n<b>if</b>, <b>while</b> or <b>for</b>\nstatement with an <b>==</b> condition which compares the variable with a constant. In such\na case the use\nof a variable which is known to be constant can be replaced with the actual constant.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyMissingReturnStatement",
          "displayName": "Missing return statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports missing <b>return</b> statements at the end of methods with a non-<b>void</b> return type.\n</body>\n</html>\n"
        },
        {
          "shortName": "BooleanMethodIsAlwaysInverted",
          "displayName": "Boolean method is always inverted",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with a <b>boolean</b> return type, which are only used in a negated context.\nDue to performance reasons some methods might not be reported during in-editor highlighting.\n<p>\nFor example:\n<code><pre>\n<b>class</b> C {\n  <b>boolean</b> inverted() {\n    <b>return</b> <b>true</b>;\n  }\n\n  <b>void</b> f() {\n    <b>if</b> (!inverted()) {\n      <b>return</b>;\n    }\n  }\n  <b>boolean</b> member = !inverted();\n}  \n</pre></code>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "NegativelyNamedBooleanVariable",
          "displayName": "Negatively named boolean variable",
          "enabled": false,
          "description": "<html>\n<body>\nReports negatively named variables, for example 'disabled', 'hidden', 'isNotChanged'.\nIt is usually more clear to invert the <b>boolean</b> value and remove the negation from the name.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryLocalVariableJS",
          "displayName": "Redundant local variable",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary local variables, which add\nnothing to the comprehensibility of a function.  Variables caught include local variables\nwhich are immediately returned, local variables that are immediately assigned to another\nvariable and then not used, and local variables which always have the same value as another\nlocal variable or parameter.\n<p>\nUse the checkbox below to have this inspection ignore variables which are immediately\nreturned or thrown.  Some coding styles suggest using such variables for clarity and\nease of debugging.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyVariableCanBeFinal",
          "displayName": "Variable can be final",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables or parameters that can be final.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReuseOfLocalVariableJS",
          "displayName": "Reuse of local variable",
          "enabled": false,
          "description": "<html>\n<body>\nReports where local variables are \"reused\", overwriting their\nvalues with new values unrelated to their original use.  Such local variable reuse may be confusing,\nas the intended semantics of the local variable may vary with each use.  It may also be\nprone to bugs, if code changes result in values that were thought to be overwritten actually\nbeing live.   It is good practices to keep variable lifetimes as short as possible, and not\nreuse local variables for the sake of brevity.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Try statement issues",
      "inspections": [
        {
          "shortName": "ExceptionCaughtLocallyJS",
          "displayName": "Exception used for local control-flow",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>throw</b> statements whose exceptions are always\ncaught by containing <b>try</b> statements. Using <b>throw</b>\nstatements as a \"goto\" to change the local flow of control is likely to be confusing.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedCatchParameterJS",
          "displayName": "Unused 'catch' parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>catch</b> parameters that are unused in their\ncorresponding blocks.  This inspection will not report <b>catch</b> parameters\nnamed \"ignore\" or \"ignored\".\n<p>\n    Use the checkbox below to disable this inspection for <b>catch</b>\n    blocks with comments.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "EmptyCatchBlockJS",
          "displayName": "Empty 'catch' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <b>catch</b> blocks.\nEmpty <b>catch</b> blocks are a sign that errors are simply being ignored, rather than properly handled.\n</body>\n</html>\n"
        },
        {
          "shortName": "EmptyTryBlockJS",
          "displayName": "Empty 'try' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <b>try</b> blocks.\nEmpty <b>try</b> blocks are usually the result of a coding error.\n</body>\n</html>\n"
        },
        {
          "shortName": "ContinueOrBreakFromFinallyBlockJS",
          "displayName": "'continue' or 'break' inside 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> or <b>continue</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such statements are very confusing, may mask exceptions thrown, and\ntremendously complicate debugging.\n</body>\n</html>\n"
        },
        {
          "shortName": "ThrowFromFinallyBlockJS",
          "displayName": "'throw' inside 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>throw</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such <b>throw</b> statements may mask\nexceptions thrown, and tremendously complicate debugging.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReturnFromFinallyBlockJS",
          "displayName": "'return' inside 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>return</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such <b>return</b> statements may mask\nexceptions thrown, and tremendously complicate debugging.\n</body>\n</html>\n"
        },
        {
          "shortName": "EmptyFinallyBlockJS",
          "displayName": "Empty 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <b>finally</b> blocks.\nEmpty <b>finally</b> blocks are usually the result of a coding error.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "CssMissingSemicolon",
          "displayName": "Missing semicolon",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects missing semicolon at the end of declarations. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "NestedMethodCall",
          "displayName": "Nested method call",
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls used as parameters of another\nmethod call.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore method calls in field initializers.\n<p>\nUse the second checkbox below to ignore calls to static methods.\n<p>\nUse the third checkbox below to ignore calls to simple getters.\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryToStringCall",
          "displayName": "Unnecessary call to 'toString()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any calls to <b>toString()</b> used in string concatenations and as arguments to the\n<b>print()</b> and <b>println()</b> methods of <b>java.io.PrintWriter</b> and <b>java.io.PrintStream</b>, the <b>append()</b>\nmethod of <b>java.lang.StringBuilder</b> and <b>java.lang.StringBuffer</b> or the <b>trace()</b>, <b>debug()</b>, <b>info()</b>,\n<b>warn()</b> and <b>error()</b> methods of <b>org.slf4j.Logger</b>. In these cases the conversion\nto string will be handled by the underlying library methods and an explicit call to <b>toString()</b> is no needed.\n<p>\nNote that without the <b>toString()</b> call the expression will have slightly different semantics (the string <b>null</b> will be used instead of\n throwing a <b>NullPointerException</b>).\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any unnecessary semicolons, whether between class members, inside block statements, or after\nclass definitions. While valid Java, these semicolons are redundant, and may be removed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CharsetObjectCanBeUsed",
          "displayName": "Standard Charset object can be used",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods and constructors where constant charset String literal is used (like <b>\"UTF-8\"</b>) which could be replaced with\na predefined Charset object like <b>StandardCharsets.UTF_8</b>. This may work a little bit faster, because charset lookup becomes\nunnecessary. Also catching <b>UnsupportedEncodingException</b> may become unnecessary as well. In this case the catch block will\nbe removed automatically.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "MultipleVariablesInDeclaration",
          "displayName": "Multiple variables in one declaration",
          "enabled": false,
          "description": "<html>\n<body>\nReports multiple variables declared in a single declaration.\nSome coding standards prohibit such declarations.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore multiple variables declared in the initialization of a 'for' loop statement, e.g.:\n<pre><code><b>for</b> (int i = 0, max = list.size(); i < max; i++) {}</code></pre>\n<p>\nUse the second checkbox below to only warn when variables with different array dimensions are declared in a single declaration, e.g.:\n<pre><code>String s = \"\", array[];</code></pre>\n<p>\n<small>New in 2019.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarySuperQualifier",
          "displayName": "Unnecessary 'super' qualifier",
          "enabled": false,
          "description": "<html>\n<body>\nReports any unnecessary uses of the <b>super</b>\nqualifier in method calls and fields references. A super qualifier is unnecessary\nwhen the field or method of the super class is not overridden in the calling class.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore qualifiers, which help to distinguish super members access from the same named members of the outer class.\n  See also\n  <ul>\n   <li>Java | Visibility issues | Access of inherited field looks like access of element in surrounding code</li>\n   <li>Java | Visibility issues | Call to inherited method looks like call to local method</li>\n  </ul>\n<p>\n\n\n</body>\n</html>"
        },
        {
          "shortName": "ConfusingOctalEscape",
          "displayName": "Confusing octal escape sequence",
          "enabled": false,
          "description": "<html>\n<body>\nReports any string literals which contain an octal escape sequence immediately followed by\na digit. Such strings may be confusing, and are often the result of errors in escape code creation.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarilyQualifiedStaticallyImportedElement",
          "displayName": "Unnecessarily qualified statically imported element",
          "enabled": false,
          "description": "<html>\n<body>\nReports any references to static members which are statically imported and also qualified with\ntheir containing class name. Because the elements are already statically imported such qualification is unnecessary\nand can be removed.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableAnnotation",
          "displayName": "Simplifiable annotation",
          "enabled": false,
          "description": "<html>\n<body>\nReports annotations which can be simplified to their 'single element'\nor 'marker' shorthand form. Annotations that contain whitespace between the @-sign and the name\nof the annotation are also reported.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ArrayCreationWithoutNewKeyword",
          "displayName": "Array creation without 'new' expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports array initializer without new array expression, like <code>int[] a = {42}</code>.\n<p>The quick fix for this inspection adds a new array expression to the initializer, e.g. <code>int[] a = new int[]{42}</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSArrowFunctionBracesCanBeRemoved",
          "displayName": "Braces around arrow function body can be removed",
          "enabled": false,
          "description": "<html>\n<body>\nReports arrow functions where the body contains exactly one statement and can be converted to concise syntax without braces.\n<!-- tooltip end -->\n<p>\n  <code>\n    let incrementer = (x) => {return x + 1};\n  </code>\n</p>\nto\n<p>\n  <code>\n    let incrementer = (x) => x + 1;\n  </code>\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifiableIfStatement",
          "displayName": "If statement can be replaced with ?:, && or || expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports 'if' statements which can be replaced with condition using '&&', '||' or '?:' operator.\nThe result is usually shorter, but not always more clear, so it's not advised to apply it everywhere.\nAlso this change may reduce compiled bytecode size which could be useful in some environments like Java ME.\n<p>\n  Example: <b>if (<i>condition</i>) return true; else return <i>foo</i>;</b> could be replaced with\n  <b>return <i>condition</i> || <i>foo</i>;</b>\n</p>\n  <!-- tooltip end -->\n<p>\n  Use the first checkbox to skip warning when '?:' operator is suggested. In this case only '&&' and '||' suggestions\n  will be highlighted. The fix action to replace with '?:' will still be available in the editor.\n</p>\n<p>\n  Use the second checkbox to skip warning on 'if-else' chains. The fix action will still be available in the editor.\n</p>\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "AssertMessageNotString",
          "displayName": "'assert' message is not a String",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>assert</b> messages which are not of type <b>java.lang.String</b>.\nBy using a String more information can be provided to help diagnose the failure,\nor the reason for the assertion.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to only warn when the <b>assert</b> message type is <b>boolean</b> or <b>java.lang.Boolean</b>.\nA <b>boolean</b> detail message is unlikely to provide additional information about an assertion failure,\n  and could possibly be the result of a mistakenly entered <b>':'</b> instead of a <b>'&'</b>.\n<p>\n<small>New in 15</small>\n</body>\n</html>\n"
        },
        {
          "shortName": "MethodRefCanBeReplacedWithLambda",
          "displayName": "Method reference can be replaced with lambda",
          "enabled": false,
          "description": "<html>\n<body>\nReports method references, like <code>MyClass::myMethod</code> and <code>myObject::myMethod</code>.\n<p> The quick fix for the inspection replaces the method reference with an equivalent lambda expression that invokes the method.\n<p>For example, the method reference <code>System.out::println</code> is replaced with\n<code>s&nbsp;->&nbsp;System.out.println(s)</code>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryFullyQualifiedName",
          "displayName": "Unnecessary fully qualified name",
          "enabled": false,
          "description": "<html>\n<body>\nReports on fully qualified class names which can be shortened. The quick fix for this\ninspection will shorten the fully qualified names, adding import statements as necessary.\n<!-- tooltip end -->\n<p>\nIn <code>Settings | Code Style | Java | Imports</code> two settings can be found which influence this inspection.\nUse the settings there to  specify if references to inner classes\nshould be qualified with the outer class and if fully qualified names are allowed in javadoc.\n<p>\nUse the checkbox below to ignore fully qualified names inside the Java 9 <b>provides</b> and <b>uses</b> module statements.\n</body>\n</html>"
        },
        {
          "shortName": "CallToStringConcatCanBeReplacedByOperator",
          "displayName": "Call to 'String.concat()' can be replaced with '+'",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to the <b>concat</b> method\nof a <b>java.lang.String</b> object. Such calls can be\nreplaced with the '+' operator for increased code clarity and possible increased\nperformance if the method was invoked on a constant with a constant argument.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryFinalOnLocalVariableOrParameter",
          "displayName": "Unnecessary 'final' on local variable or parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables or parameters unnecessarily declared <b>final</b>.\nSome coding standards frown on variables declared <b>final</b>, for reasons of terseness.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to enable or disable warnings on local variables\n<p>\nUse the second checkbox below to enable or disable warnings on parameters (including\nparameters of <b>catch</b> blocks and enhanced <b>for</b> statements)\n<p>\nUse the third checkbox below to only warn on <b>final</b> parameters of <b>abstract</b> or <b>interface</b>\nmethods, which may be considered extra unnecessary, as such markings have no\neffect on the implementation of these methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryInterfaceModifier",
          "displayName": "Unnecessary interface modifier",
          "enabled": false,
          "description": "<html>\n<body>\nReports any redundant modifiers on interfaces or interface components.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BlockMarkerComments",
          "displayName": "Block marker comment",
          "enabled": false,
          "description": "<html>\n<body>\nReports comments which are used as code block markers. For example:<br>\n<pre><code>\n  while (i &lt; 10) {\n    i++;\n  } <b>// end while</b>\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ChainedEqualityJS",
          "displayName": "Chained equality",
          "enabled": false,
          "description": "<html>\n<body>\nReports chained equality comparisons (i.e. <b>a==b==c</b>).  Such comparisons are confusing.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryConstantArrayCreationExpression",
          "displayName": "Redundant 'new' expression in constant array creation",
          "enabled": false,
          "description": "<html>\n<body>\nReports any constant new array expression, like <code>int[] a = new int[]{42}</code> which can be replaced\nwith an array initializer, e.g. <code>int[] a = {42}</code>. Array initializers omit the type declaration because\nthat is already specified by the declaration of the variable the expression is\nassigned to.\n</body>\n</html>"
        },
        {
          "shortName": "SizeReplaceableByIsEmpty",
          "displayName": "'size() == 0' replaceable with 'isEmpty()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>.size()</b> or <b>.length()</b>\ncomparisons with a <b>0</b> literal which can be replaced with a call to <b>.isEmpty()</b>.\n<!-- tooltip end -->\n<p>\nUse the table below to add classes for which any <b>.size()</b> or <b>.length()</b> comparisons should not be replaced.\n<p>\nUse the checkbox below to ignore any expressions which would be replaced with '!isEmpty()'.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoCommentLeadingSpace",
          "displayName": "Comment has no leading space",
          "enabled": false,
          "description": "<html>\n<body>\nReports comments without a leading space.\n<p>Comments with leading space can be easier to read since the first word is separated from the comment by a space.</p>\n</body>\n</html>"
        },
        {
          "shortName": "RawTypeCanBeGeneric",
          "displayName": "Raw type can be generic",
          "enabled": false,
          "description": "<html>\n<body>\nReports variable declarations with initializer where the variable type is declared with\n<b>raw</b> type whereas initializer has fully parameterized <b>generic</b> type, e.g.\n<code>List&nbsp;list&nbsp;=&nbsp;new ArrayList&lt;String&gt;()</code>\n<p> The quick fix adds generic parameters to the variable type. The result would be like the following:\n<pre><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;()</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryThis",
          "displayName": "Unnecessary 'this' qualifier",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any unnecessary uses of <b>this</b> in the code.\nUsing <b>this</b> to\ndisambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged\nby many coding styles.\n<p>\nFor example:\n<pre><code><b>this</b>.a = 3;</code></pre>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore assignments to fields.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantExpression",
          "displayName": "Constant expression can be evaluated",
          "enabled": false,
          "description": "<html>\n<body>\nAllows you to replace compile-time constant expression with its actual value (e.g. \"2 + 2\" with \"4\").\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ControlFlowStatementWithoutBraces",
          "displayName": "Control flow statement without braces",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>if</b>,\n<b>while</b> or <b>for</b>\nstatements without braces. Braces make the code easier to read and help prevent\nerrors when modifying the code.\n<p>The quick fix for the inspection wraps the statement body with braces.\n</body>\n</html>"
        },
        {
          "shortName": "UnqualifiedFieldAccess",
          "displayName": "Instance field access not qualified with 'this'",
          "enabled": false,
          "description": "<html>\n<body>\nReports on field accesses which are not qualified with\n<b>this</b> or some other qualifier. Some coding styles\nmandate that all field accesses are qualified to prevent confusion with local\nvariable or parameter accesses.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantLabeledSwitchRuleCodeBlock",
          "displayName": "Labeled switch rule has redundant code block",
          "enabled": false,
          "description": "<html>\n<body>\nReports rules of <code>switch</code> expression or enhanced <code>switch</code> statement which have redundant code block.<br>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 14 or higher</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StreamToLoop",
          "displayName": "Stream API call chain can be replaced with loop",
          "enabled": false,
          "description": "<html>\n<body>\nFinds Stream API chains, <b>Iterable.forEach</b> and <b>Map.forEach</b> calls and provides quick fix to convert them into classical loops.\n<p>\n  Note that sometimes this inspection might cause slight semantic changes.\n  Special care should be taken when it comes to short-circuiting, as it's not specified how many elements will be actually read when\n  the stream short-circuits.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "OptionalIsPresent",
          "displayName": "Optional.isPresent() can be replaced with functional-style expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditions like <code>if(Optional.isPresent())</code> which could be rewritten in functional style.\n<!-- tooltip end -->\n<p>\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<small>New in 2016.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "NonBlockStatementBodyJS",
          "displayName": "Non-block statement body",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b>, <b>while</b>, <b>for</b>, and <b>with</b> statements whose bodies are not block statements.  While\nsuch statements are legal JavaScript, it is usually safer for downstream maintenance to use\nthe code blocks for statement bodies.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoNameStartsWithPackageName",
          "displayName": "Name starts with package name",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports names starts with package name.\n<p>See <a href=\"https://golang.org/wiki/CodeReviewComments#package-names\">Code review comments: package names</a> for details.</p>\n</body>\n</html>"
        },
        {
          "shortName": "JSRemoveUnnecessaryParentheses",
          "displayName": "Unnecessary parentheses",
          "enabled": false,
          "description": "<html>\n<body>\nReports parentheses when they are redundant.\n<!-- tooltip end -->\n<p>In expressions:</p>\n<code>var x = ((1) + 2) + 3</code>\n<p>Arrow function argument lists:</p>\n<code>var incrementer = (x) => x + 1</code>\n\n<p>TypeScript and Flow type declarations:</p>\n<code>type Card = (Suit & Rank) | (Suit & Number)</code>\n</body>\n</html>"
        },
        {
          "shortName": "JoinDeclarationAndAssignmentJava",
          "displayName": "Assignment can be joined with declaration",
          "enabled": false,
          "description": "<html>\n<body>\nReports variable assignments that can be joined with the variable's declaration.\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "GoUnsortedImport",
          "displayName": "Unsorted imports",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports unsorted imports.\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryConstructor",
          "displayName": "Redundant no-arg constructor",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary constructors.\nA constructor is unnecessary if it is the only constructor of a class, has no parameters,\nhas the same access modifiers as its containing class,\nand does not perform any initialization except explicitly or implicitly calling the super class constructor without arguments.\nSuch a constructor can be safely removed as it will be generated by the compiler even if not specified.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore unnecessary constructors which have an annotation.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReturnSeparatedFromComputation",
          "displayName": "'return' separated from the result computation",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects <code>return</code> statements which return a local variable, where the value of the variable is computed\nsomewhere else within the same code block with the <code>return</code> statement.\n<p>The quick fix inlines the returned variable by moving the return statement to the location where the value of the variable is computed.\n  When the returned value can't be inlined into return statement, the quick fix attempts to move the return statement as close to the\n  computation of the returned value as possible.\n<p>For example, the code below could be simplified:\n<pre><code>int n = -1;\nfor(int i = 0; i &lt; a.length; i++) {\n    if (a[i] == b) {\n        n = i;\n        break;\n    }\n}\nreturn n;</code></pre>\nAfter the quick fix it becomes the following:\n<pre><code>int n = -1;\nfor(int i = 0; i &lt; a.length; i++) {\n    if (a[i] == b) {\n        return i;\n    }\n}\nreturn n;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "FieldMayBeFinal",
          "displayName": "Field may be 'final'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any fields which may safely be made <b>final</b>.\nA <b>static</b> field may be final if it is initialized in its declaration\nor in one static class initializer, but not both. A non-static field may be final if it is initialized\nin its declaration or in one non-static class initializer or in all constructors.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BoundedWildcard",
          "displayName": "Can use bounded wildcard",
          "enabled": false,
          "description": "<html>\n<body>\nReports generic method parameters that can use <a href=\"https://en.wikipedia.org/wiki/Wildcard_(Java)\">bounded wildcards</a> in your API.\nTo quote <a href=\"https://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java\">Josh Bloch</a> in <em>Effective Java</em> third Edition:\n<blockquote>\n  <h4>Item 31: Use bounded wildcards to increase API flexibility</h4>\n  Using wildcard types in your APIs, while tricky, makes the APIs far more flexible.\n  If you write a library that will be widely used, the proper use of wildcard types should be considered mandatory.\n  Remember the basic rule: producer-extends, consumer-super (PECS).\n  Also remember that all Comparables and Comparators are consumers.\n</blockquote>\n<p>Example:\n  <pre><code>void process(Consumer&lt;Number&gt; consumer);</code></pre> should be replaced with:\n  <pre><code>void process(Consumer&lt;? super Number&gt; consumer);</code></pre>\n  This method signature is more flexible because it accepts more types, not only\n  <code>Consumer&lt;Number&gt;</code> but also <code>Consumer&lt;Object&gt;</code>.\n<p>\n  Likewise, type parameters in covariant position:\n  <pre><code>T produce(Producer&lt;T&gt; p);</code></pre> should be replaced with:\n  <pre><code>T produce(Producer&lt;? extends T&gt; p);</code></pre>\n  <!-- tooltip end -->\n<p>\n  Use the first checkbox to ignore <b>invariant</b> classes.\n  Invariant classes (e.g. <code>java.util.List&lt;T&gt;</code>) are\n  classes that both accept values (via its <code>List.add(T)</code> method)\n  and produce values (via its <code>T List.get()</code> method). On the\n  other hand, <b>contravariant</b> classes only receive values, e.g. <code>java.util.function.Consumer&lt;T&gt;</code>\n  with the only method <code>accept(T)</code>, and <b>covariant</b> classes\n  only produce values, e.g. <code>java.util.function.Supplier&lt;T&gt;</code>\n  with the only method <code>T get()</code>. People\n  are often OK with bounded wildcards in covariant/contravariant\n  classes but afraid of wildcards in invariant classes, e.g. <code>void\n  process(List&lt;? extends T&gt; l)</code>. Turn this setting off to ignore\n  these invariant classes and leave them rigidly typed, e.g. <code>void\n  process(List&lt;T&gt; l)</code>.\n<p>\n  Uncheck the second checkbox to ignore <b>private</b> methods, which can be considered as not a part of the public API.\n<p>\n  Uncheck the third checkbox to ignore instance methods and only report <b>static</b> methods.\n</body>\n</html>"
        },
        {
          "shortName": "LambdaCanBeReplacedWithAnonymous",
          "displayName": "Lambda can be replaced with anonymous class",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda expressions which can be replaced with anonymous class.\n<p> The quick fix expands lambda expression to the anonymous class.\n<p>For example the lambda expression <code>s -> System.out.println(s)</code> can be expanded to the following class:\n<pre><code>new Consumer&lt;String&gt;() {\n  @Override\n  public void accept(String s) {\n    System.out.println(s);\n  }\n}</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "UnterminatedStatementJS",
          "displayName": "Unterminated statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports statements that may be erroneously not terminated by a semicolon or a newline.\n<p>If 'terminate statements with semicolons' is selected in <i>Editor | Code Style | JavaScript or TypeScript - Punctuation</i>, reports\n  all statements which do not end with a semicolon.\n  While line-breaks may be used instead of semicolons to terminate JavaScript statements,\n  some coding styles prefer the semicolon for consistency with the other languages.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "SingleStatementInBlock",
          "displayName": "Code block contains single statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports control flow statements with\nonly a single statement in their code block.\n<p>The quick fix for the inspection removes braces from the statement body.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryBlockStatement",
          "displayName": "Unnecessary code block",
          "enabled": false,
          "description": "<html>\n<body>\nReports code blocks which are unnecessary to the semantics of the program, and can\nbe replaced by their contents. Code blocks which are the bodies of <b>if</b>, <b>do</b>,\n<b>while</b> or <b>for</b> statements will not be reported by this\ninspection.\n<!-- tooltip end -->\n<p>\nUse the checkbox below if you wish this inspection to ignore code blocks which are used as branches of switch statements.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoStructInitializationWithoutFieldNames",
          "displayName": "Struct initialization without field names",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports structures which are initialized without specifying their field names.\n<p>When initializing a structure, it's better to explicitly state the name of the fields in order\nto ensure that in case of changes in the order of the fields or the name of the fields they\nwill correctly continue to be addressed.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SwitchLabeledRuleCanBeCodeBlock",
          "displayName": "Labeled switch rule can have code block",
          "enabled": false,
          "description": "<html>\n<body>\nReports rules of <code>switch</code> expression or enhanced <code>switch</code> statement which can be converted to a code block.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 14 or higher</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "OptionalAssignedToNull",
          "displayName": "Null value for Optional type",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection warns when <code>null</code> is assigned to <code>Optional</code> variable or returned from method returning\n  <code>Optional</code>. It's recommended to use <code>Optional.empty()</code> (or <code>Optional.absent()</code> for Guava) to denote\n  an empty value.\n<p>\n  Use checkbox below to report also comparisons like <b>optional == null</b>. While in rare cases (e.g. lazily initialized optional field)\n  this might be correct, usually optional variable is never null, and probably <b>optional.isPresent()</b> was intended.\n</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "NestedFunctionCallJS",
          "displayName": "Nested function call",
          "enabled": false,
          "description": "<html>\n<body>\nReports function calls used as arguments to another function call.\n</body>\n</html>\n"
        },
        {
          "shortName": "SingleElementAnnotation",
          "displayName": "Single-element annotation",
          "enabled": false,
          "description": "<html>\n<body>\nReports annotations in the 'single element' shorthand form, like <code>@Retention(RUNTIME)</code>.\n<p>The quick fix for this inspection converts annotation to the 'normal' form (with attribute name),\ne.g. <code>@Retention(value=RUNTIME)</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "MissortedModifiers",
          "displayName": "Missorted modifiers",
          "enabled": false,
          "description": "<html>\n<body>\nReports on declarations whose modifiers are not in the canonical\npreferred order (as stated in the Java Language Specification).\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to report when annotations are misplaced:\nannotations with ElementType.TYPE_USE <em>not</em> directly before the type after the modifier keywords,\nother annotations <em>not</em> before the modifier keywords.\nWhen the checkbox is unchecked any annotation can be positioned before or after the modifier keywords.\nModifier lists with annotations in between modifier keywords will always be reported.\n<p>\nUse the second checkbox below to warn when an ElementType.TYPE_USE annotation is not positioned directly before\na type, even when the annotation has other targets specified.\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantImplements",
          "displayName": "Redundant interface declaration",
          "enabled": false,
          "description": "<html>\n<body>\nReports any cases of classes declaring that they implement or extend an interface, when\nthat interface is already declared as implemented by a superclass or extended by another interface\nof that class. Such declarations are unnecessary, and may be safely removed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalCanBeOptional",
          "displayName": "Conditional can be replaced with Optional",
          "enabled": false,
          "description": "<html>\n<body>\nSuggests to replace a null-check condition with an <b>Optional</b> chain. E.g.\n<pre>return str == null ? \"\" : str.trim();</pre>\nCould be rewritten as\n<pre>return Optional.ofNullable(str).map(String::trim).orElse(\"\");</pre>\n<p>While the replacement is not always shorter, this could be a helpful step for further refactoring\n  (e.g. changing the method return value to an Optional).</p>\n<p>Note that when not-null branch of the condition returns null, the corresponding mapping step will produce an empty Optional\npossibly changing the semantics. If it cannot be statically proven that semantics will be preserved, quick-fix action name\nwill contain \"(may change semantics)\" notice and inspection highlighting will be turned off.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "GoUnitSpecificDurationSuffix",
          "displayName": "Unit-specific suffix for time.Duration",
          "enabled": false,
          "description": "<html>\n<body>\nReports unit-specific suffixes in constant and variable names of type <strong>time.Duration</strong>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConstantOnWrongSideOfComparison",
          "displayName": "Constant on the wrong side of comparison",
          "enabled": false,
          "description": "<html>\n<body>\nReports on comparison operations with the constant value on the wrong side.\nSome coding conventions specify that constants should be on a specific side of a comparison, either left or right.\n<!-- tooltip end -->\n<p>\n<small>New in 2019.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "ConstantOnLHSOfComparisonJS",
          "displayName": "Constant on left side of comparison",
          "enabled": false,
          "description": "<html>\n<body>\nReports on comparison operations with constant values on their left-hand side. Some\ncoding conventions specify that constants should be on the right-hand side of comparisons.\n</body>\n</html>\n"
        },
        {
          "shortName": "ChainedFunctionCallJS",
          "displayName": "Chained function call",
          "enabled": false,
          "description": "<html>\n<body>\nReports function calls whose target is another function call.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReturnThis",
          "displayName": "Return of 'this'",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods returning <b>this</b>.\nWhile such a return is valid, it is rarely necessary, and usually indicates that the developer intends the method to be used\nas part of a chain of similar method calls (e.g. buffer.append(\"foo\").append(\"bar\").append(\"baz\")).\nSuch chains are frowned upon by many coding standards.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoSnakeCaseUsage",
          "displayName": "Usage of Snake_Case",
          "enabled": false,
          "description": "<html>\n<body>\nReports usage of snake case instead of camelcase for naming variables, constants and functions.\n<p>See <a href=\"https://golang.org/doc/effective_go.html#mixed-caps\">Effective Go: MixedCaps</a>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantFieldInitialization",
          "displayName": "Redundant field initialization",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields explicitly initialized to\nthe same values that the JVM would initialize them to by default.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LocalCanBeFinal",
          "displayName": "Local variable or parameter can be final",
          "enabled": false,
          "description": "<html>\n<body>\nReports parameters or local variables, found in the specified inspection\nscope, that may have a <b><font color=\"#000080\">final</font></b> modifier added.\n<!-- tooltip end -->\n<br> <br>\nUse checkboxes in the inspection options below, to define whether parameters or local variables (or both) are to be reported.\n</body>\n</html>\n"
        },
        {
          "shortName": "OptionalContainsCollection",
          "displayName": "'Optional' contains array or collection",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>java.util.Optional</b> or <b>com.google.common.base.Optional</b> types with an array or collection type parameter.\nIn such cases it is more clear to just use an empty array or collection to indicate no result.\n<!-- tooltip end -->\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "UnclearBinaryExpression",
          "displayName": "Unclear expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports binary, conditional or <b>instanceof</b> expressions consisting of multiple terms with different operators\nwithout parentheses. Such expressions can be unclear because not every developer is intimately familiar with all the precedence rules\nof the different operators. This inspection has a quickfix which adds clarifying parentheses.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryCallToStringValueOf",
          "displayName": "Unnecessary conversion to String",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any calls to static methods like <b>String.valueOf()</b> or <b>Integer.toString()</b> used in\nstring concatenations and as arguments to the\n<b>print()</b> and <b>println()</b> methods of <b>java.io.PrintWriter</b> and <b>java.io.PrintStream</b>, the <b>append()</b>\nmethod of <b>java.lang.StringBuilder</b> and <b>java.lang.StringBuffer</b> or the <b>trace()</b>, <b>debug()</b>, <b>info()</b>,\n<b>warn()</b> and <b>error()</b> methods of <b>org.slf4j.Logger</b>. In these cases the conversion\nto string will be handled by the underlying library methods and an explicit call to <b>String.valueOf()</b> is not needed.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryEnumModifier",
          "displayName": "Unnecessary enum modifier",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any redundant modifiers on enumerated classes or components of\nenumerated classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ChainedMethodCall",
          "displayName": "Chained method calls",
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls whose target is another\nmethod call.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FuseStreamOperations",
          "displayName": "Subsequent steps can be fused into Stream API chain",
          "enabled": false,
          "description": "<html>\n<body>\nDetects when some transformations are performed on Stream API result which could be incorporated into the Stream API call chain directly. E.g.:\n<pre>\n  List&lt;String&gt; list = stream.collect(Collectors.toList());\n  list.sort(null);\n  return list.toArray(new String[list.size()]);\n</pre>\nCould be converted to\n<pre>\n  return stream.sorted().toArray(String[]::new);\n</pre>\n<p>\n  Note that sometimes converted stream chain may replace explicit <b>ArrayList</b> with <b>Collectors.toList()</b> or explicit\n  <b>HashSet</b> with <b>Collectors.toSet()</b>. While current library implementation uses these collections internally,\n  this is not specified, thus can be changed in future possibly changing the semantics of your code. If you are concerned about this,\n  use the checkbox below to suppress usages of <b>toList</b> and <b>toSet</b> collectors. In this case <b>Collectors.toCollection()</b>\n  will be suggested instead.\n</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher</p>\n<p><small>New in 2017.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CStyleArrayDeclaration",
          "displayName": "C-style array declaration",
          "enabled": false,
          "description": "<html>\n<body>\nReports array declarations made using C-style syntax,\nwith the array indicator brackets positioned after the variable name or after the method parameter list.\nFor example:\n<code><pre>\n  <b>public</b> String process(String value[])[] {\n    return value;\n  }\n</pre></code>\nMost code styles prefer Java-style array declarations, with the array indicator brackets attached to the type name.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to only report C-style array declaration of method return types.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitCallToSuper",
          "displayName": "Implicit call to 'super()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports constructors which do not begin with calls to \"super\" constructor, or\nother constructors of the same class. Such constructors can be thought of as implicitly beginning with a\ncall to <b>super()</b>. Some coding standards prefer that such calls to\n<b>super()</b> be made explicitly.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarilyQualifiedInnerClassAccess",
          "displayName": "Unnecessarily qualified inner class access",
          "enabled": false,
          "description": "<html>\n<body>\nReports any references to inner classes which are unnecessarily qualified with the name\nof the enclosing class. Such qualification is unnecessary, and may be safely removed. This may\nrequire the addition of an import for the inner class.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore references to inner classes where the removal of the qualification\nwould require the addition of an import.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ConstantOnRHSOfComparisonJS",
          "displayName": "Constant on right side of comparison",
          "enabled": false,
          "description": "<html>\n<body>\nReports on comparison operations with constant values on their right-hand side. Some\ncoding conventions specify that constants should be on the left-hand side of comparisons.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSUndefinedPropertyAssignment",
          "displayName": "Undefined property assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments to undefined properties of explicitly type-annotated variables.\n</body>\n</html>"
        },
        {
          "shortName": "TypeParameterExtendsObject",
          "displayName": "Type parameter explicitly extends 'java.lang.Object'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any type parameters and wildcard type arguments explicitly declared to extend <b>java.lang.Object</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EqualsCalledOnEnumConstant",
          "displayName": "'equals()' called on Enum value",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>equals()</b> on\n<b>Enum</b> constants. Such calls can be replaced by\nan identity comparison <b>(==)</b> because two\n<b>Enum</b> constants are equal only when they\nhave the same identity.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "CssRedundantUnit",
          "displayName": "Redundant measure unit",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights zero values with specified unit of measurement.\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarilyQualifiedStaticUsage",
          "displayName": "Unnecessarily qualified static access",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to static methods or accesses of static fields\non the current class which are qualified with the class name. Such qualification is unnecessary,\nand may be safely removed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TryStatementWithMultipleResources",
          "displayName": "'try' statement with multiple resources can be split",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>try</b> statements with multiple resources.\n<p>The quick fix suggests to split such statements into nested <b>try-with-resources</b> statements.\n<!-- tooltip end -->\n<p>Example of <b>try</b> statement with multiple resources:\n<pre><code>try (FileInputStream in = new FileInputStream(\"in.txt\");\n     FileOutputStream out = new FileOutputStream(\"out.txt\")) {\n  /*read and write*/\n}</code></pre>\n<p>The example above is transformed into the following:\n<pre><code>try (FileInputStream in = new FileInputStream(\"in.txt\")) {\n  try (FileOutputStream out = new FileOutputStream(\"out.txt\")) {\n    /*read and write*/\n  }\n}</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnqualifiedStaticUsage",
          "displayName": "Unqualified static access",
          "enabled": false,
          "description": "<html>\n<body>\nReports static method calls or field accesses that are not qualified\nwith the class name of the static method. This is legal if the static method or field is in\nthe same class as the call, but may be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnqualifiedMethodAccess",
          "displayName": "Instance method call not qualified with 'this'",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to non-static methods of the same object which are not qualified with <b>this</b>.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableEqualsExpression",
          "displayName": "Unnecessary 'null' check before 'equals()' call",
          "enabled": false,
          "description": "<html>\n<body>\nReports comparisons to null which are followed by an 'equals()' call\nwith a constant argument.\n<p>\nFor example the following will be reported by this inspection:\n<code><pre>\n    <b>if</b> (s != <b>null</b> && s.equals(\"literal\")) {}\n</pre></code>\nAnd the quickfix will replace that with:\n<code><pre>\n    <b>if</b> (\"literal\".equals(s)) {}\n</pre></code>\n</p>\n<p>\n    When checkbox is checked, 'equals()' with non-constant argument may also be reported if 'equals()' argument\n    is proven to be not-null.\n</p>\n  <!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "GoExportedElementShouldHaveComment",
          "displayName": "Exported element should have comment",
          "enabled": false,
          "description": "<html>\n<body>\nReports exported types, functions, methods, constants and variables without comment.\n<p>See <a href=\"https://golang.org/wiki/CodeReviewComments#comment-sentences\">Code review comments: comment sentences</a> and\n  <a href=\"https://golang.org/wiki/CodeReviewComments#doc-comments\">Code review comments: doc comments</a> .</p>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaBodyCanBeCodeBlock",
          "displayName": "Lambda body can be code block",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambdas which body is an expression, e.g. <code>n&nbsp;-&gt;&nbsp;n&nbsp;+&nbsp;1</code>\n<p>The quick fix converts lambda's expression body to a code block, like the following:\n<pre><code>n -&gt; {\n  return n + 1;\n}</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "LiteralAsArgToStringEquals",
          "displayName": "'expression.equals(\"literal\")' rather than '\"literal\".equals(expression)'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>String.equals()</b> or <b>String.equalsIgnoreCase()</b> calls with a <b>String</b> literal argument.\nSome coding standards specify that <b>String</b> literals should be the qualifier of <b>equals()</b>, rather than\nargument, thus minimizing <b>NullPointerException</b>s.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MultiCatchCanBeSplit",
          "displayName": "Multi-catch can be split into separate catch blocks",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>multi-catch</b> sections, like <code>try{} catch&nbsp;(IOException|RuntimeException&nbsp;e)&nbsp;{...}</code>\n<p> The quick fix splits multi-catch section into separate <b>catch</b> blocks.\n<!-- tooltip end -->\n<p>For example, the multi-catch section\n<pre><code>\ntry{}\ncatch (IOException|RuntimeException e) {\n  /*handle the exception*/\n}</code></pre>\nis transformed into the following:\n<pre><code>\ntry{}\ncatch (IOException e) {\n  /*handle the exception*/\n}\ncatch (RuntimeException e) {\n  /*handle the exception*/\n}</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "MoveFieldAssignmentToInitializer",
          "displayName": "Field assignment can be moved to initializer",
          "enabled": false,
          "description": "<html>\n<body>\nProvides a quick fix to replace initialization of a field via assignment with a field initializer.\nThe code is highlighted only if field initializer is located in the initializer\nand joining with the field declaration is likely to be safe.\nIn other cases the inspection provides the quick fix without highlighting, as it may change the code semantics.\n<!-- tooltip end -->\n<small>Since 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "GoExportedOwnDeclaration",
          "displayName": "Exported element should have its own declaration",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports an exported var or const in a comma separated list of declarations.\nFor example:\n<pre>\n    package p\n\n    const C1, C2 = 1, 2\n</pre>\nOne should consider providing separate specs for such declarations as this makes code more readable:\n<pre>\n    package p\n\n    const (\n        C1 = 1\n        C2 = 2\n    )\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ObjectsEqualsCanBeSimplified",
          "displayName": "Objects.equals() can be replaced with equals()",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>Objects.equals(a, b)</b> where the first argument is statically known to be non-null.\n  Such a call can be safely replaced with <b>a.equals(b)</b> or <b>a == b</b> if both arguments are primitives.\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "DiamondCanBeReplacedWithExplicitTypeArguments",
          "displayName": "Diamond can be replaced with explicit type arguments",
          "enabled": false,
          "description": "<html>\n<body>\nReports instantiation of generic classes where <b>&lt;&gt;</b> (diamond) is used instead of type parameters.\n<p>The quick fix replaces the <b>&lt;&gt;</b> (diamond) with the explicit type parameters.\n<p>Example of use of the diamond:\n<pre><code>List &lt;String&gt; list = new ArrayList&lt;&gt;()</code></pre>\n<p>The statement above is replaced with the following:\n<pre><code>List &lt;String&gt; list = new ArrayList&lt;String&gt;()</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "UnqualifiedInnerClassAccess",
          "displayName": "Unqualified inner class access",
          "enabled": false,
          "description": "<html>\n<body>\nReports any references to inner classes which are not qualified with the name\nof the enclosing class.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore references to inner classes contained within the same class, which therefore do not require an import.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ChainedEquality",
          "displayName": "Chained equality comparisons",
          "enabled": false,
          "description": "<html>\n<body>\nReports chained equality comparisons (i.e. <b>a==b==c</b>).\nSuch comparisons are confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoReceiverNames",
          "displayName": "Receiver has generic name",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports receiver names like <strong>me</strong>, <strong>this</strong>, <strong>self</strong> or different from other receiver names for this type.\n<p>See <a href=\"https://golang.org/wiki/CodeReviewComments#receiver-names\">Code review comments: receiver names</a> for details.</p>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaParameterTypeCanBeSpecified",
          "displayName": "Lambda parameter type can be specified",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda parameters which don't have their type specified, e.g. <code>a&nbsp;->&nbsp;a&nbsp;+&nbsp;1</code>\n<p>The quick fix adds type declaration to the lambda parameters, the result looks like this:\n  <code>(int&nbsp;a)&nbsp;->&nbsp;a&nbsp;+&nbsp;1</code>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryQualifierForThis",
          "displayName": "Unnecessary qualifier for 'this' or 'super'",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any unnecessary qualification of <b>this</b> or <b>super</b>.\nUsing a qualifier on <b>this</b> or <b>super</b> to\ndisambiguate a code reference may easily become unnecessary via automatic refactorings, and should be deleted for clarity.\n<p>\nFor example:\n<pre><code>OuterClass.<b>this</b>.foo();</code></pre>\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JSDeclarationsAtScopeStart",
          "displayName": "Variable declarations are at the scope start",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that all local variables declarations are at the beginning of the current function.\n</body>\n</html>"
        },
        {
          "shortName": "ArrayCanBeReplacedWithEnumValues",
          "displayName": "Array can be replaced with enum values",
          "enabled": false,
          "description": "<!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->\n<html>\n<body>\nReports arrays of enum constants which may be replaced with <code>EnumType.values()</code>.\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarySuperConstructor",
          "displayName": "Unnecessary call to 'super()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any no-argument calls to a superclass\nconstructor as the first call of a constructor. Such calls are unnecessary, and may be removed.<p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoErrorStringFormat",
          "displayName": "Error string should not be capitalized or end with punctuation",
          "enabled": false,
          "description": "<html>\n<body>\nReports error strings format issues.\n<p>Error strings should not be capitalized or end with punctuation mark.</p>\n<p>See <a href=\"https://golang.org/wiki/CodeReviewComments#error-strings\">Code review comments: error strings</a> for more details.</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryParentheses",
          "displayName": "Unnecessary parentheses",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any instance of unnecessary parentheses. Parentheses\nare considered unnecessary if the evaluation order of an expression remains\nunchanged if the parentheses are removed.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore parentheses which help to clarify a binary\nexpression. Parentheses are clarifying if the expression parenthesized is an\n<b>instanceof</b> expression part of a larger\nexpression or has a different operator than the parent expression.\n<p>\nUse the second checkbox below to ignore any parentheses around the condition\nof conditional expressions. Some coding standards specify that all such conditions\nmust be surrounded by parentheses.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ListIndexOfReplaceableByContains",
          "displayName": "'List.indexOf()' expression is replaceable with 'contains()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>List.indexOf()</b>\nexpressions which can be replaced with the method\n<b>List.contains()</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsObject",
          "displayName": "Class explicitly extends 'java.lang.Object'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes explicitly declared to extend <b>java.lang.Object</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoCommentStart",
          "displayName": "Comment of exported element starts with incorrect name",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports comments that do not start with the name of the exported element.\n<p>See <a href=\"https://golang.org/wiki/CodeReviewComments#comment-sentences\">Code review comments: comment sentences</a>.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Jpdl Model",
      "inspections": [
        {
          "shortName": "JpdlModelInspection",
          "displayName": "Jpdl Model Errors",
          "enabled": false,
          "description": "JpdlModelInspection"
        }
      ]
    },
    {
      "name": "Setup",
      "inspections": [
        {
          "shortName": "SpringFacetProgrammaticInspection",
          "displayName": "Spring Facet Programmatic Configuration",
          "enabled": false,
          "description": "Checks programmatic Spring context code setup in Spring facet."
        },
        {
          "shortName": "SpringFacetCodeInspection",
          "displayName": "Spring Facet Code Configuration",
          "enabled": false,
          "description": "Checks Spring code configuration files setup in Spring facet."
        },
        {
          "shortName": "SpringFacetInspection",
          "displayName": "Spring Facet XML Configuration",
          "enabled": false,
          "description": "Checks Spring XML configuration files setup in Spring facet."
        }
      ]
    },
    {
      "name": "Compiler issues",
      "inspections": [
        {
          "shortName": "UNCHECKED_WARNING",
          "displayName": "Unchecked warning",
          "enabled": false,
          "description": "<html>\n<body>\nSignals places where an unchecked warning is issued\nby the compiler, for example:\n<pre><code>\n\n  <b>void</b> f(HashMap map) {\n    map.put(\"key\", \"value\");\n  }\n  \n</code></pre>\nHint: Pass -Xlint:unchecked to javac to get more details.\n</body>\n</html>"
        },
        {
          "shortName": "JavacQuirks",
          "displayName": "Javac quirks",
          "enabled": false,
          "description": "<html>\n<body>\n<span>This inspection warns about known Javac issues, problems and incompatibilities.</span>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Markdown",
      "inspections": [
        {
          "shortName": "MarkdownUnresolvedFileReference",
          "displayName": "Unresolved file references",
          "enabled": false,
          "description": "<html>\n<body>\nReports unresolved file references in Markdown file.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Inheritance issues",
      "inspections": [
        {
          "shortName": "AbstractMethodWithMissingImplementations",
          "displayName": "Abstract method with missing implementations",
          "enabled": false,
          "description": "<html>\n<body>\nReports any abstract methods which are not implemented in every concrete\nsubclass. This is a compile-time error on the subclasses, while this inspection\nreports the problem at the point of the abstract method.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AbstractClassNeverImplemented",
          "displayName": "Abstract class which has no concrete subclass",
          "enabled": false,
          "description": "<html>\n<body>\nReports abstract classes which have no\nconcrete subclasses.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantMethodOverride",
          "displayName": "Method is identical to its super method",
          "enabled": false,
          "description": "<html>\n<body>\nReports any method with a signature identical to its super method and either has an identical body to the super method or only\ncalls the super method.\nSuch a method is redundant and can be removed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonProtectedConstructorInAbstractClass",
          "displayName": "'public' constructor in 'abstract' class",
          "enabled": false,
          "description": "<html>\n<body>\nReports constructors in abstract classes that are not\ndeclared <b>protected</b>, package-protected or\n<b>private</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsAnnotation",
          "displayName": "Class extends annotation interface",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes declared as implementing or extending an annotation\ninterface. While it is legal to extend an annotation interface, it is often done by accident,\nand the result won't be usable as an annotation.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ProblematicVarargsMethodOverride",
          "displayName": "Non-varargs method overrides varargs method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods overriding a variable arity method and replacing the variable arity parameter with an array parameter.\nWhile this is legal Java, it can be confusing.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MissingOverrideAnnotation",
          "displayName": "Missing @Override annotation",
          "enabled": false,
          "description": "<html>\n<body>\nReports any methods which override methods in a superclass but\ndo not have the <b>@java.lang.Override</b> annotation.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to have this inspection ignore the\n<b>java.lang.Object</b> methods\n<b>equals()</b>,\n<b>hashCode()</b> and\n<b>toString()</b>. The risk of these methods\ngoing missing and thus your code not compiling anymore due to the\n<b>@Override</b> annotation is vanishingly small.\n<p>\nUse the second checkbox below to have this inspection ignore overriding methods\nin anonymous classes.\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "AbstractClassWithoutAbstractMethods",
          "displayName": "Abstract class without abstract methods",
          "enabled": false,
          "description": "<html>\n<body>\nReports abstract classes without abstract methods.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AbstractMethodOverridesConcreteMethod",
          "displayName": "Abstract method overrides concrete method",
          "enabled": false,
          "description": "<html>\n<body>\nReports abstract methods which override concrete methods.\nMethods overridden from <b>java.lang.Object</b> are not reported\nby this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceNeverImplemented",
          "displayName": "Interface which has no concrete subclass",
          "enabled": false,
          "description": "<html>\n<body>\nReports interfaces which have no concrete subclasses.\n<!-- tooltip end -->\n<p>\n  Use the list below to specify special annotations. Interfaces annotated with one of these annotations will be ignored by this inspection.\n<p>\n  Use the checkbox below to ignore interfaces that only declare constant fields.\n  Such interfaces my still be usable even without implementations.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AbstractClassExtendsConcreteClass",
          "displayName": "Abstract class extends concrete class",
          "enabled": false,
          "description": "<html>\n<body>\nReports abstract classes which extend concrete classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParameterTypePreventsOverriding",
          "displayName": "Parameter type prevents overriding",
          "enabled": false,
          "description": "<html>\n<body>\nReports method parameter types in methods that look like they are overriding a super method,\nbut do not because of the parameter type coming from a different package than the super method type,\nalthough the class name matches.\nThis prevents the parameter's method from overriding the super method and can be very confusing.\n<p>Example:\n<pre><code>\n<b>public class</b> A {\n  <b>public void</b> method(Object o) {}\n}\n\n<b>public class</b> B <b>extends</b> A {\n  <b>public void</b> method(Object o) {} // warning on parameter type here\n  <b>class</b> Object {}\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitSubclassInspection",
          "displayName": "Final declaration can't be overridden at runtime",
          "enabled": false,
          "description": "<html>\n<body>\nReports the cases when your code prevents a class from being subclassed by some framework\n(e.g. Spring or Hibernate) at runtime.\n<!-- tooltip end -->\n<p>The typical examples when subclassing is necessary but impossible are:</p>\n<ul>\n  <li><code>final</code> classes marked with framework-specific annotations (e.g. Spring <code>@Configuration</code>)</li>\n  <li><code>final</code>, <code>static</code> or <code>private</code> methods\n    marked with framework-specific annotations (e.g. Spring <code>@Transactional</code>)</li>\n  <li>methods marked with framework-specific annotations inside <code>final</code> classes</li>\n</ul>\n\n<p>The list of reported cases depends on the frameworks used.</p>\n</body>\n</html>"
        },
        {
          "shortName": "FrequentlyUsedInheritorInspection",
          "displayName": "Class may extend a commonly used base class",
          "enabled": false,
          "description": "<html>\n<body>\nThe inspection finds commonly used class/interface that could be extended/implemented instead of extending too broad interface or class.\n<!-- tooltip end -->\nThe inspection works only if a project is built using IntelliJ IDEA build system and a super class is located inside project source files.\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsConcreteCollection",
          "displayName": "Class explicitly extends a Collection class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any clases which extend concrete classes of type\n<b>java.util.Collection</b> or\n<b>java.util.Map</b>. Subclassing collection types\nis a common practice of novice object-oriented developers, but is considerably\nmore brittle than delegating collection calls.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RefusedBequest",
          "displayName": "Method does not call super method",
          "enabled": false,
          "description": "<html>\n<body>\nReports any methods which override a concrete method,\nbut which do not call that method as <b>super</b>. This is also known as a <i>refused bequest</i> and such methods\nmay represent a failure of abstraction which can lead to hard-to-trace bugs. Default methods and methods overridden\nfrom <b>java.lang.Object</b>, except for <b>clone()</b>, are not reported by this inspection.\nA <b>clone()</b> method is expected to call its super, which will automatically return an object of the correct type.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to only warn when the super method is annotated by an annotation specified in the table below.\n<p>\nUse the second checkbox below to ignore super methods when they are empty or only throw an exception.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticInheritance",
          "displayName": "Static inheritance",
          "enabled": false,
          "description": "<html>\n<body>\nReports interfaces which are implemented for no reason other than\naccess to constants. Such inheritance is often confusing, and may hide important dependency\ninformation.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsUtilityClass",
          "displayName": "Class extends utility class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes explicitly declared to extend a utility class. Utility classes\nhave all fields and methods declared <b>static</b>. Extending a utility\nclass also allows inadvertent object instantiation of the utility class, because to allow extension\nthe constructor can not be made private.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore any classes that override a utility class but are also utility classes themselves.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AbstractMethodOverridesAbstractMethod",
          "displayName": "Abstract method overrides abstract method",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>abstract</b> methods which override <b>abstract</b> methods. Methods with\ndifferent return types, exception declarations, annotations or modifiers than the method they override are not\nreported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the first checkbox to ignore any abstract methods that have a different JavaDoc comment than their super method.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TypeParameterExtendsFinalClass",
          "displayName": "Type parameter extends final class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any type parameters declared to extend a final class. Since\nfinal classes cannot be extended, the type parameter could be replaced with the type\nof the specified final class.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Less",
      "inspections": [
        {
          "shortName": "LessResolvedByNameOnly",
          "displayName": "Resolved by name only",
          "enabled": false,
          "description": "This inspection warns about less elements that are not imported explicitly and resolved through all project less-files only by name.\n    You have no guaranties that these elements will be resolved at the production.\n\n"
        },
        {
          "shortName": "LessUnresolvedVariable",
          "displayName": "Unresolved variable",
          "enabled": false,
          "description": "This inspection warns about less variable references which can't be resolved to any valid target.\n"
        },
        {
          "shortName": "LessUnresolvedMixin",
          "displayName": "Unresolved mixin",
          "enabled": false,
          "description": "This inspection warns about less mixin invocation which can't be resolved to any valid target.\n\n"
        }
      ]
    },
    {
      "name": "JSF annotated elements errors",
      "inspections": [
        {
          "shortName": "JsfJamExtendsClassInconsistencyInspection",
          "displayName": "Extends inconsistency errors",
          "enabled": false,
          "description": "If some class is annotated with specific annotation (@FacesComponent, @FacesRenderer, @FacesConverter, @FacesValidator and others) it has to implement appropriate interface.  "
        }
      ]
    },
    {
      "name": "Potentially undesirable code constructs",
      "inspections": [
        {
          "shortName": "ContinueStatementWithLabelJS",
          "displayName": "'continue' statement with label",
          "enabled": false,
          "description": "<html>\n<body>\nReports labelled <b>continue</b> statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "WithStatementJS",
          "displayName": "'with' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports  <b>with</b> statements.  <b>with</b>\nstatements result in potentially confusing implicit bindings, and may behave\nstrangely in setting new variables.\n</body>\n</html>\n"
        },
        {
          "shortName": "ContinueStatementJS",
          "displayName": "'continue' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>continue</b> statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "CommaExpressionJS",
          "displayName": "Comma expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports comma expressions.  Comma\nexpressions are often a sign of overly clever code, and may lead to subtle bugs.\nComma expressions in the initializer or update section of a <b>for</b>\nloop are ignored by this inspection.\n</body>\n</html>\n"
        },
        {
          "shortName": "LabeledStatementJS",
          "displayName": "Labeled statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports labeled statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "BreakStatementWithLabelJS",
          "displayName": "'break' statement with label",
          "enabled": false,
          "description": "<html>\n<body>\nReports labelled <b>break</b> statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "BreakStatementJS",
          "displayName": "'break' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> statements. <b>break</b> statements that end case blocks are not reported.\n</body>\n</html>\n"
        },
        {
          "shortName": "DebuggerStatementJS",
          "displayName": "'debugger' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>debugger</b> statements, used for interaction\nwith Javascript debuggers.  Such statements should probably not be found in production code.\n</body>\n</html>\n"
        },
        {
          "shortName": "AnonymousFunctionJS",
          "displayName": "Anonymous function",
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous functions. While often very handy,\nanonymous functions may be confusing, and are discouraged in some coding standards.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConditionalExpressionJS",
          "displayName": "Conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary conditional expressions.  Some coding standards\nprohibit such expressions, in favor of explicit <b>if</b>\nstatements.\n</body>\n</html>\n"
        },
        {
          "shortName": "VoidExpressionJS",
          "displayName": "'void' expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>void</b> expressions.  Since <b>void</b> behaves\ncompletely differently in JavaScript and Java, these expressions maybe confusing.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Android Lint: Security",
      "inspections": [
        {
          "shortName": "AndroidLintHardcodedDebugMode",
          "displayName": "Hardcoded value of android:debuggable in the manifest",
          "enabled": false,
          "description": "<html><body>Hardcoded value of <code>android:debuggable</code> in the manifest<br><br>It's best to leave out the <code>android:debuggable</code> attribute from the manifest. If you do, then the tools will automatically insert <code>android:debuggable=true</code> when building an APK to debug on an emulator or device. And when you perform a release build, such as Exporting APK, it will automatically set it to <code>false</code>.<br/>\n<br/>\nIf on the other hand you specify a specific value in the manifest file, then the tools will always use it. This can lead to accidentally publishing your app with debug information.<br><br>Issue id: HardcodedDebugMode</body></html>"
        },
        {
          "shortName": "AndroidLintDeletedProvider",
          "displayName": "Using Deleted Provider",
          "enabled": false,
          "description": "<html><body>Using Deleted Provider<br><br>The <code>Crypto</code> provider has been completely removed in Android P (and was deprecated in an earlier release). This means that the code will throw a <code>NoSuchProviderException</code> and the app will crash. Even if the code catches that exception at a higher level, this is not secure and should not be used.<br><br>Issue id: DeletedProvider<br><br><a href=\"https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html\">https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintPackageManagerGetSignatures",
          "displayName": "Potential Multiple Certificate Exploit",
          "enabled": false,
          "description": "<html><body>Potential Multiple Certificate Exploit<br><br>Improper validation of app signatures could lead to issues where a malicious app submits itself to the Play Store with both its real certificate and a fake certificate and gains access to functionality or information it shouldn't have due to another application only checking for the fake certificate and ignoring the rest. Please make sure to validate all signatures returned by this method.<br><br>Issue id: PackageManagerGetSignatures<br><br><a href=\"https://bluebox.com/technical/android-fake-id-vulnerability/\">https://bluebox.com/technical/android-fake-id-vulnerability/</a></body></html>"
        },
        {
          "shortName": "AndroidLintSSLCertificateSocketFactoryGetInsecure",
          "displayName": "Call to SSLCertificateSocketFactory.getInsecure()",
          "enabled": false,
          "description": "<html><body>Call to <code>SSLCertificateSocketFactory.getInsecure()</code><br><br>The <code>SSLCertificateSocketFactory.getInsecure()</code> method returns an SSLSocketFactory with all TLS/SSL security checks disabled, which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers. This method should be avoided unless needed for a special circumstance such as debugging. Instead, <code>SSLCertificateSocketFactory.getDefault()</code> should be used.<br><br>Issue id: SSLCertificateSocketFactoryGetInsecure</body></html>"
        },
        {
          "shortName": "AndroidLintHardwareIds",
          "displayName": "Hardware Id Usage",
          "enabled": false,
          "description": "<html><body>Hardware Id Usage<br><br>Using these device identifiers is not recommended other than for high value fraud prevention and advanced telephony use-cases. For advertising use-cases, use <code>AdvertisingIdClient$Info#getId</code> and for analytics, use <code>InstanceId#getId</code>.<br><br>Issue id: HardwareIds<br><br><a href=\"https://developer.android.com/training/articles/user-data-ids.html\">https://developer.android.com/training/articles/user-data-ids.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintUsingHttp",
          "displayName": "Using HTTP instead of HTTPS",
          "enabled": false,
          "description": "<html><body>Using HTTP instead of HTTPS<br><br>The Gradle Wrapper is available both via HTTP and HTTPS. HTTPS is more secure since it protects against man-in-the-middle attacks etc. Older projects created in Android Studio used HTTP but we now default to HTTPS and recommend upgrading existing projects.<br><br>Issue id: UsingHttp</body></html>"
        },
        {
          "shortName": "AndroidLintExportedReceiver",
          "displayName": "Receiver does not require permission",
          "enabled": false,
          "description": "<html><body>Receiver does not require permission<br><br>Exported receivers (receivers which either set <code>exported=true</code> or contain an intent-filter and do not specify <code>exported=false</code>) should define a permission that an entity must have in order to launch the receiver or bind to it. Without this, any application can use this receiver.<br><br>Issue id: ExportedReceiver</body></html>"
        },
        {
          "shortName": "AndroidLintSecureRandom",
          "displayName": "Using a fixed seed with SecureRandom",
          "enabled": false,
          "description": "<html><body>Using a fixed seed with <code>SecureRandom</code><br><br>Specifying a fixed seed will cause the instance to return a predictable sequence of numbers. This may be useful for testing but it is not appropriate for secure use.<br><br>Issue id: SecureRandom<br><br><a href=\"http://developer.android.com/reference/java/security/SecureRandom.html\">http://developer.android.com/reference/java/security/SecureRandom.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintSSLCertificateSocketFactoryCreateSocket",
          "displayName": "Insecure call to SSLCertificateSocketFactory.createSocket()",
          "enabled": false,
          "description": "<html><body>Insecure call to <code>SSLCertificateSocketFactory.createSocket()</code><br><br>When <code>SSLCertificateSocketFactory.createSocket()</code> is called with an <code>InetAddress</code> as the first parameter, TLS/SSL hostname verification is not performed, which could result in insecure network traffic caused by trusting arbitrary hostnames in TLS/SSL certificates presented by peers. In this case, developers must ensure that the <code>InetAddress</code> is explicitly verified against the certificate through other means, such as by calling `SSLCertificateSocketFactory.getDefaultHostnameVerifier() to get a <code>HostnameVerifier</code> and calling <code>HostnameVerifier.verify()</code>.<br><br>Issue id: SSLCertificateSocketFactoryCreateSocket</body></html>"
        },
        {
          "shortName": "AndroidLintJavascriptInterface",
          "displayName": "Missing @JavascriptInterface on methods",
          "enabled": false,
          "description": "<html><body>Missing @JavascriptInterface on methods<br><br>As of API 17, you must annotate methods in objects registered with the <code>addJavascriptInterface</code> method with a <code>@JavascriptInterface</code> annotation.<br><br>Issue id: JavascriptInterface<br><br><a href=\"http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)\">http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)</a></body></html>"
        },
        {
          "shortName": "AndroidLintAddJavascriptInterface",
          "displayName": "addJavascriptInterface Called",
          "enabled": false,
          "description": "<html><body>addJavascriptInterface Called<br><br>For applications built for API levels below 17, <code>WebView#addJavascriptInterface</code> presents a security hazard as JavaScript on the target web page has the ability to use reflection to access the injected object's public fields and thus manipulate the host application in unintended ways.<br><br>Issue id: AddJavascriptInterface<br><br><a href=\"https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/\">https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/</a></body></html>"
        },
        {
          "shortName": "AndroidLintExportedPreferenceActivity",
          "displayName": "PreferenceActivity should not be exported",
          "enabled": false,
          "description": "<html><body>PreferenceActivity should not be exported<br><br>Fragment injection gives anyone who can send your PreferenceActivity an intent the ability to load any fragment, with any arguments, in your process.<br><br>Issue id: ExportedPreferenceActivity<br><br><a href=\"http://securityintelligence.com/new-vulnerability-android-framework-fragment-injection\">http://securityintelligence.com/new-vulnerability-android-framework-fragment-injection</a></body></html>"
        },
        {
          "shortName": "AndroidLintExportedService",
          "displayName": "Exported service does not require permission",
          "enabled": false,
          "description": "<html><body>Exported service does not require permission<br><br>Exported services (services which either set <code>exported=true</code> or contain an intent-filter and do not specify <code>exported=false</code>) should define a permission that an entity must have in order to launch the service or bind to it. Without this, any application can use this service.<br><br>Issue id: ExportedService</body></html>"
        },
        {
          "shortName": "AndroidLintSetJavaScriptEnabled",
          "displayName": "Using setJavaScriptEnabled",
          "enabled": false,
          "description": "<html><body>Using <code>setJavaScriptEnabled</code><br><br>Your code should not invoke <code>setJavaScriptEnabled</code> if you are not sure that your app really requires JavaScript support.<br><br>Issue id: SetJavaScriptEnabled<br><br><a href=\"http://developer.android.com/guide/practices/security.html\">http://developer.android.com/guide/practices/security.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintAuthLeak",
          "displayName": "Code contains url auth",
          "enabled": false,
          "description": "<html><body>Code might contain an auth leak<br><br>Strings in java apps can be discovered by decompiling apps, this lint check looks for code which looks like it may contain an url with a username and password<br><br>Issue id: AuthLeak</body></html>"
        },
        {
          "shortName": "AndroidLintBadHostnameVerifier",
          "displayName": "Insecure HostnameVerifier",
          "enabled": false,
          "description": "<html><body>Insecure HostnameVerifier<br><br>This check looks for implementations of <code>HostnameVerifier</code> whose <code>verify</code> method always returns true (thus trusting any hostname) which could result in insecure network traffic caused by trusting arbitrary hostnames in TLS/SSL certificates presented by peers.<br><br>Issue id: BadHostnameVerifier</body></html>"
        },
        {
          "shortName": "AndroidLintSetWorldReadable",
          "displayName": "File.setReadable() used to make file world-readable",
          "enabled": false,
          "description": "<html><body><code>File.setReadable()</code> used to make file world-readable<br><br>Setting files world-readable is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanisms for interactions such as <code>ContentProvider</code>, <code>BroadcastReceiver</code>, and <code>Service</code>.<br><br>Issue id: SetWorldReadable</body></html>"
        },
        {
          "shortName": "AndroidLintRiskyLibrary",
          "displayName": "Libraries with Privacy or Security Risks",
          "enabled": false,
          "description": "<html><body>Libraries with Privacy or Security Risks<br><br>Your app is using a version of a library that has been identified by the library developer as a potential source of privacy and/or security risks. This may be a violation of Google Play policies (see <a href=\"https://play.google.com/about/monetization-ads/ads/\">https://play.google.com/about/monetization-ads/ads/</a>) and/or affect your app&#8217;s visibility on the Play Store.<br/>\n<br/>\nWhen available, the individual error messages from lint will include details about the reasons for this advisory.<br/>\n<br/>\nPlease try updating your app with an updated version of this library, or remove it from your app.<br><br>Issue id: RiskyLibrary</body></html>"
        },
        {
          "shortName": "AndroidLintGetInstance",
          "displayName": "Cipher.getInstance with ECB",
          "enabled": false,
          "description": "<html><body>Cipher.getInstance with ECB<br><br><code>Cipher#getInstance</code> should not be called with ECB as the cipher mode or without setting the cipher mode because the default mode on android is ECB, which is insecure.<br><br>Issue id: GetInstance</body></html>"
        },
        {
          "shortName": "AndroidLintDeprecatedProvider",
          "displayName": "Using BC Provider",
          "enabled": false,
          "description": "<html><body>Using BC Provider<br><br>The <code>BC</code> provider has been deprecated and will not be provided when <code>targetSdkVersion</code> is P or higher.<br><br>Issue id: DeprecatedProvider<br><br><a href=\"https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html\">https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintTrustAllX509TrustManager",
          "displayName": "Insecure TLS/SSL trust manager",
          "enabled": false,
          "description": "<html><body>Insecure TLS/SSL trust manager<br><br>This check looks for X509TrustManager implementations whose <code>checkServerTrusted</code> or <code>checkClientTrusted</code> methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers.<br><br>Issue id: TrustAllX509TrustManager</body></html>"
        },
        {
          "shortName": "AndroidLintPackagedPrivateKey",
          "displayName": "Packaged private key",
          "enabled": false,
          "description": "<html><body>Packaged private key<br><br>In general, you should not package private key files inside your app.<br><br>Issue id: PackagedPrivateKey</body></html>"
        },
        {
          "shortName": "AndroidLintGrantAllUris",
          "displayName": "Content provider shares everything",
          "enabled": false,
          "description": "<html><body>Content provider shares everything<br><br>The <code>&lt;grant-uri-permission></code> element allows specific paths to be shared. This detector checks for a path URL of just '/' (everything), which is probably not what you want; you should limit access to a subset.<br><br>Issue id: GrantAllUris</body></html>"
        },
        {
          "shortName": "AndroidLintProxyPassword",
          "displayName": "Proxy Password in Cleartext",
          "enabled": false,
          "description": "<html><body>Proxy Password in Cleartext<br><br>Storing proxy server passwords in clear text is dangerous if this file is shared via version control. If this is deliberate or this is a truly private project, suppress this warning.<br><br>Issue id: ProxyPassword</body></html>"
        },
        {
          "shortName": "AndroidLintWorldReadableFiles",
          "displayName": "openFileOutput() or similar call passing MODE_WORLD_READABLE",
          "enabled": false,
          "description": "<html><body><code>openFileOutput()</code> or similar call passing <code>MODE_WORLD_READABLE</code><br><br>There are cases where it is appropriate for an application to write world readable files, but these should be reviewed carefully to ensure that they contain no private data that is leaked to other applications.<br><br>Issue id: WorldReadableFiles</body></html>"
        },
        {
          "shortName": "AndroidLintInsecureBaseConfiguration",
          "displayName": "Insecure base configuration",
          "enabled": false,
          "description": "<html><body>Setting <code>cleartextTrafficPermitted</code> to <code>\"true\"</code> by default is not recommended<br><br>Permitting cleartext traffic could allow eavesdroppers to intercept data sent by your app, which impacts the privacy of your users. Consider only allowing encrypted traffic by setting the <code>cleartextTrafficPermitted</code> tag to <code>\"false\"</code>.<br><br>Issue id: InsecureBaseConfiguration<br><br><a href=\"https://developer.android.com/preview/features/security-config.html\">https://developer.android.com/preview/features/security-config.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintUseCheckPermission",
          "displayName": "Using the result of check permission calls",
          "enabled": false,
          "description": "<html><body>Using the result of check permission calls<br><br>You normally want to use the result of checking a permission; these methods return whether the permission is held; they do not throw an error if the permission is not granted. Code which does not do anything with the return value probably meant to be calling the enforce methods instead, e.g. rather than <code>Context#checkCallingPermission</code> it should call <code>Context#enforceCallingPermission</code>.<br><br>Issue id: UseCheckPermission</body></html>"
        },
        {
          "shortName": "AndroidLintAllowAllHostnameVerifier",
          "displayName": "Insecure HostnameVerifier",
          "enabled": false,
          "description": "<html><body>Insecure HostnameVerifier<br><br>This check looks for use of HostnameVerifier implementations whose <code>verify</code> method always returns true (thus trusting any hostname) which could result in insecure network traffic caused by trusting arbitrary hostnames in TLS/SSL certificates presented by peers.<br><br>Issue id: AllowAllHostnameVerifier</body></html>"
        },
        {
          "shortName": "AndroidLintUnsafeProtectedBroadcastReceiver",
          "displayName": "Unsafe Protected BroadcastReceiver",
          "enabled": false,
          "description": "<html><body>Unsafe Protected BroadcastReceiver<br><br>BroadcastReceivers that declare an intent-filter for a protected-broadcast action string must check that the received intent's action string matches the expected value, otherwise it is possible for malicious actors to spoof intents.<br><br>Issue id: UnsafeProtectedBroadcastReceiver</body></html>"
        },
        {
          "shortName": "AndroidLintExportedContentProvider",
          "displayName": "Content provider does not require permission",
          "enabled": false,
          "description": "<html><body>Content provider does not require permission<br><br>Content providers are exported by default and any application on the system can potentially use them to read and write data. If the content provider provides access to sensitive data, it should be protected by specifying <code>export=false</code> in the manifest or by protecting it with a permission that can be granted to other applications.<br><br>Issue id: ExportedContentProvider</body></html>"
        },
        {
          "shortName": "AndroidLintSignatureOrSystemPermissions",
          "displayName": "signatureOrSystem permissions declared",
          "enabled": false,
          "description": "<html><body>signatureOrSystem permissions declared<br><br>The <code>signature</code> protection level should probably be sufficient for most needs and works regardless of where applications are installed. The <code>signatureOrSystem</code> level is used for certain situations where multiple vendors have applications built into a system image and need to share specific features explicitly because they are being built together.<br><br>Issue id: SignatureOrSystemPermissions</body></html>"
        },
        {
          "shortName": "AndroidLintAllowBackup",
          "displayName": "AllowBackup/FullBackupContent Problems",
          "enabled": false,
          "description": "<html><body>AllowBackup/FullBackupContent Problems<br><br>The <code>allowBackup</code> attribute determines if an application's data can be backed up and restored. It is documented at <a href=\"http://developer.android.com/reference/android/R.attr.html#allowBackup\">http://developer.android.com/reference/android/R.attr.html#allowBackup</a><br/>\n<br/>\nBy default, this flag is set to <code>true</code> which means application data can be backed up and restored by the OS. Setting <code>allowBackup=\"false\"</code> opts the application out of being backed up and so users can't restore data related to it when they go through the device setup wizard.<br/>\n<br/>\nAllowing backups may have security consequences for an application. Currently <code>adb backup</code> allows users who have enabled USB debugging to copy application data off of the device. Once backed up, all application data can be read by the user. <code>adb restore</code> allows creation of application data from a source specified by the user. Following a restore, applications should not assume that the data, file permissions, and directory permissions were created by the application itself.<br/>\n<br/>\nTo fix this warning, decide whether your application should support backup, and explicitly set <code>android:allowBackup=(true|false)\"</code>.<br/>\n<br/>\nIf not set to false, and if targeting API 23 or later, lint will also warn that you should set <code>android:fullBackupContent</code> to configure auto backup.<br><br>Issue id: AllowBackup<br><br><a href=\"https://developer.android.com/training/backup/autosyncapi.html\">https://developer.android.com/training/backup/autosyncapi.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintUnprotectedSMSBroadcastReceiver",
          "displayName": "Unprotected SMS BroadcastReceiver",
          "enabled": false,
          "description": "<html><body>Unprotected SMS BroadcastReceiver<br><br>BroadcastReceivers that declare an intent-filter for SMS_DELIVER or SMS_RECEIVED must ensure that the caller has the BROADCAST_SMS permission, otherwise it is possible for malicious actors to spoof intents.<br><br>Issue id: UnprotectedSMSBroadcastReceiver</body></html>"
        },
        {
          "shortName": "AndroidLintEasterEgg",
          "displayName": "Code contains easter egg",
          "enabled": false,
          "description": "<html><body>Code contains easter egg<br><br>An \"easter egg\" is code deliberately hidden in the code, both from potential users and even from other developers. This lint check looks for code which looks like it may be hidden from sight.<br><br>Issue id: EasterEgg</body></html>"
        },
        {
          "shortName": "AndroidLintUnsafeDynamicallyLoadedCode",
          "displayName": "load used to dynamically load code",
          "enabled": false,
          "description": "<html><body><code>load</code> used to dynamically load code<br><br>Dynamically loading code from locations other than the application's library directory or the Android platform's built-in library directories is dangerous, as there is an increased risk that the code could have been tampered with. Applications should use <code>loadLibrary</code> when possible, which provides increased assurance that libraries are loaded from one of these safer locations. Application developers should use the features of their development environment to place application native libraries into the lib directory of their compiled APKs.<br><br>Issue id: UnsafeDynamicallyLoadedCode</body></html>"
        },
        {
          "shortName": "AndroidLintInvalidPermission",
          "displayName": "Permission attribute declared on invalid element.",
          "enabled": false,
          "description": "<html><body>Invalid Permission Attribute<br><br>Not all elements support the permission attribute. If a permission is set on an invalid element, it is a no-op and ignored. Ensure that this permission attribute was set on the correct element to protect the correct component.<br><br>Issue id: InvalidPermission</body></html>"
        },
        {
          "shortName": "AndroidLintUsingC2DM",
          "displayName": "Using C2DM",
          "enabled": false,
          "description": "<html><body>Using C2DM<br><br>The C2DM library does not work on Android P or newer devices;             you should migrate to Firebase Cloud Messaging to ensure reliable message delivery.<br><br>Issue id: UsingC2DM<br><br><a href=\"https://developers.google.com/cloud-messaging/c2dm\">https://developers.google.com/cloud-messaging/c2dm</a></body></html>"
        },
        {
          "shortName": "AndroidLintUnsafeNativeCodeLocation",
          "displayName": "Native code outside library directory",
          "enabled": false,
          "description": "<html><body>Native code outside library directory<br><br>In general, application native code should only be placed in the application's library directory, not in other locations such as the res or assets directories. Placing the code in the library directory provides increased assurance that the code will not be tampered with after application installation. Application developers should use the features of their development environment to place application native libraries into the lib directory of their compiled APKs. Embedding non-shared library native executables into applications should be avoided when possible.<br><br>Issue id: UnsafeNativeCodeLocation</body></html>"
        },
        {
          "shortName": "AndroidLintSetWorldWritable",
          "displayName": "File.setWritable() used to make file world-writable",
          "enabled": false,
          "description": "<html><body><code>File.setWritable()</code> used to make file world-writable<br><br>Setting files world-writable is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanisms for interactions such as <code>ContentProvider</code>, <code>BroadcastReceiver</code>, and <code>Service</code>.<br><br>Issue id: SetWorldWritable</body></html>"
        },
        {
          "shortName": "AndroidLintWorldWriteableFiles",
          "displayName": "openFileOutput() or similar call passing MODE_WORLD_WRITEABLE",
          "enabled": false,
          "description": "<html><body><code>openFileOutput()</code> or similar call passing <code>MODE_WORLD_WRITEABLE</code><br><br>There are cases where it is appropriate for an application to write world writeable files, but these should be reviewed carefully to ensure that they contain no private data, and that if the file is modified by a malicious application it does not trick or compromise your application.<br><br>Issue id: WorldWriteableFiles</body></html>"
        }
      ]
    },
    {
      "name": "Language injection",
      "inspections": [
        {
          "shortName": "LanguageMismatch",
          "displayName": "Language mismatch",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        Checks whether the language of a reference matches the expected language of the usage context.\n      </p>\n\n      <p>Example:</p> \n         <pre>\n        @Language(\"JavaScript\")\n        String JS_CODE = \"var x;\";\n\n        @Language(\"XPath\")\n        String XPATH_CODE = JS_CODE;\n        </pre>\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\"><p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnknownLanguage",
          "displayName": "Unknown Language ID",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        Checks whether the ID of the language used in an <code>@Language</code> annotation refers to an\n        existing language implementation.\n      </p>\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\"><p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        },
        {
          "shortName": "InjectionNotApplicable",
          "displayName": "Injection Annotation not applicable",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      <p>\n        Checks whether a language-injection annotation (<code>@Language</code> or derived ones)\n        is valid to be applied to the annotated element. Only elements of type <code>String</code>\n        and <code>String[]</code> may be annotated.\n      </p>\n    </td>\n  </tr>\n  <tr>\n    <td height=\"20\">\n      <font face=\"verdana\" size=\"-2\"><p id=\"footer\">Powered by IntelliLang</p></font>\n    </td>\n  </tr>\n</table>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Logging",
      "inspections": [
        {
          "shortName": "LoggingConditionDisagreesWithLogStatement",
          "displayName": "Log condition does not match logging call",
          "enabled": false,
          "description": "<html>\n<body>\nReports <em>is log enabled for</em> conditions of if statements which\ndo not match the log level of the contained logging call.\n<p>\nFor example:\n<code><pre>\n<b>if</b> (logger.isTraceEnabled()) {\n    logger.debug(\"some log message\");\n}\n</pre></code>\n<p>This inspection understands the <i>java.util.logging</i>, <i>log4j</i>, <i>Log4j 2</i>, <i>Apache Commons Logging</i>\nand <i>SLF4J</i> logging frameworks.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LoggerInitializedWithForeignClass",
          "displayName": "Logger initialized with foreign class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>Logger</b>s which are initialized with a class literal from a different class than the <b>Logger</b>\nis contained in.\n<!-- tooltip end -->\n<p>\nUse the table below to specify the logger factory classes and logger factory methods recognized by this inspection.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "PlaceholderCountMatchesArgumentCount",
          "displayName": "Number of placeholders does not match number of arguments in logging call",
          "enabled": false,
          "description": "<html>\n<body>\nReports SLF4J or Log4j 2 logging calls where the number of {}-placeholders in the string literal argument\ndoes not match the number of other arguments to the logging call.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithoutLogger",
          "displayName": "Class without logger",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which do not have a logger declared.\nEnsuring that every class has a dedicated logger is an important step in providing a unified logging\nimplementation for an application. Interfaces, enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the table below to specify Logger class names.\nClasses which do not declare a field with the type of one of the classes specified, will be reported by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonStaticFinalLogger",
          "displayName": "Non-constant logger",
          "enabled": false,
          "description": "<html>\n<body>\nReports logger fields on classes which are not declared <b>static</b> and <b>final</b>.\nEnsuring that every classes logger is effectively constant and bound to that class\nsimplifies the task of providing a unified logging implementation for an application. Interfaces,\nenumerations, annotations and inner classes are not reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the table below to specify Logger class names.\nFields which have a type equal to one of the class names specified and which are not <b>static</b>\nand <b>final</b>, will be reported by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicMethodWithoutLogging",
          "displayName": "'public' method without logging",
          "enabled": false,
          "description": "<html>\n<body>\nReports any public method which does not contain a logging statement. This inspection does not report\nsimple getters and setters.\n<!-- tooltip end -->\n<p>\nUse the table below to specify Logger class names.\nPublic methods which do not contain a call to a method of a variable with the type of one of the classes specified,\n  will be reported by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithMultipleLoggers",
          "displayName": "Class with multiple loggers",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which have multiple loggers declared.\nEnsuring that every class has a single dedicated logger is an important step in providing a unified logging\nimplementation for an application. Interfaces,\nenumerations, annotations, inner classes, and abstract classes are not reported by this inspection.\n<!-- tooltip end -->\n<p>\nUse the table below to specify Logger class names.\nClasses which declare multiple fields which have the type of one of the classes specified, will be reported by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LogStatementGuardedByLogCondition",
          "displayName": "Logging call not guarded by log condition",
          "enabled": false,
          "description": "<html>\n<body>\nReports logging calls with non-constant arguments which are not surrounded by a guard condition.\nThe evaluation of the arguments of a logging call can be expensive.\nSurrounding a logging call with a guard clause prevents that cost, when the logging\nis disabled for the level used by the logging statement. This is especially useful for the\nleast serious level (trace, debug, finest) of logging calls, because those are\nmost often disabled in a production environment.\n<!-- tooltip end -->\n<p>\nUse the text field below to specify the logger class name used.\n<p>\nUse the table to specify the logging methods this inspection should warn on, with the corresponding\nlog condition text.\n<p>\nUse the checkbox below to let this inspection flag all unguarded log calls, not only those with non-constant arguments.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationArgumentToLogCall",
          "displayName": "Non-constant string concatenation as argument to logging call",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-constant string concatenations used as arguments to SLF4J and Log4j 2 logging methods.\nNon-constant concatenations will be evaluated at runtime even when the logging message is not logged; this can negatively impact performance.\nIt is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled.\n<!-- tooltip end -->\n<p>\nUse the combobox below to ignore certain higher logging levels.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "DOM issues",
      "inspections": [
        {
          "shortName": "InnerHTMLJS",
          "displayName": "Use of 'innerHTML' property",
          "enabled": false,
          "description": "<html>\n<body>\nReports JavaScript accesses to DOM nodes as text using the <b>innerHTML</b> property.\nMost uses of <b>innerHTML</b> are better performed using explicit\nDOM calls such as <b>getElementByID()</b> and\n<b>createElement()</b>.  Additionally,\n<b>innerHTML</b> will not work with XML\nDOMs, including DOMs for XHTML if viewed as XML.  This can lead to difficult to\ndiagnose bugs.\n</body>\n</html>\n"
        },
        {
          "shortName": "PlatformDetectionJS",
          "displayName": "Platform detection",
          "enabled": false,
          "description": "<html>\n<body>\nReports common JavaScript patterns for detecting\nthe browser or operating system in which the script is being run.  In addition\nto pointing out non-portable constructs, these platform detection patterns\nare often incomplete and easily fooled.  For most cases, detection of individual\nenvironment features is preferable to attempting to detect the entire platform.\nPatterns detected include\n<b>document.all</b>,\n<b>document.layers</b>,\n<b>navigator.userAgent</b>,\n<b>navigator.oscpu</b>,\n<b>navigator.appName</b>,\n<b>navigator.appCodeName</b>, and\n<b>navigator.platform</b>\n</body>\n</html>\n"
        },
        {
          "shortName": "DocumentWriteJS",
          "displayName": "Call to 'document.write()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls to <b>document.write()</b> or <b>document.writeln()</b>.\nMost uses of these calls are better performed using explicit\nDOM calls such as <b>getElementByID()</b> and\n<b>createElement()</b>.  Additionally, the <b>write()</b> and\n<b>writeln()</b> calls will not work with XML\nDOMs, including DOMs for XHTML if viewed as XML.  This can result in difficulty to point out bugs.\n</body>\n</html>\n"
        },
        {
          "shortName": "XHTMLIncompatabilitiesJS",
          "displayName": "XHTML incompatibilities",
          "enabled": false,
          "description": "<html>\n<body>\nReports common JavaScript DOM patterns which may present problems\nwith XHTML documents. In particular, the patterns detected will behave completely\ndifferently depending on whether the document is loaded as XML or HTML.\nThis can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content.\nPatterns detected include\n<b>document.body</b>,\n<b>document.images</b>,\n<b>document.applets</b>,\n<b>document.links</b>,\n<b>document.forms</b>, and\n<b>document.anchors</b>.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Hibernate",
      "inspections": [
        {
          "shortName": "CriteriaApiResolveInspection",
          "displayName": "Hibernate Criteria API unrecognized property problems",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection lets you spot the unrecognized property problems that might occur in Hibernate Criteria API usage\n</body>\n</html>"
        },
        {
          "shortName": "HibernateMappingDomInspection",
          "displayName": "Hibernate XML mappings problems",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in XML descriptors that define Hibernate mappings:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>"
        },
        {
          "shortName": "HibernateMappingDatasourceDomInspection",
          "displayName": "Hibernate DB-related XML mappings problems",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in XML descriptors that define Hibernate mappings:\n\n<li>References to unrecognized catalogs/schemas/tables\n<li>References to unrecognized columns\n\n</body>\n</html>"
        },
        {
          "shortName": "HibernateConfigDomFacetInspection",
          "displayName": "Hibernate configuration XML is not added to facet problem",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you add hibernate configuration file to a facet configuration if it is not there\n</body>\n</html>"
        },
        {
          "shortName": "HibernateConfigDomInspection",
          "displayName": "Hibernate XML configuration problems",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in XML descriptors that define Hibernate configuration:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Guice",
      "inspections": [
        {
          "shortName": "UninstantiableBinding",
          "displayName": "Uninstantiable binding",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any explicit Guice bindings where the specified class is not\n                instantiable by Guice. A class may be uninstantiable because it is an interface, is abstract, or does\n                not have an injectable constructor.\n\n</body>\n</html>"
        },
        {
          "shortName": "InvalidProvidedBy",
          "displayName": "Invalid @ProvidedBy annotation",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.ImplementedBy annotations where specified class does not\n                provide the annotated class.\n\n</body>\n</html>"
        },
        {
          "shortName": "SessionScopedInjectsRequestScoped",
          "displayName": "@SessionScoped component injects @RequestScoped component",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.servlet.SessionScoped classes which\n                injects a @com.google.inject.servlet.RequestScoped class. Such scope inversion has indeterminate\n                semantics, and is very likely not what is intended.\n\n</body>\n</html>"
        },
        {
          "shortName": "InterceptionAnnotationWithoutRuntimeRetention",
          "displayName": "Interception annotation without runtime retention",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports interception annotations that do not have runtime retention.\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryStaticInjection",
          "displayName": "Unnecessary static injection",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports classes which are passed to requestStaticInjection() method\n                but do not have any static members or fields annotated with @Inject. \n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantScopeBinding",
          "displayName": "Redundant scope binding",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any scope restrictions on explicit bindings which are equivalent to a scope\n                annotation\n                on the bound class. Such scope restrictions are redundant, and may cause confusion as programs evolve.\n\n</body>\n</html>"
        },
        {
          "shortName": "PointlessBinding",
          "displayName": "Pointless binding",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any trivial explicit bindings. Trivial bindings simply declare that a class is\n                implemented by\n                itself, when the class doesn't have any conflicting @ImplementedBy or @ProvidedBy annotations. Such\n                bindings are redundant, and may cause confusion as programs evolve.\n\n</body>\n</html>"
        },
        {
          "shortName": "InvalidRequestParameters",
          "displayName": "Incorrect type for @RequestParemeters parameters",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.RequestParameter annotations on fields or\n                parameters which do not have type Map&lt;String, String[]&gt;.\n\n</body>\n</html>"
        },
        {
          "shortName": "UninstantiableImplementedByClass",
          "displayName": "Uninstantiable @ImplementedBy class",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.ImplementedBy annotations where the specified class is\n                not\n                instantiable by Guice. A class may be uninstantiable because it is an interface, is abstract, or does\n                not\n                have an injectable constructor.\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantToBinding",
          "displayName": "Redundant binding",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any explicit bindings which are equivalent to an @ImplementedBy annotation\n                on the bound class. Such bindings are redundant, and may cause confusion as programs evolve.\n\n</body>\n</html>"
        },
        {
          "shortName": "UninstantiableProvidedByClass",
          "displayName": "Uninstantiable @ProvidedBy class",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.ProvidedBy annotations where the specified class is not\n                instantiable by Guice. A class may be uninstantiable because it is an interface, is abstract, or does\n                not\n                have an injectable constructor.\n\n</body>\n</html>"
        },
        {
          "shortName": "ConflictingAnnotations",
          "displayName": "Conflicting Guice annotations",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any conflicting Guice annotations on a given class. For instance, declaring a\n                class as both @ImplementedBy and @ProvidedBy, or both @Singleton and @SessionScoped.\n\n</body>\n</html>"
        },
        {
          "shortName": "InvalidImplementedBy",
          "displayName": "Invalid @ImplementedBy annotation",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.ImplementedBy annotations where specified class does not\n                implement the annotated class.\n\n</body>\n</html>"
        },
        {
          "shortName": "SingletonInjectsScoped",
          "displayName": "@Singleton component injects scoped component",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any @com.google.inject.Singleton classes which\n                injects a @com.google.inject.servlet.RequestScoped or @com.google.inject.servlet.SessionScoped class.\n                Such scope inversion has indeterminate semantics, and is very likely not what is intended.\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantToProviderBinding",
          "displayName": "Redundant provider binding",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports any explicit provider bindings which are equivalent to a @ProvidedBy annotation\n                on the bound class. Such provider bindings are redundant, and may cause confusion as programs evolve.\n\n</body>\n</html>"
        },
        {
          "shortName": "BindingAnnotationWithoutInject",
          "displayName": "Binding annotations without @Inject",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports binding annotations on fields or parameters without a matching @Inject\n                annotation. Such annotations will be ignored by Guice.\n\n</body>\n</html>"
        },
        {
          "shortName": "MultipleBindingAnnotations",
          "displayName": "Multiple binding annotations on variable",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports parameters with multiple binding annotations. This is disallowed by\n                the Guice specification.\n\n</body>\n</html>"
        },
        {
          "shortName": "MultipleInjectedConstructorsForClass",
          "displayName": "Multiple @Inject constructors for class",
          "enabled": false,
          "description": "<html>\n<body>\n\n                Reports classes with multiple constructors annotated as @com.google.inject.Inject. Guice\n                will\n                be unable to decide which constructor to invoke to create a class instance if multiple constructors are\n                annotated.\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring MVC",
      "inspections": [
        {
          "shortName": "MVCPathVariableInspection",
          "displayName": "Spring MVC @PathVariable",
          "enabled": false,
          "description": "Checks references for @PathVariable."
        },
        {
          "shortName": "SpringMVCViewInspection",
          "displayName": "Spring MVC View Reference",
          "enabled": false,
          "description": "Checks if Spring MVC View references are resolved correctly."
        },
        {
          "shortName": "SpringMVCInitBinder",
          "displayName": "Spring MVC @InitBinder",
          "enabled": false,
          "description": "Validates @InitBinder methods in Controllers."
        },
        {
          "shortName": "MVCIncorrectMimeTypeReference",
          "displayName": "Incorrect MIME Type declaration",
          "enabled": false,
          "description": "Checks MIME Type declarations in Spring MVC annotations."
        }
      ]
    },
    {
      "name": "RegExp",
      "inspections": [
        {
          "shortName": "RegExpSingleCharAlternation",
          "displayName": "Single character alternation",
          "enabled": false,
          "description": "<html>\n<body>\nReports single char alternation (e.g. <b><code>a|b|c|d</code></b>) in a RegExp.\nIt is simpler to use a character class (<b><code>[abcd]</code></b>) instead.\nThis usually also provides slightly better matching performance.\n<!-- tooltip end -->\n<p>\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpEmptyAlternationBranch",
          "displayName": "Empty branch in alternation",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports empty branches in a RegExp alternation. For example:<br> <code>a<b>||</b>b</code>\n<p>An empty branch will only match the empty string, and in most cases that is not what is desired.\nThis inspection will not report a single empty branch at the start or the end of an alternation.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpRedundantEscape",
          "displayName": "Redundant character escape",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports character escapes that are replaceable with the unescaped character without a change in meaning.\nNote that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class.\nFor example the regex <b><code>[\\.]</code></b> is identical to <b><code>[.]</code></b>\n<!-- tooltip end -->\n<p><small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpDuplicateAlternationBranch",
          "displayName": "Duplicate branch in alternation",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports duplicate branches in a RegExp alternation. For example <code>(a|b|a)</code>.\nDuplicate branches slow down matching and obscure the intent of the expression.\n<!-- tooltip end -->\n<p><small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpUnexpectedAnchor",
          "displayName": "Begin or end anchor in unexpected position",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports <code>^</code> or <code>\\A</code> anchors not at the beginning of the pattern and\n<code>$</code>, <code>\\Z</code> or <code>\\z</code> anchors not at the end of the pattern.\nIn the wrong position these RegExp anchors prevent the pattern from matching anything.\nIn case of the <code>^</code> and <code>$</code> anchors, most likely the literal character was meant and the escape forgotten.\n<!-- tooltip end -->\n<p>\n<small>New in 2018.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpOctalEscape",
          "displayName": "Octal escape",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports octal escapes, which are easily confused with back references.\nUse hexadecimal escapes to avoid confusion.\n<!-- tooltip end -->\n<p><small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpAnonymousGroup",
          "displayName": "Anonymous capturing group or numeric back reference",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports anonymous capturing groups and numeric back references in a RegExp.\nThese are only reported when the RegExp dialect supports named group and named group references.\nNamed groups and named back references improve code readability and are recommended to use instead.\nWhen a capture is not needed, matching can be more performant and use less memory by using a non-capturing group,\ni.e. <b>(?:xxx)</b> instead of <b>(xxx)</b>.\n<!-- tooltip end -->\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpRepeatedSpace",
          "displayName": "Consecutive spaces",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports multiple consecutive spaces in a RegExp.\nBecause spaces are not visible by default, it can be hard to see how many spaces are required.\nThe RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n<!-- tooltip end -->\n<p>\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpEscapedMetaCharacter",
          "displayName": "Escaped meta character",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  -->\n\n<html>\n<body>\nReports the escaped meta characters, e.g. <b><code>\\.</code></b>.\nSome RegExp coding styles specify that meta characters should be placed inside a character class,\nto make the regular expression easier to understand.\nFor example the regex <b><code>\\d+\\.\\d+</code></b> would be written as <code>\\d+[.]\\d+</code>.\nThis inspection does not warn about the meta character <b><code>[</code></b>, <b><code>]</code></b> and <b><code>^</code></b>,\nbecause those would need additional escaping inside a character class.\n<!-- tooltip end -->\n<p><small>New in 2017.1</small>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Grails",
      "inspections": [
        {
          "shortName": "InvalidI18nProperty",
          "displayName": "Invalid i18n property key",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks unresolved properties from *.property files.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code maturity",
      "inspections": [
        {
          "shortName": "Deprecation",
          "displayName": "Deprecated API usage",
          "enabled": true,
          "description": "<html>\n<body>\nReports where deprecated code is used in the specified inspection scope.\n</body>\n</html>\n"
        },
        {
          "shortName": "MarkedForRemoval",
          "displayName": "Usage of API marked for removal",
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of deprecated API (classes, fields, and methods) which are marked for removal with\n<code>@Deprecated(<b>forRemoval</b>=true)</code>\n<!-- tooltip end -->\n<p>\n  The code that uses API marked for removal may cause a runtime error with a future version of the API.<br>\n  The recommended severity of this inspection is <i>Error</i> to emphasize that.\n<p>\n  You may change the severity of this inspection to <i>Warning</i> if you want the same text decoration as ordinary deprecation has.\n<p>\n  <small>New in 2017.3</small>\n</body>\n</html>\n"
        },
        {
          "shortName": "SuppressionAnnotation",
          "displayName": "Inspection suppression annotation",
          "enabled": false,
          "description": "<html>\n<body>\nReports any inspection suppression comments or annotations.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfObsoleteDateTimeApi",
          "displayName": "Use of obsolete date-time API",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <b>java.util.Date</b>, <b>java.util.Calendar</b>, <b>java.util.GregorianCalendar</b>, <b>java.util.TimeZone</b>,\nand <b>java.util.SimpleTimeZone</b>.\nWhile still supported, these classes were made obsolete by the JDK8 Date-Time API, and should probably\nnot be used in new development.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ThrowablePrintedToSystemOut",
          "displayName": "'Throwable' printed to 'System.out'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>System.out.println()</b> with an exception as an argument.\nThis is even worse than calling <b>printStackTrace()</b> on an exception, since it will be unclear where the exception originated.\nCalls to <b>System.out.print()</b>, <b>System.err.println()</b> and <b>System.err.print()</b> with an exception argument will also be\nreported.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedIsStillUsed",
          "displayName": "Deprecated member is still used",
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated classes, methods and fields which are used in your code nonetheless.\n<br>\nFor example:\n\n<pre>\n<b><font color=\"#000080\">class</font></b> MyCode {\n  @Deprecated\n  // warning: \"Deprecated member is still used\"\n  <b><font color=\"#000080\">void</font></b> <span style=\"background-color: yellow;\">oldMethod</span>() {}\n\n  <b><font color=\"#000080\">void</font></b> newMethod() {\n    oldMethod(); // forgotten usage\n  }\n}\n</pre>\n(Usages from within deprecated places are ignored).\n</body>\n</html>"
        },
        {
          "shortName": "SystemOutErr",
          "displayName": "Use of System.out or System.err",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <b>System.out</b> or <b>System.err</b>.\nThese are often temporary debugging statements, and should probably be either removed from production code, or replaced by a more robust\nlogging facility.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ObsoleteCollection",
          "displayName": "Use of obsolete collection type",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <b>java.util.Vector</b>\n, <b>java.util.Hashtable</b> and <b>java.util.Stack</b>.\nUsages of these classes can most often be replaced by uses of\n<b>java.util.ArrayList</b>, <b>java.util.HashMap</b> and <b>java.util.ArrayDeque</b> respectively.\nWhile still supported,\nthe former classes were made obsolete by the JDK1.2 collection classes, and should probably\nnot be used in new development.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore any cases where the obsolete collections are used\nas an argument to a method or assigned to a variable that requires the obsolete type.\nEnabling this option is potentially quite processor intensive.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThrowablePrintStackTrace",
          "displayName": "Call to 'printStackTrace()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>Throwable.printStackTrace()</b> without arguments.\nSuch statements are often used for temporary debugging, and should probably be either removed from production code,\nor replaced with a more robust logging facility.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ThreadDumpStack",
          "displayName": "Call to 'Thread.dumpStack()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses <b>Thread.dumpStack()</b>.\nThese are often temporary debugging statements, and should probably be either removed from production code,\nor replaced by a more robust logging facility.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Tapestry",
      "inspections": [
        {
          "shortName": "TelReferencesInspection",
          "displayName": "Tapestry EL references inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that Tapestry EL references are resolved correctly\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Node.js",
      "inspections": [
        {
          "shortName": "NodeModulesDependencies",
          "displayName": "Missing require() statement",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that all modules are referenced through <b>require()</b>.\n<p>Suggests inserting the <b>require()</b> call.</p>\n<p>Works only in files in the scope of <em>Node.js Core</em> JavaScript library.</p>\n<p>When using libraries that define their own global symbols outside their visible JavaScript code (e.g. <b>describe()</b>\n  in <a href=\"https://mochajs.org/\">Mocha</a>),<br/>\n  it is recommended that you <a href=\"https://www.jetbrains.com/webstorm/help/configuring-javascript-libraries.html#d24640e316\">add</a>\n  the corresponding TypeScript type definition file as a JavaScript library in <em>Preferences | Languages & Frameworks | JavaScript | Libraries</em>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "NodeCoreCodingAssistance",
          "displayName": "Unresolved Node.js APIs",
          "enabled": false,
          "description": "<html>\n<body>\nSuggests configuring coding assistance for Node.js, e.g. 'require' and/or core modules ('path', 'http', 'fs', etc.).\n<p></p>\nSee <a href=\"https://nodejs.org/api/\">https://nodejs.org/api/</a> for the complete list.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Concurrency annotation issues",
      "inspections": [
        {
          "shortName": "StaticGuardedByInstance",
          "displayName": "Static member guarded by instance field or this",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>@GuardedBy</b> annotations on <b>static</b> fields or methods,\nwhere the guard is either a non-static field or <b>this</b>. Guarding a <b>static</b> by a non-static may result in\nexcessive concurrency, multiple threads may be able to access the guarded field simultaneously, by locking in different object contexts.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "FieldAccessNotGuarded",
          "displayName": "Unguarded field access or method call",
          "enabled": false,
          "description": "<html>\n<body>\nReports accesses of fields declared as <b>@GuardedBy</b> which are are not guarded by an appropriate synchronization structure.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "InstanceGuardedByStatic",
          "displayName": "Instance member guarded by static field",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>@GuardedBy</b> annotations on instance fields or methods,\nwhere the guard is a <b>static</b> field. Guarding a non-static by a <b>static</b> may result in excessive lock contention,\nas access to each locked field in any object instance will prevent simultaneous access to that field in every object instance.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "UnknownGuard",
          "displayName": "Unknown @GuardedBy field",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>@GuardedBy</b> annotations where the specified guarding field is unknown.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalFieldInImmutable",
          "displayName": "Non-final field in @Immutable class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any non-final field in a class with <b>@Immutable</b> annotation.\nThis violates the contract of the <b>@Immutable</b> annotation.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalGuard",
          "displayName": "Non-final @GuardedBy field",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>@GuardedBy</b> annotations annotations where the guarding field\nis not <b>final</b>. Guarding on a non-final field may result in unexpected race conditions, as locks will\nbe held on the value of the field (which may change), rather than the field itself.\nSupported <b>@GuardedBy</b> annotations are:\n<ul>\n  <li>net.jcip.annotations.GuardedBy</li>\n  <li>javax.annotation.concurrent.GuardedBy</li>\n  <li>org.apache.http.annotation.GuardedBy</li>\n  <li>com.android.annotations.concurrency.GuardedBy</li>\n  <li>androidx.annotation.GuardedBy</li>\n  <li>com.google.errorprone.annotations.concurrent.GuardedBy</li>\n</ul>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Common",
      "inspections": [
        {
          "shortName": "ReactiveStreamsSubscriberImplementation",
          "displayName": "Class implements Subscriber",
          "enabled": false,
          "description": "<html>\n<body>\nUsually it is wrong to manually implement Subscriber interface. Consider using static generators from RxJava or Reactor, like:\n<ul>\n  <li>Flux.just, Flux.create, Flux.generate, Flux.from*</li>\n  <li>Mono.create, Mono.from*, Mono.just</li>\n  <li>Flowable.just, Flowable.from*</li>\n  <li>Maybe.just, Maybe.from*</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ReactiveStreamsNullableInLambdaInTransform",
          "displayName": "Return null or something nullable from a lambda in transformation method",
          "enabled": false,
          "description": "<html>\n<body>\nTransform operations of Reactive Streams Implementations do not support nulls.\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ReactiveStreamsUnusedPublisher",
          "displayName": "Unused publisher",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\nUsing an operator (a method of Mono/Flux/Flowable object that returns a Mono/Flux/Flowable) produces a new instance (Publisher).\nThe operator won't be applied until you subscribe to the created Publisher by using <code>subscribe()</code>.\n</p>\n<p>\nUsing a factory (for example, <code>Mono.just</code>) without subscribing to the Publisher\n  creates an object that is never used and is treated as an unnecessary memory allocation.\n</p>\n<p>\nFor example, <code>Mono.just(1, 2, 3).map(i -> i + 3)</code> won't be executed unless you subscribe to this Publisher,\nor unless you produce a new Publisher by applying operators and subscribe to it.\n</p>\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ReactiveStreamsPublisherImplementation",
          "displayName": "Class implements Publisher",
          "enabled": false,
          "description": "<html>\n<body>\nUsually it is wrong to manually implement Publisher interface. Consider using static generators from RxJava or Reactor, like:\n<ul>\n  <li>Flux.just, Flux.create, Flux.generate, Flux.from*</li>\n  <li>Mono.create, Mono.from*, Mono.just</li>\n  <li>Flowable.just, Flowable.from*</li>\n  <li>Maybe.just, Maybe.from*</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ReactiveStreamsTooLongSameOperatorsChain",
          "displayName": "Too long same methods chain",
          "enabled": false,
          "description": "<html>\n<body>\nEach operator method call (e.g. map or filter) creates some objects for those operators. This long chain of operators is called on each subscription, for each stream element. This may cause some performance overhead.\n</body>\n<p><small>New in 2019.3</small></p>\n</html>"
        },
        {
          "shortName": "ReactiveStreamsThrowInOperator",
          "displayName": "Throw statement in Reactive operator",
          "enabled": false,
          "description": "<html>\n<body>\n<p>Throwing exceptions from a Reactor/RxJava operator is a code smell, because you can return a \"Reactive-like\" error. For example,\n  it is possible to return <code>Mono.error(...)</code>/<code>Flowable.error(...)</code> from <code>flatMap</code>, or call <code>sink.error(...)</code> from\nReactor <code>handle</code> operator.\n</p>\n<p>\nAlso, Reactor factory methods allow returning checked exceptions without any errors, while throwing such exceptions without\nthe <code>Exceptions</code> util class leads to a compilation error.\n</p>\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Android",
      "inspections": [
        {
          "shortName": "AndroidElementNotAllowed",
          "displayName": "Android XML element is not allowed",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights unallowed XML tags in Android resource files and AndroidManifest.xml\n</body>\n</html>"
        },
        {
          "shortName": "AndroidNonConstantResIdsInSwitch",
          "displayName": "Non-constant resource ID in a switch statement",
          "enabled": false,
          "description": "<html><body>\nValidates using resource IDs in a switch statement in Android library module.<br>\nResource IDs are non final in the library projects since SDK tools r14,\nmeans that the library code cannot treat these IDs as constants.\n</body></html>"
        },
        {
          "shortName": "AndroidMissingOnClickHandler",
          "displayName": "onClick handler is missing in the related activity",
          "enabled": false,
          "description": "<html>\n<body>\nChecks if the method specified in onClick XML attribute is declared in related activity\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "XmlWrongFileType",
          "displayName": "Android XML root tag validation",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspections checks whether XML resources are stored in resource folder\nwhich type is recommended by documentation\n</body>\n</html>"
        },
        {
          "shortName": "AndroidUnknownAttribute",
          "displayName": "Unknown Android XML attribute",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights unknown XML attributes in Android resource files and AndroidManifest.xml\n</body>\n</html>"
        },
        {
          "shortName": "AndroidDomInspection",
          "displayName": "Android Resources Validation",
          "enabled": false,
          "description": "<html><body>\n  Validates resource references inside Android XML files.\n</body></html>"
        }
      ]
    },
    {
      "name": "SQL",
      "inspections": [
        {
          "shortName": "SqlDerivedTableAliasInspection",
          "displayName": "Each derived table should have alias",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that each derived table should have own alias.\n</body>\n</html>"
        },
        {
          "shortName": "MsOrderByInspection",
          "displayName": "Erroneous usages of ORDER BY in SQL Server queries",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports erroneous usages of ORDER BY clauses in SQL Server queries\n</body>\n</html>"
        },
        {
          "shortName": "SqlStringLengthExceededInspection",
          "displayName": "Implicit string truncation",
          "enabled": false,
          "description": "<html>\n<body>\nDetects variable assignments which involve implicit string truncation\n</body>\n</html>"
        },
        {
          "shortName": "SqlAggregatesInspection",
          "displayName": "Aggregate-related problems",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports incorrect or suspicious usages of SQL aggregate functions.\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantLimitInspection",
          "displayName": "Redundant row limiting in queries",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports redundant row limiting in queries.\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnusedVariableInspection",
          "displayName": "Unused variable",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection performs unused argument/variable check.\n</body>\n</html>"
        },
        {
          "shortName": "OraDeprecateTypeInspection",
          "displayName": "Deprecated type",
          "enabled": true,
          "description": "<html>\n<body>\n  Since 8.0 the 'long' type is deprecated and not recommended to use (because API for this type doesn't utilize character streams but transfer whole values each time).\n  In Oracle, do not create a table with LONG columns. Use LOB columns (CLOB, NCLOB, BLOB) instead. LONG columns are supported only for backward compatibility.\n</body>\n</html>"
        },
        {
          "shortName": "SqlCaseVsIfInspection",
          "displayName": "Using CASE instead of conditional function and vice versa",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports CASE expressions which can be replaced with IF-like function calls or vice versa depending on the chosen preferences\n</body>\n</html>"
        },
        {
          "shortName": "SqlIllegalCursorStateInspection",
          "displayName": "Illegal cursor state",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports illegal cursor states inside SQL routines.\n</body>\n</html>"
        },
        {
          "shortName": "SqlStorageInspection",
          "displayName": "SQL source modification detection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects that database sources have changed.\n</body>\n</html>"
        },
        {
          "shortName": "SqlCaseVsCoalesceInspection",
          "displayName": "Using CASE instead of COALESCE function and vice versa",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports CASE expressions which can be replaced with COALESCE calls or vice versa depending on the chosen preferences\n</body>\n</html>"
        },
        {
          "shortName": "SqlInsertNullIntoNotNullInspection",
          "displayName": "Insert NULL into NOT NULL column",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports insertions of NULL into NOT NULL columns.\n</body>\n</html>"
        },
        {
          "shortName": "SqlTriggerTransitionInspection",
          "displayName": "Suspicious code in triggers",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports incorrect usages of transition table variables in triggers\n</body>\n</html>"
        },
        {
          "shortName": "SqlNamedArgumentsInspection",
          "displayName": "Named arguments should be used",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports routine calls without named arguments\n</body>\n</html>"
        },
        {
          "shortName": "SqlAmbiguousColumnInspection",
          "displayName": "Ambiguous reference",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that column reference resolves to a single column.\n</body>\n</html>"
        },
        {
          "shortName": "SqlMissingColumnAliasesInspection",
          "displayName": "Missing column aliases",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports queries without explicit aliases for output expressions other than column references.\n</body>\n</html>"
        },
        {
          "shortName": "SqlDropIndexedColumnInspection",
          "displayName": "Index is dependent on column",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks dropping indexed columns in MS SQL and Sybase SQL Server.\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlTransactionStatementInTriggerInspection",
          "displayName": "Use of transaction management statements in triggers",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnusedSubqueryItemInspection",
          "displayName": "Unused subquery item",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports unused subquery items: columns and aliases that are not referenced in the outer query expression\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnusedCteInspection",
          "displayName": "Unused common table expression",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports unused common table expression inside SQL.\n</body>\n</html>"
        },
        {
          "shortName": "SqlDuplicateColumnInspection",
          "displayName": "Duplicating column name in SELECT",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection finds duplicating alias names for columns in SELECT output list.\n</body>\n</html>"
        },
        {
          "shortName": "SqlDialectInspection",
          "displayName": "SQL dialect detection",
          "enabled": false,
          "description": "<html>\n<body>\nDetects the best matching SQL dialect for files in <b>&lt;Generic&gt;</b> dialect.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SqlInsertValuesInspection",
          "displayName": "VALUES clause cardinality",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that the number of VALUES (...) parameters matches target table column list size.\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantElseNullInspection",
          "displayName": "Redundant ELSE NULL clause",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports redundant ELSE NULL clauses in CASE expressions.\n</body>\n</html>"
        },
        {
          "shortName": "SqlInsertIntoGeneratedColumnInspection",
          "displayName": "Insertion into generated columns",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports INSERT statements which assign values to generated columns\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantAliasInspection",
          "displayName": "Redundant alias expressions",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports redundant alias expressions\n</body>\n</html>"
        },
        {
          "shortName": "MysqlLoadDataPathInspection",
          "displayName": "LOAD statement path",
          "enabled": false,
          "description": "<html>\n<body>\nReports paths started with the tilde character in the <strong>LOAD</strong> statement\n</body>\n</html>"
        },
        {
          "shortName": "SqlResolveInspection",
          "displayName": "Unresolved reference",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection performs unresolved SQL references check.\n</body>\n</html>"
        },
        {
          "shortName": "SqlIdentifierLengthInspection",
          "displayName": "Excessively long identifiers",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports identifiers which are considered too long in a particular DBMS\n</body>\n</html>"
        },
        {
          "shortName": "SqlErrorHandlingInspection",
          "displayName": "SQL error handling",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights invalid usages of constructs that handle exceptions in SQL routines\n</body>\n</html>"
        },
        {
          "shortName": "SqlAutoIncrementDuplicateInspection",
          "displayName": "Auto-increment duplicate",
          "enabled": false,
          "description": "<html>\n<body>\n  This inspection checks <strong>auto_increment</strong> duplicates in MySQL, MS SQL and Db2 dialects.\n  A table in those dialects can contain only one auto-incrementing field.\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlShouldBeInGroupByInspection",
          "displayName": "Column should be in group by clause",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that column should be in group by clause or inside aggregate function call.\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnreachableCodeInspection",
          "displayName": "Unreachable code",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports unreachable statements inside SQL routines.\n</body>\n</html>"
        },
        {
          "shortName": "SqlSignatureInspection",
          "displayName": "Function signature",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection performs function signature check.\n</body>\n</html>"
        },
        {
          "shortName": "PgSelectFromProcedureInspection",
          "displayName": "Postgres: Select from procedure call",
          "enabled": false,
          "description": "<html>\n<body>\n\nSelect from <strong>dblink</strong> or function that returns record require typed alias list.\nScalar functions do not require alias and forbid typed alias lists completely.\n</body>\n</html>"
        },
        {
          "shortName": "SqlSideEffectsInspection",
          "displayName": "Statement with side effects",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection only runs during a read-only connection and\nreports statements that may lead to modification of the database.\n</body>\n</html>"
        },
        {
          "shortName": "SqlJoinWithoutOnInspection",
          "displayName": "Unsafe 'join' clause in 'delete' statement",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports usages of 'join' clause inside a 'delete' statement where no 'on' or 'where' checks are present.\nWithout conditional checks on 'join', 'delete' drops contents of the entire table.\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlNoDataSourceInspection",
          "displayName": "No data sources configured",
          "enabled": false,
          "description": "<html>\n<body>\nPrompts one to create a data source if there is none.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MsBuiltinInspection",
          "displayName": "Suspicious or incorrect usages of built-in functions",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports suspicious or incorrect use cases of SQL Server built-in functions\n</body>\n</html>"
        },
        {
          "shortName": "SqlTypeInspection",
          "displayName": "Types compatibility",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection performs type-related check.\n</body>\n</html>"
        },
        {
          "shortName": "SqlMissingReturnInspection",
          "displayName": "Missing return statement",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports functions with missing return statements.\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnicodeStringLiteralInspection",
          "displayName": "Unicode usage in SQL",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports string literals with national characters but lacking N prefix.\n</body>\n</html>"
        },
        {
          "shortName": "SqlMultipleLimitClausesInspection",
          "displayName": "Multiple row limiting/offset clauses in queries",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports queries with multiple row limiting/offset clauses.\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantCodeInCoalesceInspection",
          "displayName": "Redundant code in COALESCE call",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports redundant code inside COALESCE calls.\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantOrderingDirectionInspection",
          "displayName": "Redundant ordering direction",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports redundant ordering direction in ORDER BY clauses.\n</body>\n</html>"
        },
        {
          "shortName": "SqlCheckUsingColumnsInspection",
          "displayName": "Check using clause columns",
          "enabled": false,
          "description": "<html>\n<body>\n  This inspection checks that columns inside using clause exist in both tables.\n</body>\n</html>"
        },
        {
          "shortName": "SqlAddNotNullColumnInspection",
          "displayName": "Adding not null column without default value",
          "enabled": false,
          "description": "<html>\n<body>\n\nNecessary to specify the default value for the new column with not null constraint.\n</body>\n</html>"
        },
        {
          "shortName": "SqlCurrentSchemaInspection",
          "displayName": "Current console schema introspected",
          "enabled": false,
          "description": "<html>\n<body>\nWarns if current session's schema/database is not introspected.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SqlDtInspection",
          "displayName": "Ill-formed date/time literals",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports errors in SQL date/time literals.\n</body>\n</html>"
        },
        {
          "shortName": "SqlNullComparisonInspection",
          "displayName": "Null comparison",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks suspicious comparisons with NULL.\n</body>\n</html>"
        },
        {
          "shortName": "SqlGotoInspection",
          "displayName": "Usages of GOTO statements",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports usages of a GOTO statement\n</body>\n</html>"
        },
        {
          "shortName": "SqlIdentifierInspection",
          "displayName": "Identifier should be quoted",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection performs SQL identifier names check.\n</body>\n</html>"
        },
        {
          "shortName": "SqlWithoutWhereInspection",
          "displayName": "Delete or update statement without where clauses",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports usages of 'delete' or 'update' statements without any 'where' clauses.\nWhen used without 'where' clauses, 'delete' drops all the data from the table, and 'update' overwrites values for all table rows.\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlMisleadingReferenceInspection",
          "displayName": "Misleading references",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports potentially misleading references in SQL code\n</body>\n</html>\n"
        },
        {
          "shortName": "MysqlParsingInspection",
          "displayName": "MySQL: Syntax",
          "enabled": false,
          "description": "<html>\n<body>\nProvides diagnostic of MySQL parser idiosyncrasies.\n</body>\n</html>"
        },
        {
          "shortName": "SqlConstantConditionInspection",
          "displayName": "Constant condition",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports those conditions in the where or join clauses that are always\n<strong>true</strong> or <strong>false</strong>.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "BreakStatement",
          "displayName": "'break' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> statements,\nother than at the end of a <b>switch</b> statement branch.\n<b>break</b> statements complicate refactoring, and can be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalBreakInInfiniteLoop",
          "displayName": "Conditional break inside infinite loop",
          "enabled": false,
          "description": "<html>\n<body>\nDetects conditional breaks at the beginning or end of a loop and suggests to use a loop condition instead.\n<!-- tooltip end -->\nExample:\n<p><code>\n  while(true) {\n    if(i  == 23) break;\n    i++;\n  }\n</code></p>\n<p>Will be replaced with:\n<p><code>\n  while(i != 23) {\n    i++;\n  }\n</code></p>\n</body>\n</html>"
        },
        {
          "shortName": "LoopStatementsThatDontLoop",
          "displayName": "Loop statement that does not loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instance of <b>for</b>,\n<b>while</b> and <b>do</b> statements whose\nbodies are guaranteed to execute at most once. Normally, this is an indication of a bug.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore foreach loops.\nThese are sometimes used to perform an action only on the first item of an iterable in a compact way.\nFor example:\n<pre><code>\n  <b>for</b> (String s : stringIterable) {\n    doSomethingOnFirstString(s);\n    <b>break</b>;\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryConditionalExpression",
          "displayName": "Redundant conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions which can be replaced by simpler but equivalent expressions.\n<table>\n  <tr><th>Example</th><th>&rarr;</th><th>Replacement</th></tr>\n\n  <tr>\n    <td>condition ? true : false</td>\n    <td></td>\n    <td>condition</td>\n  </tr>\n\n  <tr>\n    <td>condition ? false : true</td>\n    <td></td>\n    <td>!condition</td>\n  </tr>\n\n  <tr>\n    <td>value == null ? null : value</td>\n    <td></td>\n    <td>value</td>\n  </tr>\n\n  <tr>\n    <td>result != 0 ? result : 0</td>\n    <td></td>\n    <td>result</td>\n  </tr>\n\n  <tr>\n    <td>a == b ? a : b</td>\n    <td></td>\n    <td>b</td>\n  </tr>\n</table>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TrivialConditionalJS",
          "displayName": "Redundant conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions of the form\n<b><i>condition</i>?true:false</b> or <b><i>condition</i>?false:true</b>. These expressions may be safely simplified\nto <b><i>condition</i></b> or <b>!<i>condition</i></b>, respectively.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyLoopStatementThatDoesntLoop",
          "displayName": "Loop statement that doesn't loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b> or <b>while</b> statements whose\nbodies are guaranteed to execute at most once. Normally, this is an indication of a bug.\n</body>\n</html>\n"
        },
        {
          "shortName": "TailRecursionJS",
          "displayName": "Tail recursion",
          "enabled": false,
          "description": "<html>\n<body>\nReports tail recursion, that is when a function calls itself\nas its last action before returning.  Tail recursion can always be replaced by looping, which will be considerably faster.\nSome JavaScript engines perform this optimization, while others do not.  Thus, tail recursive solutions may have considerably different\nperformance characteristics on different environments.\n</body>\n</html>\n"
        },
        {
          "shortName": "NegatedIfElse",
          "displayName": "'if' statement with negated condition",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements\nwhich contain <b>else</b> branches and whose conditions are negated.\nFlipping the order of the <b>if</b> and <b>else</b>\nbranches will usually increase the clarity of such statements.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore comparisons of the form <b>!= null</b>.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyUnnecessaryContinue",
          "displayName": "Unnecessary 'continue' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <b>continue</b> statements at the end of loops.\nThese may be safely removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "BooleanExpressionMayBeConditional",
          "displayName": "Boolean expression could be replaced with conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>boolean</b> expressions which can be expressed more compactly, and arguably more clearly, as a conditional expression.\nTake for example the following expression:\n<pre>a && b || !a && c;</pre>\nwhich may be expressed as:\n<pre>a ? b : c;</pre>\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n</body>\n</html>"
        },
        {
          "shortName": "UnreachableCodeJS",
          "displayName": "Unreachable code",
          "enabled": false,
          "description": "<html>\n<body>\nReports code which can never be executed.\nSuch code almost certainly represents a programming error\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyTrivialIf",
          "displayName": "Redundant 'if' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements which can be simplified to single assignment\nor\n<b>return</b> statements. For example:\n <pre>\n    <b>if</b>(foo())\n    {\n       <b>return true</b>;\n    }\n    <b>else</b>\n    {\n       <b>return false</b>;\n    }\n</pre>\ncan be simplified to\n <pre>\n    <b>return</b> foo();\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SwitchStatementWithTooFewBranches",
          "displayName": "'switch' statement with too few branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements with too few <b>case</b> labels.\nSuch statements may be more clearly expressed as <b>if</b> statements.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the minimum number of <b>case</b> labels expected.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ForLoopReplaceableByWhileJS",
          "displayName": "'for' loop may be replaced by 'while' loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b> loops\nwhich contain neither initialization or update components, and can thus be replaced by\nsimpler <b>while</b> statements.\n<p>Use the checkbox below if you wish this inspection to ignore <b>for</b> loops with trivial or non-existent conditions.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "NegatedConditional",
          "displayName": "Conditional expression with negated condition",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions whose conditions are negated.\nFlipping the order of the conditional expression branches will usually increase the clarity of such statements.\n<!-- tooltip end -->\n<p>\n  Use the checkboxes below to ignore comparisons of the form <tt>obj != null</tt> or <tt>num != 0</tt>.\n  Since <tt>obj != null</tt> effectively means \"obj exists\",\n  the meaning of the whole expression does not involve any negation\n  and is therefore easy to understand.\n<p>\n  The same reasoning applies to <tt>num != 0</tt> expressions, especially when using bit masks.\n<p>\n  These forms have the added benefit of mentioning the interesting case first.\n  In most cases, the value for the <tt>== null</tt> branch is <tt>null</tt> itself,\n  like in the following examples:\n\n<pre>\n    static String getName(Person p) {\n        return p != null ? p.getName() : null;\n    }\n\n    static String getExecutableString(int fileMode) {\n        return (fileMode & 0xb001001001) != 0 ? \"executable\" : \"non-executable\";\n    }\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "ContinueStatementWithLabel",
          "displayName": "'continue' statement with label",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>continue</b> statements with labels.\nLabeled <b>continue</b> statements complicate refactoring, and can be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatement",
          "displayName": "'switch' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements.\n<b>switch</b> statements are often (but not always) indicators of poor object-oriented design.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PointlessNullCheck",
          "displayName": "Unnecessary 'null' check before method call",
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports a <b>null</b> check followed by a method call that will definitely return <b>false</b> when  <b>null</b> is passed (e.g. <b>Class.isInstance</b>).\n  Such a check seems excessive as the method call always returns <b>false</b>.\n</p>\n<p>Here is an example of a violation: </p>\n<pre><code>    if (x != null && myClass.isInstance(x)) { ... }</code></pre>\n<p>The quickfix changes this code to:</p>\n<pre><code>    if (myClass.isInstance(x)) { ... }</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryLabelJS",
          "displayName": "Unnecessary label",
          "enabled": false,
          "description": "<html>\n<body>\nReports unused labels.\n</body>\n</html>\n"
        },
        {
          "shortName": "IfStatementWithTooManyBranches",
          "displayName": "'if' statement with too many branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements with too many branches.\nSuch statements may be confusing, and are often the sign of inadequate levels of design\nabstraction.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of branches an <b>if</b> statement is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryLabelOnBreakStatementJS",
          "displayName": "Unnecessary label on 'break' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports labelled <b>break</b> statements\nwhose labels may be removed without changing the flow of control.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoMissingReturn",
          "displayName": "Missing return at end of function",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports missing return at end of function.\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableBooleanExpression",
          "displayName": "Simplifiable boolean expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean expressions of the form<br>\n<code>!(foo ^ bar)</code> and <code>(foo && bar) || !foo</code>.<br>\nSuch expressions may be safely simplified to<br>\n<code>foo == bar</code> and <code>!foo || bar</code> respectively.<br>\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyConditionalCanBeConditionalCall",
          "displayName": "Conditional expression can be conditional call",
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary conditional expressions which can be replaced by the conditional\ncall (?.) operation.\n</body>\n</html>\n"
        },
        {
          "shortName": "IdempotentLoopBody",
          "displayName": "Idempotent loop body",
          "enabled": false,
          "description": "<html>\n<body>\nDetects loops whose second and the subsequent iterations do not produce any additional side effects other than produced by the first iteration,\nwhich could indicate a programming error. Such loops may iterate only zero, one or infinite number of times.\nIf infinite number of times case is unreachable, such loop could be replaced with <b>if</b> statement. Otherwise there's a danger that\nthe program could stuck. Example:\n<pre>\n  int suffix = 1;\n  String name = baseName;\n  while(names.contains(name)) {\n    name = baseName + suffix; // error: suffix is not updated making loop body idempotent\n  }\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "LoopConditionNotUpdatedInsideLoop",
          "displayName": "Loop variable not updated inside loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports any variables and parameters which are used in a loop condition\nand are not updated inside the loop. These may cause an infinite loop if executed and\nare probably not what was intended.\n<!-- tooltip end -->\n<p>\n  The option \"Ignore possible non-local changes\" suppresses warnings if condition can be updated indirectly (via called method\n  or concurrently from another thread).\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LoopWithImplicitTerminationCondition",
          "displayName": "Loop with implicit termination condition",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>while</b>,\n<b>do-while</b> and <b>for</b>\nloops which have the constant <b>true</b> as their\nonly condition, but which still can be terminated by a containing\n<b>if</b> statement which can break out of the loop.\nThis <b>if</b> statement must be the first or only statement\nin a <b>while</b> or <b>for</b>\nloops and the last or only statement in a <b>do-while</b> loop.\nSuch a loop would be clearer if the if statement was removed and its condition\nwas made an explicit loop condition.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementDensity",
          "displayName": "'switch' statement with too low of a branch density",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements\nwith too low a ratio of switch labels to executable statements. Such <b>switch</b> statements\nmay be confusing, and should probably be refactored.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalCanBePushedInsideExpression",
          "displayName": "Conditional can be pushed inside branch expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions with <em>then</em> and <em>else</em> branches so similar that the conditional expression can be pushed inside, thereby shortening the code.\n<p>For example the following conditional expression:\n  <pre><code>condition ? message(\"value: \" + 1) : message(\"value: \" + 2)</code></pre>\nCan be pushed inside and transformed into:\n  <pre><code>message(\"value: \" + (condition ? 1 : 2))</code></pre>\n<!-- tooltip end -->\n<p>\n  <small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "IfStatementWithTooManyBranchesJS",
          "displayName": "'if' statement with too many branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements with too many\nbranches. Such statements may be confusing, and are\noften the sign of inadequate levels of design abstraction.\n<p>\n  Use the field below to specify the maximum number of branches expected.\n</body>\n</html>\n"
        },
        {
          "shortName": "InfiniteLoopStatement",
          "displayName": "Infinite loop statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b>, <b>while</b>,\nor <b>do</b> statements which\ncan only exit by throwing an exception. While such statements may be correct, they\nare often a symptom of coding errors.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyReturnFromClosureCanBeImplicit",
          "displayName": "'return' statement can be implicit",
          "enabled": false,
          "description": "<html>\n<body>\nReports  return statements at the end of closures which can be made implicit.\nGroovy closures implicitly return the value of the last statement in them.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConstantConditionalExpressionJS",
          "displayName": "Constant conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions of the form\n<b>true?<i>result1</i>:<i>result2</i></b> or <b>false?<i>result1</i>:<i>result2</i></b>.\nThese expressions sometimes occur as the result of automatic refactorings, and may obviously be simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "TrivialIf",
          "displayName": "Redundant 'if' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements which can be simplified to a single assignment,\n<b>return</b> or <b>assert</b> statement.\n<p>\nFor example:\n<pre><code>\n    <b>if</b> (foo()) {\n       <b>return true</b>;\n    } <b>else</b> {\n       <b>return false</b>;\n    }\n</code></pre>\ncan be simplified to\n<pre><code>\n    <b>return</b> foo();\n</code></pre>\n<!-- tooltip end -->\n<p>Use the option below to not display a warning in case of chained if statement. E.g.:\n</p>\n<pre><code>\n    if (condition1) return true;\n    if (condition2) return false;\n    return true;\n</code></pre>\n<p>\n  The fix action will still be available in this case.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PointlessBooleanExpression",
          "displayName": "Pointless boolean expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless or pointlessly\ncomplicated boolean expressions. Such expressions include <b>and</b>ing with <b>true</b>,\n<b>or</b>ing with <b>false</b>,\nequality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be the result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore named constants when determining if an expression is pointless.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyBreak",
          "displayName": "Break statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> statements other than in switch statements.\n</body>\n</html>"
        },
        {
          "shortName": "GoUnreachableCode",
          "displayName": "Unreachable code",
          "enabled": false,
          "description": "<html>\n<body>\nReports code that can never be executed because there exists no control flow path to the code from the rest of the program.\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateConditionJS",
          "displayName": "Duplicate condition in 'if' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports duplicate conditions in different branches of an\n<b>if</b> statement. While it may rarely be the\ndesired semantics, duplicate conditions usually represent programmer oversight.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoInfiniteFor",
          "displayName": "Infinite for loop",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports empty <strong>for</strong> loops.\n<p>Running this code will make the CPU usage stay at maximum and will make the machine nearly unusable.</p>\n</body>\n</html>"
        },
        {
          "shortName": "TrivialIfJS",
          "displayName": "Redundant 'if' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements which\ncan be simplified to single assignment or\n<b>return</b> statements. For example:\n<pre>\n\t<b>if</b>(foo())\n\t{\n\t\t<b>return</b> true;\n\t}\n\t<b>else</b>\n\t{\n\t\t<b>return</b> false;\n\t}\n</pre>\n\t\t\t\tcan be simplified to\n<pre>\n\t<b>return</b> foo();\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyFallthrough",
          "displayName": "Fallthrough in switch statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <i>fallthrough</i> in switch statements.  While occasionally useful,\n  fallthrough is often unintended, and may lead to surprising bugs.\n</body>\n</html>"
        },
        {
          "shortName": "PointlessBooleanExpressionJS",
          "displayName": "Pointless statement or boolean expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless or pointlessly complicated boolean expressions or statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "ContinueStatement",
          "displayName": "'continue' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>continue</b> statements.\n<b>continue</b> statements complicate refactoring, and can be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConfusingElse",
          "displayName": "Redundant 'else'",
          "enabled": false,
          "description": "<html>\n<body>\nReports redundant <b>else</b> keywords in <b>if</b>&mdash;<b>else</b> statements and statement chains.\nAn <b>else</b> keyword is redundant when all previous <b>if</b> branches in the chain don't complete normally\nbecause they end with <b>return</b>, <b>throw</b>, <b>break</b>, or <b>continue</b> statement.\n<p>\n  In these cases the statements from the <b>else</b> branch can be placed after the <b>if</b> statement and\n  the <b>else</b> keyword can be removed.\n  <!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalExpressionWithIdenticalBranchesJS",
          "displayName": "Conditional expression with identical branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary conditional expressions with identical <b>then</b> and <b>else</b> branches.\nSuch statements are almost certainly programmer error.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConstantConditional",
          "displayName": "Constant conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions of the form\n<b>true?<i>result1</i>:<i>result2</i></b> or <b>false?<i>result1</i>:<i>result2</i></b>.\nThese expressions sometimes occur as the result of automatic refactorings, and may obviously be simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "FallthruInSwitchStatement",
          "displayName": "Fallthrough in 'switch' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports 'fall-through' in a <b>switch</b> statement.\nFall-through is defined to occur when a series of executable statements after a <b>case</b> label is not guaranteed\nto transfer control before the next <b>case</b> label. For example if the branch is missing a <b>break</b> statement.\nIn that case, control falls through to the statements after\nthat <b>switch</b> label, even though the <b>switch</b> expression does not equal\nthe value of the fallen-through label. While occasionally intended, this construction is confusing, and is often the result of a typo.\n<p>\nThis inspection ignores any fall-through commented with a text matching the regex pattern <code>(?i)falls?\\s*thro?u</code>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DoubleNegation",
          "displayName": "Double negation",
          "enabled": false,
          "description": "<html>\n<body>\nReports double negation.\n<p>\nFor example:\n<pre><code><b>if</b> (!!functionCall())</code></pre>\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovySwitchStatementWithNoDefault",
          "displayName": "Switch statement with no default case",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements that do not contain\n<b>default</b> labels.\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifiableConditionalExpression",
          "displayName": "Simplifiable conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions of the following form\n<pre><code>  condition ? true : foo</code></pre>\n<pre><code>  condition ? false : foo</code></pre>\n<pre><code>  condition ? foo : !foo</code></pre>\n<pre><code>  condition ? !foo : foo</code></pre>\nThese expressions may respectively be safely simplified to\n<pre><code>  condition || foo</code></pre>\n<pre><code>  !condition && foo</code></pre>\n<pre><code>  condition == foo</code></pre>\n<pre><code>  condition != foo</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NegatedConditionalExpression",
          "displayName": "Negated conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions which are negated with a prefix expression. For example:\n<pre><code>!(i == 1 ? a : b)</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementWithConfusingDeclaration",
          "displayName": "Local variable used and declared in different 'switch' branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables declared in one branch of a <b>switch</b> statement\nand used in a different branch. Such declarations can be extremely confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JSObjectNullOrUndefined",
          "displayName": "Object is 'null' or 'undefined'",
          "enabled": false,
          "description": "<html>\n<body>\nReports errors caused by invoking a method,\naccessing a property or calling a function on an object that is <b>undefined</b> or <b>null</b>.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyTrivialConditional",
          "displayName": "Redundant conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary conditional operators of the form <b>x?true:false</b>\nor similar, which can be trivially simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyIfStatementWithIdenticalBranches",
          "displayName": "If statement with identical branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b>\nstatements with identical \"then\" and <b>else</b> branches. Such statements are almost certainly\nprogrammer error.\n</body>\n</html>\n"
        },
        {
          "shortName": "SwitchStatementsWithoutDefault",
          "displayName": "'switch' statement without 'default' branch",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements that do not contain\n<b>default</b> labels.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousTypeOfGuard",
          "displayName": "Unsound type guard check",
          "enabled": false,
          "description": "<html>\n<body>\n<b>typeof x</b> type guard can be unsound in one of the following two cases:\n<ol>\n<li><b>typeof x</b> never corresponds to the specified value (e.g., <b>typeof x === 'number'</b> when <b>x</b> has type 'string | boolean')</li>\n<li><b>typeof x</b> always corresponds to the specified value (e.g., <b>typeof x === 'string'</b> when <b>x</b> has type 'string')</li>\n</ol>\n<br>\n<b>x instanceof A</b> type guard can be unsound in one of the following two cases:\n<ol>\n  <li>Type of <b>x</b> is not related to <b>A</b></li>\n  <li>Type of <b>x</b> is <b>A</b> or a subtype of <b>A</b></li>\n</ol>\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementWithTooManyBranches",
          "displayName": "'switch' statement with too many branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements with too many <b>case</b> labels.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of <b>case</b> labels expected.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryReturnJS",
          "displayName": "Unnecessary 'return' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <b>return</b> statements.  Unnecessary <b>return</b> statements are those which\nreturn no value and occur just before the function would have \"fallen through\" the bottom.\nThese statements may be safely removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyContinue",
          "displayName": "Continue statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>continue</b> statements.\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateCondition",
          "displayName": "Duplicate condition in 'if' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any duplicate conditions among different branches of an\n<b>if</b> statement. While it may rarely be the\ndesired semantics, duplicate conditions usually represent programmer oversight.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to let this inspection ignore conditions which may produce side effects.\nUnchecking this checkbox may lead to some false-positives, e.g. when the same method call returns different values on subsequent invocations.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryContinueJS",
          "displayName": "Unnecessary 'continue' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <b>continue</b> statements at the end of loops. These statements may be safely removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "AssertionCanBeIf",
          "displayName": "Assertion can be replaced with if statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>assert</b> statements.\nFor example, <br>\n<code><b>assert</b> param != <b>null</b>;</code>\n<p>Quick fix replaces it with\n<b>if</b> statement throwing an <b>java.lang.AssertionError</b>.\n<p>Example:<br>\n<code>if (param == <b>null</b>) <b>throw new</b> AssertionError();</code>\n</body>\n</html>\n"
        },
        {
          "shortName": "PointlessIndexOfComparison",
          "displayName": "Pointless 'indexOf()' comparison",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless comparison with\n<b>.indexOf()</b> expression. An example of such an expression\nis comparing the result of <b>.indexOf()</b> with numbers less than -1.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantConditionalExpression",
          "displayName": "Constant conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions of the form\n<b>true?<i>result1</i>:<i>result2</i></b> or <b>false?<i>result1</i>:<i>result2</i></b>.\nThese expressions sometimes occur as the result of automatic refactorings, and may obviously be simplified.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NestedSwitchStatement",
          "displayName": "Nested 'switch'",
          "enabled": false,
          "description": "<html>\n<body>\nReports nested <b>switch</b> statements/expressions. Nested <b>switch</b>-es\nmay result in extremely confusing code.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalExpression",
          "displayName": "Conditional expression (?:)",
          "enabled": false,
          "description": "<html>\n<body>\nReports the ternary condition operator. Some coding standards prohibit the use of\nthe condition operator, in favor of <b>if-else</b> statements.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore simple assignments and returns and thus allow constructs like this:\n<pre>\n    String s = (foo == null) ? \"\" : foo.toString();\n</pre>\n<p>\nUse the second checkbox below to ignore conditional expression in contexts where an if statement is not allowed.\nFor example when the conditional expression is used as an argument to a <b>super()</b> constructor call, or inside a field initializer.\n</body>\n</html>"
        },
        {
          "shortName": "BreakStatementWithLabel",
          "displayName": "'break' statement with label",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> statements with labels.\nLabeled <b>break</b> statements complicate refactoring, and can be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalExpressionWithIdenticalBranches",
          "displayName": "Conditional expression with identical branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions with identical <em>then</em> and <em>else</em> branches.\nSuch expressions are almost certainly a mistake.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EnumSwitchStatementWhichMissesCases",
          "displayName": "Enum 'switch' statement that misses case",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements\nover enumerated types which do not include all of the enumerated type's elements as cases.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore <b>switch</b> statements which have a <b>default</b> branch.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IfCanBeAssertion",
          "displayName": "Statement can be replaced with 'assert' or 'Objects.requireNonNull'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements (with no <b>else</b> branch) throwing <code>java.lang.Throwable</code>.\n<!-- tooltip end -->\n<br>For example:<br>\n<code><b>if</b> (param == 2) <b>throw new</b> Exception();</code>\n<br>or guava's:<br>\n<code>Preconditions.checkNotNull(param, message)</code>\n\n<p>Quick fix replaces it with an <b>assert</b> statement.<br>\nExample:<br>\n<code><b>assert</b> param != 2;</code>\n</body>\n</html>\n"
        },
        {
          "shortName": "IfStatementWithIdenticalBranches",
          "displayName": "'if' statement with common parts",
          "enabled": false,
          "description": "<html>\n<body>\nInspection that can extract common parts from branches of if statement.\n<!-- tooltip end -->\n<p>Before:</p>\n<pre><code>\n  if (x > 12) {\n    doSomethingBefore();\n    doSomethingDifferent1();\n    doSomethingAfter();\n  } else {\n    doSomethingBefore();\n    doSomethingDifferent2();\n    doSomethingAfter();\n  }\n</code></pre>\n<p>After:</p>\n<pre><code>\n  doSomethingBefore();\n  if (x > 12) {\n    doSomethingDifferent1();\n  } else {\n    doSomethingDifferent2();\n  }\n  doSomethingAfter();\n</code></pre>\n<p><small>Updated in 2018.1</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ForLoopReplaceableByWhile",
          "displayName": "'for' loop may be replaced with 'while' loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b> loops which contain neither initialization or update components, and can thus be replaced by\nsimpler <b>while</b> statements. Example:\n<pre><code>\n  for(; exitCondition(); ) {\n    process();\n  }\n</code></pre>\n  This loop can be replaced with\n<pre><code>\n  while(exitCondition()) {\n    process();\n  }\n</code></pre>\nA fix action is also available for other <code>for</code> loops, so you can replace any <code>for</code> loop with <code>while</code>.\n<!-- tooltip end -->\n<p>\nUse the checkbox below if you wish this inspection to ignore <b>for</b> loops with trivial or non-existent conditions.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyUnnecessaryReturn",
          "displayName": "Unnecessary 'return' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <b>return</b> statements at the end of constructors and\nmethods returning <b>void</b>. These may be safely removed.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrFinalVariableAccess",
          "displayName": "Final variable access",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports invalid assignments to final variables, parameters and fields and not initialized final fields.\n</body>\n</html>\n"
        },
        {
          "shortName": "NestedConditionalExpression",
          "displayName": "Nested conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports nested conditional expressions. Nested conditional expressions\nmay result in extremely confusing code.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyConstantIfStatement",
          "displayName": "Constant if statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements of the form\n<b>if(true)...</b> or <b>if(false)...</b>.\nThese statements sometimes occur due to automatic refactorings, and may obviously\nbe simplified.\n</body>\n</html>\n"
        },
        {
          "shortName": "NegatedEqualityExpression",
          "displayName": "Negated equality expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports equality expressions which are negated by a prefix expression. For example:\n<pre><code>!(i == 1)</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "GoUsedAsValueInCondition",
          "displayName": "Used as value in condition",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports assignments which are used as values.\n</body>\n</html>"
        },
        {
          "shortName": "OverlyComplexBooleanExpression",
          "displayName": "Overly complex boolean expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean expressions with too many terms. Such expressions may be confusing and bug-prone.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of terms allowed in a boolean expression.\n<p>\nUse the checkbox below to ignore boolean expressions which use only a single boolean operator repeatedly.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoAssignmentToReceiver",
          "displayName": "Assignment to receiver",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports assignment to method receiver.\n<p>When assigning a value to the method receiver it won't be reflected outside of the method itself.</p>\n<p>Values will be reflected in subsequent calls from the same method.</p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyConditionalWithIdenticalBranches",
          "displayName": "Conditional expression with identical branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions\nwith identical \"then\" and \"else\" branches.  Such expressions are almost certainly\nprogrammer error.\n</body>\n</html>\n"
        },
        {
          "shortName": "DuplicateBooleanBranch",
          "displayName": "Duplicate condition on '&&' or '||'",
          "enabled": false,
          "description": "<html>\n<body>\nReports duplicated branches in\n<b>&amp;&amp;</b> or <b>||</b>\nexpressions. Such constructs almost always represents a typo or cut-and-paste error.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IfStatementWithIdenticalBranchesJS",
          "displayName": "'if' statement with identical branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements with identical <b>then</b> and <b>else</b> branches. Such statements are almost\ncertainly programmer error.\n</body>\n</html>\n"
        },
        {
          "shortName": "DefaultNotLastCaseInSwitch",
          "displayName": "'default' not last case in 'switch' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements where the <b>default</b> case\ncomes before some other case. This construct is unnecessarily confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LabeledStatement",
          "displayName": "Labeled statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports labeled statements.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LoopStatementThatDoesntLoopJS",
          "displayName": "Loop statement that doesn't loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b>, <b>while</b> and <b>do</b> statements\nwhose bodies are guaranteed to execute at most once. Normally, this is\nan indication of a bug.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyIfStatementWithTooManyBranches",
          "displayName": "If statement with too many branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements with too many branches.\nSuch statements may be confusing, and are often the sign of inadequate levels of design\nabstraction.\n<p>\n Use the field provided below to specify the maximum number of branches expected.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConditionalCanBeElvis",
          "displayName": "Conditional expression can be elvis",
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary condition operators which can be replaced by the simpler\n\"elvis\" operator.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryLabelOnContinueStatementJS",
          "displayName": "Unnecessary label on 'continue' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports labelled <b>continue</b> statements\nwhose labels may be removed without changing the flow of control.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoDeferInLoop",
          "displayName": "Defer in loop",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports <strong>defer</strong> statements inside loops.\n<p>Using <strong>defer</strong> in loops can lead to resource leaks or unpredictable execution order of the statements.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ForLoopWithMissingComponent",
          "displayName": "'for' loop with missing components",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>for</b> loops\nthat lack initialization, condition, or update clauses. Some coding styles prohibit\nsuch loops.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to let this inspection ignore loops which use an iterator.\nThis is a standard way to iterate over a collection, in which the\n<b>for</b> loop does not have an update\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Version control",
      "inspections": [
        {
          "shortName": "IgnoreFileDuplicateEntry",
          "displayName": "Ignore file duplicates",
          "enabled": false,
          "description": "<html>\n<body>\nChecks if an entry (pattern) is duplicated in the ignore file (e.g. .gitignore, .hgignore).\nDuplicate entries in these files are redundant and can be removed.\n\n<p>Example:</p>\n<pre>\n    # Output directories\n    /out/\n    /target/\n    <b><span style=\"color: #BE9117; \">/out/</span></b>\n</pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Quarkus",
      "inspections": [
        {
          "shortName": "QsUndeclaredPathMimeTypesInspection",
          "displayName": "Undeclared @Produces / @Consumes MIME types for @Path",
          "enabled": false,
          "description": "<html>\nWith Quarkus, it is very important to define the @Produces and @Consumes annotations since they are analyzed at build time and Quarkus restricts the number of JAX-RS providers included in the native executable to the minimum required by the application. It allows to reduce the size of the native executable.\n<br><br>\nAnnotate the method or its class with @Produces and @Consumes (if supported by HTTP method) and specify target MIME types.\n</html>"
        },
        {
          "shortName": "QsPrivateBeanMembersInspection",
          "displayName": "Private bean members with CDI annotations",
          "enabled": false,
          "description": "<html>\n<body>In Quarkus it is discouraged to use private access for injected fields, observer methods and bean constructors.\nPrivate access level usage with CDI members leads to increased amount of reflection manipulations necessary to setup a bean.\n<br><br>\nUse package-private or protected access level instead.</body>\n</html>"
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "GoExplicitDereferenceRequired",
          "displayName": "Explicit dereference required",
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls and field accesses on expressions with a double pointer type.\n<p>Such expressions require explicit dereference, i.e. <strong>x.f()</strong> must be replaced with <strong>(*x).f()</strong>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantSuppression",
          "displayName": "Redundant suppression",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of\n<ul>\n  <li><code>@SuppressWarning</code> annotation, or</li>\n  <li><code>// noinspection</code> line comment, or</li>\n  <li><code>/** noinspection */</code> JavaDoc comment</li>\n</ul>\n\nwhich can be safely removed because inspection they affect is no longer applicable in this context.\n<p>\n  For example:\n  <code><pre>\n<b><font color=\"#000080\">public class</font></b> C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n <b><font color=\"#000080\">private boolean</font></b> CONST = <b><font color=\"#000080\">true</font></b>;\n <b><font color=\"#000080\">void</font></b> f() {\n    CONST = <b><font color=\"#000080\">false</font></b>;\n  }\n}\n</pre>\n  </code>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "JSUnfilteredForInLoop",
          "displayName": "Unfiltered for..in loop",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for unfiltered <b>for-in</b> loops.\nThe use of this construct results in processing inherited or unexpected properties. You need to filter own properties\nwith <b>hasOwnProperty()</b> method. The validation works in JavaScript, html or jsp files.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoExtendedMethodExprSyntax",
          "displayName": "Extended method expression syntax before Go 1.10",
          "enabled": false,
          "description": "<html>\n<body>\nReports method expressions with extended receiver type syntax available since Go 1.10.\n<p>In Go versions prior 1.10 a receiver type of a method expression is restricted to be a type name or a pointer to type name.</p>\n<p>Since Go 1.10 a receiver type can be any type.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DefaultFileTemplate",
          "displayName": "Default File Template Usage",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspections reports usage of the default file template for File Header.\n <p>\nAlso, the inspection proposes to change default file template and its usage.\n</body>\n</html>"
        },
        {
          "shortName": "GoDuplicate",
          "displayName": "Duplicate names",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports names redeclared in this block.\n</body>\n</html>"
        },
        {
          "shortName": "GoTestSignatures",
          "displayName": "Wrong test declaration",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports invalid test functions signatures.\n</body>\n</html>"
        },
        {
          "shortName": "GoExportedFuncWithUnexportedType",
          "displayName": "Unexported return type of exported function",
          "enabled": false,
          "description": "<html>\n<body>\nReports exported functions with unexported return types.\n<p>Unexported types can be difficult to use when viewing documentation under <strong>go doc</strong>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ES6DestructuringVariablesMerge",
          "displayName": "Destructuring properties with the same key can be merged",
          "enabled": false,
          "description": "<html>\n<body>\nReports multiple destructuring properties with identical keys that can be merged\n</body>\n</html>"
        },
        {
          "shortName": "InjectedReferences",
          "displayName": "Injected references",
          "enabled": false,
          "description": "<html>\n<body>\nChecks references injected by IntelliLang plugin.\n</body>\n</html>"
        },
        {
          "shortName": "Annotator",
          "displayName": "Annotator",
          "enabled": false,
          "description": "<html>\n<body>\nAllows you to see problems reported by language annotators in the results of batch code inspection.\n</body>\n</html>"
        },
        {
          "shortName": "JSMethodCanBeStatic",
          "displayName": "Method can be static",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for ActionScript, JavaScript and TypeScript <b>methods</b> which may safely be made <b>static</b>.\nA method may be <b>static</b> if it does not reference any of its class' non static methods\nand non static fields and is not overridden in a sub class.\n<!-- tooltip end -->\n<p>\n  Use the first checkbox below to inspect only <b>private</b>  methods.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoAddressOperators",
          "displayName": "Invalid operand of address operator",
          "enabled": false,
          "description": "<html>\n<body>\nReports address operators applied to wrong operands.\n<p>Address operation can only be applied to addressable operand and pointer indirection can only be applied to operand of a pointer type.</p>\n<p>See <a href=\"https://golang.org/ref/spec#Address_operators\">Go specifications: address operators</a>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "GoStringAndByteTypeMismatch",
          "displayName": "Mismatched types: byte and string",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports comparisons of string index with a single-byte string instead of byte.\n</body>\n</html>"
        },
        {
          "shortName": "GoTypesCompatibility",
          "displayName": "Types compatibility check",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports incompatible types.\n</body>\n</html>"
        },
        {
          "shortName": "GoRecursiveType",
          "displayName": "Invalid recursive type",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports recursive types declarations.\n</body>\n</html>"
        },
        {
          "shortName": "LongLine",
          "displayName": "Line is longer than allowed by code style",
          "enabled": false,
          "description": "<html>\n<body>\nInspection warns you of lines which are longer than <b>right margin</b> parameter in <b>Code Style</b> settings.\n</body>\n</html>"
        },
        {
          "shortName": "JSValidateJSDoc",
          "displayName": "Syntax errors and unresolved references in JSDoc",
          "enabled": false,
          "description": "<html>\n<body>\nValidates syntax and references in JavaScript/ActionScript documentation comments (JSDoc/ASDoc).\n</body>\n</html>"
        },
        {
          "shortName": "GoInvalidExpressionConversion",
          "displayName": "Invalid expression conversion",
          "enabled": false,
          "description": "<html>\n<body>\nReports invalid expression conversion.\n<p>Conversion expression may be incorrect due to incompatible types or impermissible constant value truncation.</p>\n</body>\n</html>"
        },
        {
          "shortName": "GoNonFunctionCall",
          "displayName": "Non-function call",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-function calls.\n<p>For example:</p>\n<pre>\n    f := 2\n    f() // error\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "TestOnlyProblems",
          "displayName": "Test-only class or method call in production code",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports usages of <b>@TestOnly</b> - or <b>@VisibleForTesting</b>\nannotated methods and classes in production code.\n<br> The problems are not reported if such method or class is referenced from\n<ul>\n  <li>code under 'Test Sources' folder\n  <li>a test-class (JUnit/TestNG)\n  <li>another <b>@TestOnly</b>-annotated method\n</ul>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ProblematicWhitespace",
          "displayName": "Problematic whitespace",
          "enabled": false,
          "description": "<html>\n<body>\nReports tabs used for indentation when the code style is configured to use only spaces. Reports spaces used for indentation when\nthe code style is configured to use only tabs. Reports spaces used for indentation and tabs used for alignment when the code\nstyle is configured to use smart tabs.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JSPrimitiveTypeWrapperUsage",
          "displayName": "Primitive type object wrapper used",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for improper usage of wrappers for primitive types. Also, warning will be produced when property of primitive type is\nmodified, as assigned value will be lost.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSLastCommaInObjectLiteral",
          "displayName": "Unneeded last comma in object literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports when a trailing comma is used in object literals.\n\n<p>The warning is reported only when the JavaScript language version is set to JavaScript 1.8.5, ECMAScript 3 or 5.1.</p>\n\n<p>Trailing commas in object literals are allowed according to these specifications, however, some browsers might throw an error when a trailing comma is used.</p>\n\n<p>You can configure formatting options for trailing commas in <b>Code Style</b> | <b>JavaScript</b> or <b>TypeScript</b> | <b>Punctuation</b>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "CoffeeScriptFunctionSignatures",
          "displayName": "Signature mismatch",
          "enabled": false,
          "description": "<html>\n<body>\nChecks CoffeeScript called function <b>arguments</b>\n</body>\n</html>"
        },
        {
          "shortName": "DuplicatedCode",
          "displayName": "Duplicated code fragment",
          "enabled": false,
          "description": "Reports duplicated blocks of code from the selected scope: the same file, same module, dependent modules, or the entire project.<!-- tooltip end --> The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments and compare them in a tool window. When possible, the inspection provides a quick-fix to extract method from the duplicated code.\n\nThe inspection options allow you to select the scope of the reported duplicated fragments, and set the initial size for the duplicated language constructs.\n\nYou can also configure the constructs that you want to anonymize in <a href=\"settings://duplicates.index\"> File | Settings | Editor | Duplicates</a>."
        },
        {
          "shortName": "SyntaxError",
          "displayName": "Syntax error",
          "enabled": false,
          "description": "<html>\n<body>\nAllows you to see syntax errors in the results of batch code inspection.\n</body>\n</html>"
        },
        {
          "shortName": "GoDeprecation",
          "displayName": "Deprecated element",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports usages of deprecated elements.\n</body>\n</html>"
        },
        {
          "shortName": "WebpackConfigHighlighting",
          "displayName": "Webpack configuration validation",
          "enabled": false,
          "description": "<html>\n<body>\nValidates options in the webpack configuration file (which name should start with `webpack`, e.g. `webpack.config.js`)\nagainst <a href=\"https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json\">webpack Options Schema</a>.\n<br/><br/>\nDisable this inspection to turn off validation and code completions inside the configuration object.\n</body>\n</html>"
        },
        {
          "shortName": "GoInvalidIndexOrSliceExpression",
          "displayName": "Invalid index or slice expression",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports invalid index and slice expressions.\n</body>\n</html>"
        },
        {
          "shortName": "GoUnderscoreUsedAsValue",
          "displayName": "Underscore used as value",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports underscores that are used as values.\n</body>\n</html>"
        },
        {
          "shortName": "GoMissingTrailingComma",
          "displayName": "Missing trailing comma before newline in composite literal",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports missing trailing comma before newline in composite literal.\n</body>\n</html>"
        },
        {
          "shortName": "JSDeprecatedSymbols",
          "displayName": "Deprecated JavaScript symbol",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for using deprecated functions and variables.\nThe validation works in JavaScript, html, or jsp files.\n</body>\n</html>"
        },
        {
          "shortName": "JSLastCommaInArrayLiteral",
          "displayName": "Unneeded last comma in array literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports when a trailing comma is used in array literals.\n\n<p>The warning is reported only when the JavaScript language version is set to JavaScript 1.8.5, ECMAScript 3 or 5.1.</p>\n\n<p>Trailing commas in arrays are allowed according to these specifications, however, some browsers might throw an error when a trailing comma is used.</p>\n\n<p>You can configure formatting options for trailing commas in <b>Code Style</b> | <b>JavaScript</b> or <b>TypeScript</b> | <b>Punctuation</b>. </p>\n</body>\n</html>"
        },
        {
          "shortName": "GoUnresolvedReference",
          "displayName": "Unresolved reference",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports unresolved references.\n</body>\n</html>"
        },
        {
          "shortName": "JSUnresolvedExtXType",
          "displayName": "Unresolved Ext JS xtype",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that Ext JS xtype references have corresponding class.\n</body>\n</html>"
        },
        {
          "shortName": "JSUnresolvedVariable",
          "displayName": "Unresolved JavaScript variable",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that referenced variables and fields are valid.\nThe validation works in JavaScript, html or jsp files.\n</body>\n</html>"
        },
        {
          "shortName": "JSObsoletePrivateAccessSyntax",
          "displayName": "#-private fields access without explicit 'this.'",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for <b>#x</b>-like access to private fields.\nSuch syntax was allowed in the early versions of the specification draft, but is no longer a valid syntax.\nIn the most recent versions of the draft, only the syntax with explicit 'this.' qualifier is valid.\n</body>\n</html>"
        },
        {
          "shortName": "JSValidateTypes",
          "displayName": "Type mismatch",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that called function parameters, return values and assigned expressions are of the correct type.\nThe validation works in JavaScript, html or jsp files.\n</body>\n</html>"
        },
        {
          "shortName": "JSNonStrictModeUsed",
          "displayName": "Non-strict mode used",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that JavaScript files are in <b>strict</b> mode.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSFileReferences",
          "displayName": "File references validation",
          "enabled": false,
          "description": "<html>\n<body>\nReports unresolved file references in JavaScript files, including CommonJS and AMD modules references.\n</body>\n</html>"
        },
        {
          "shortName": "GoAssignmentNilWithoutExplicitType",
          "displayName": "Assignment nil without explicit type",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports assignment of <strong>nil</strong> without explicit type.\n<p><strong>nil</strong> value cannot be assigned to a variable that has no type.</p>\n<p>Examples of incorrect code:</p>\n<pre>\n    incorrect := nil\n    var incorrect = nil\n</pre>\n<p>Examples of correct code:</p>\n<pre>\n    incorrect := nil\n    var correct *MyType = nil\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "TodoComment",
          "displayName": "TODO comment",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>TODO</b> comments in your code. The Format of\n<b>TODO</b> comments is configurable via the <i>Settings | Editor | TODO</i> panel. Since\nsyntax highlighting for <b>TODO</b> comments is already provided, it is expected that this will largely\nbe used in batch mode.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GoInvalidCompositeLiteral",
          "displayName": "Invalid composite literals",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports composite literals with incompatible types and values.\n</body>\n</html>"
        },
        {
          "shortName": "GoInvalidVarAssignInVarOrConstSpec",
          "displayName": "Expected '=', got ':='",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports var assignments in var or const declaration.\n</body>\n</html>"
        },
        {
          "shortName": "JSJoinVariableDeclarationAndAssignment",
          "displayName": "Variable declaration can be merged with the first assignment to the variable",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection suggests to move variables closer to their usages joining with the initializer expression\n\nIf a variable is declared without an initializer, and it is used in the code much further or in a single nested scope, such variable may be joined\n with the first assignment as an initializer.\n</body>\n</html>\n"
        },
        {
          "shortName": "GoBinaryAndUnaryExpressionTypesCompatibility",
          "displayName": "Binary expressions types check",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports incompatible types in binary and unary expressions.\n</body>\n</html>"
        },
        {
          "shortName": "SSBasedInspection",
          "displayName": "Structural search inspection",
          "enabled": false,
          "description": "<html>\n<body>\n<p>This inspection allows to configure number of <b>Structural Search/Structural Replace</b> templates to be applied to the file you are editing.\n</p>\n<p>All matches are highlighted with the template name you have configured.\nIf you configured <b>Structural Replace</b> pattern, corresponding replace would appear as a quick fix.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "JSReferencingMutableVariableFromClosure",
          "displayName": "Referencing mutable variable from closure",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for accessing mutable variables in nested functions.\nThe validation works in JavaScript, html, or jsp files.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSUnresolvedLibraryURL",
          "displayName": "There is no locally stored library for the HTTP link.",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that URL of an external JavaScript library is associated with\na locally stored file used for code completion and navigation. <br>\nUse 'Download library' quick fix (Alt+Enter) to solve the problem.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSUnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "enabled": false,
          "description": "<html>\n<body>\nReports unneeded semicolons.\nThe validation works in JavaScript, html or jsp files.\n</body>\n</html>"
        },
        {
          "shortName": "JSAccessibilityCheck",
          "displayName": "@private and @protected members accessibility",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that JavaScript members marked with <b>@private</b> and <b>@protected</b> tags are visible in current context.\n</body>\n</html>"
        },
        {
          "shortName": "JSCheckFunctionSignatures",
          "displayName": "Signature mismatch",
          "enabled": false,
          "description": "<html>\n<body>\nChecks JavaScript called function <b>arguments</b> , <b>return values</b> , <b>assigned expressions</b> to be of correct type.\nThe validation works in JavaScript, html or jsp files.\n</body>\n</html>"
        },
        {
          "shortName": "GoFunctionCall",
          "displayName": "Function call",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nThis inspection checks function calls.\n</body>\n</html>"
        },
        {
          "shortName": "JSDuplicatedDeclaration",
          "displayName": "Duplicate JavaScript declaration",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that declarations are declared once in current scope.\nThe validation works in JavaScript, TypeScript, html or jsp files.\n</body>\n</html>"
        },
        {
          "shortName": "GoCgoInTest",
          "displayName": "Usage of cgo in tests is not supported",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports cgo import in test files.\n<p>Test files are not allowed to import the <strong>C</strong> package.</p>\n</body>\n</html>"
        },
        {
          "shortName": "GoMultiplePackages",
          "displayName": "Multiple packages in directory declaration",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports multiple packages in a single directory.\n</body>\n</html>"
        },
        {
          "shortName": "GoInvalidReceiverType",
          "displayName": "Invalid receiver type",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports invalid receiver types.\n<p>Receiver type must be of the form <strong>T</strong> or <strong>*T</strong> (possibly using parentheses) where <strong>T</strong> is a type name.</p>\n<p><strong>T</strong> must not be a pointer or interface type and it must be declared in the same package as the method.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ES6ShorthandObjectProperty",
          "displayName": "Property can be replaced with shorthand",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights and provides fixes to convert object properties to ES6 shorthand style.\n<!-- tooltip end -->\n<p>\n  <code>\n    var obj = {foo:foo}\n  </code>\n</p>\nto\n<p>\n  <code>\n    var obj = {foo}\n  </code>\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JSJQueryEfficiency",
          "displayName": "JQuery usage efficiency",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that jQuery selectors are used in an efficient way.\nIt warns about duplicated selectors which could be cached and optionally about attribute and pseudo-selectors usage.\n</body>\n</html>"
        },
        {
          "shortName": "GoUnnecessarilyExportedIdentifiers",
          "displayName": "Unnecessarily exported identifier",
          "enabled": false,
          "description": "<html>\n<body>\nReports exported identifiers that are not used by other packages than the ones they are defined in.\n</body>\n</html>"
        },
        {
          "shortName": "JSUndeclaredVariable",
          "displayName": "Implicitly declared global JavaScript variable",
          "enabled": false,
          "description": "\n<html>\n<body>\nChecks that <b>variables</b> are declared explicitly with a <b>var</b> statement.\nThe validation works in JavaScript, html or jsp files.\n</body>\n</html>"
        },
        {
          "shortName": "GoImpossibleTypeAssertion",
          "displayName": "Impossible type assertion",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports impossible type assertions.\n</body>\n</html>"
        },
        {
          "shortName": "GoSelfImport",
          "displayName": "Self import",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports self-imports.\n</body>\n</html>"
        },
        {
          "shortName": "ES6PreferShortImport",
          "displayName": "Import can be shortened",
          "enabled": false,
          "description": "<html>\n<body>\nReports ES6 imports whose <b>from</b> part can be shortened by importing the parent directory.\n</body>\n</html>"
        },
        {
          "shortName": "GoInvalidPackageImport",
          "displayName": "Invalid package import",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports invalid imports.\n</body>\n</html>"
        },
        {
          "shortName": "JSCommentMatchesSignature",
          "displayName": "JSDoc comment matches function signature",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that parameters defined within JSDoc comments match the function's actual parameters, i.e. have the same names and quantity.\n</body>\n</html>"
        },
        {
          "shortName": "CoffeeScriptUnusedLocalSymbols",
          "displayName": "Unused local symbols",
          "enabled": false,
          "description": "<html>\n<body>\nChecks CoffeeScript <b>parameter</b> , local <b>variable</b> , <b>function</b> , <b>classes</b> and private member declarations to be <b>used</b>\nin given file scope.\n</body>\n</html>"
        },
        {
          "shortName": "GoInvalidTilde",
          "displayName": "Unexpected '~'",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports unexpected tildes.\n</body>\n</html>"
        },
        {
          "shortName": "JSAnnotator",
          "displayName": "JavaScript general errors",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports basic syntax issues and inconsistencies with language specification.\nExamples are invalid usages of keywords, incompatible numeric format usage or multiple parameters to getters/setters.\n<br>\nGenerally, such errors must always be reported and shouldn't be disabled.\nBut in some cases, like issues due to dynamic nature of JavaScript, usage of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors.\n</body>\n</html>"
        },
        {
          "shortName": "JSUnresolvedFunction",
          "displayName": "Unresolved JavaScript function",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that called functions are valid.\nThe validation works in JavaScript, html or jsp files.\n</body>\n</html>"
        },
        {
          "shortName": "GoDuplicateCase",
          "displayName": "Duplicate case",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nChecks switch statements for case duplicates.\n</body>\n</html>"
        },
        {
          "shortName": "ES6RedundantNestingInTemplateLiteral",
          "displayName": "Redundant nesting in template literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports nested instances of strings and template literals. Such instances can be inlined into the containing template string.\n\n<!-- tooltip end -->\n<p>\n  For example, <code>`Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`</code> can be simplified to <code>`Hello, Brave New World!`</code>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "GoJumpOverDeclaration",
          "displayName": "Jump over declaration",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports goto statements which jumps over declaration.\n<p>For example:</p>\n<pre>\n    goto label\n    var a int\n    label:\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "ES6ClassMemberInitializationOrder",
          "displayName": "Use of possibly unassigned property in a static initializer",
          "enabled": false,
          "description": "<html>\n<body>\nReports when a class member initializer references another non-hoisted class member that could be not initialized yet.\n<br/><br/>\nClass members initialization happens consequently for fields, thus, a field cannot reference another field declared later.\n</body>\n</html>"
        },
        {
          "shortName": "GoRedundantParens",
          "displayName": "Redundant parentheses",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2013-2016 Sergey Ignatov, Alexander Zolotov, Florin Patan\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<body>\nReports redundant parentheses in expressions and types.\n</body>\n</html>"
        },
        {
          "shortName": "JSMismatchedCollectionQueryUpdate",
          "displayName": "Mismatched query and update of collection",
          "enabled": false,
          "description": "<html>\n<body>\nReports collection fields or variables whose contents are either queried and not updated,\nor updated and not queried. Such mismatched queries and updates are pointless,\nand may indicate either dead code or a typographical error.\n<p>\nQuery methods are automatically detected, based on whether they return something or a callback is passed.\nUse the table below to specify which methods are update methods.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSClosureCompilerSyntax",
          "displayName": "Closure compiler syntax",
          "enabled": false,
          "description": "<html>\n<body>\nChecks code for warnings implied by <em>Google Closure Compiler</em> annotations.\nThis includes correct usage of <b>@abstract</b>, <b>@interface</b> and <b>@implements</b> tags.\n</body>\n</html>"
        },
        {
          "shortName": "InconsistentLineSeparators",
          "displayName": "Inconsistent line separators",
          "enabled": false,
          "description": "<html>\n<body>\n  This inspection detects files with line separators different from the project default.\n  E.g. you set the line separator to \"\\n\" in the Settings|Editor|Code Style|Line separator,\n  and the file you are editing uses \"\\r\\n\" as a line separator.\n\n  Also warns about mixed line separators in the file.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "ECMAScript 6 migration aids",
      "inspections": [
        {
          "shortName": "ES6ConvertVarToLetConst",
          "displayName": "'var' used instead of 'let' or 'const'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>var</code> declarations that are used instead of <code>let</code> or <code>const</code>.<br/>\nBoth <code>let</code> and <code>const</code> are block-scoped and behave more strictly.\n<br/><br/>\nIt helps to replace all <code>var</code> declarations with <code>let</code> or <code>const</code> declarations, depending on value semantics.\nDeclarations might be moved to the top of the function or before the first usage of the variable to avoid Reference errors.\n<br/>Check <i>Conservatively convert var with Fix all action</i> option to prevent any changes in these complex cases when using Fix all action.\n</body>\n</html>"
        },
        {
          "shortName": "ES6ConvertModuleExportToExport",
          "displayName": "'module.exports' is used instead of 'export'",
          "enabled": false,
          "description": "<html>\n<body>\nReports when <code>module.export</code> is used and helps to replace it with the <code>export</code> or <code>export default</code> statement.\n<br/><br/>\nPlease note that a quick-fix for converting  <code>module.export</code> into <code>export</code> is not available for <code>module.export</code> inside functions or statements, because <code>export</code> statements can only be at the top level of a module.\n</body>\n</html>"
        },
        {
          "shortName": "JSStringConcatenationToES6Template",
          "displayName": "String concatenation is used instead of string template",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights string concatenations that can be replaced with a template string.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ES6ConvertLetToConst",
          "displayName": "'let' used where it could be a 'const'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>let</code> declarations that can be made <code>const</code>.<br/>\n</body>\n</html>"
        },
        {
          "shortName": "ES6ConvertToForOf",
          "displayName": "'for..in' is used instead of 'for..of'",
          "enabled": false,
          "description": "<html>\n<body>\nConverts <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">for..in</a></code>\nloops on arrays to <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">for..of</a></code> loops.\n<br/><code>for..of</code> loops, introduced in ECMAScript 6, iterate over <code>iterable</code> objects.\nFor arrays, this construction should be preferred to <code>for..in</code>, since it is executed only for array values and not for array object's properties.\n</body>\n</html>"
        },
        {
          "shortName": "ES6ConvertRequireIntoImport",
          "displayName": "'require()' is used instead of 'import'",
          "enabled": false,
          "description": "<html>\n<body>\nReports when <code>require()</code> is used and helps to replace the <code>require()</code> call with the <code>import</code> statement.\n<br/><br/>\nEnable <i>Convert require() inside inner scopes with Fix all action</i>\nto convert all <code>require()</code> calls inside the nested functions and statements when using the <i>Fix all</i> action.\n<br/><br/>\nPlease note that converting the <code>require()</code> statements inside inner scopes to the <code>import</code> statements\nmay cause changes in the semantics of the code.\nImport statements are static module dependencies and are hoisted,\nwhich means that they are moved to the top of the current module. <code>require()</code> calls load modules dynamically.\nThey can be executed conditionally and their scope is defined by the expression in which they are used.\n<br/>Clear <i>Convert require() inside inner scopes with Fix all action</i> option to prevent any changes in these complex cases when using Fix all action.\n</body>\n</html>"
        },
        {
          "shortName": "JSFunctionExpressionToArrowFunction",
          "displayName": "Function expression is used instead of arrow function",
          "enabled": false,
          "description": "<html>\n<body>\nHelps to replace function expressions with arrow functions.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JPA",
      "inspections": [
        {
          "shortName": "JpaDataSourceORMDomInspection",
          "displayName": "Unresolved database references in XML",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection controls whether the Persistence ORM descriptors are checked against configured Datasources\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaEntityListenerWarningsInspection",
          "displayName": "Entity listener warnings",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification warnings:\n<li>Entity listener class has no \"entity listener\" methods</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaDataSourceORMInspection",
          "displayName": "Unresolved database references in annotations",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection controls whether the Persistence ORM annotations are checked against configured Datasources\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaMissingIdInspection",
          "displayName": "Persistent entity misses primary key",
          "enabled": false,
          "description": "<html>\n<body>\nCheck whether persistent object has identification property\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaQlInspection",
          "displayName": "Query language checks",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection controls whether the Persistence QL Queries are error-checked\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaAttributeTypeInspection",
          "displayName": "Persistent attribute type checks",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification errors:\n<li>Attribute types checking (collection, entity, embeddable, etc.)</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaORMDomInspection",
          "displayName": "Orm.xml problems",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in ORM XML descriptors:\n\n<li>Tag and attribute values that reference to missing database tables and columns\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaModelReferenceInspection",
          "displayName": "Unresolved references in queries",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification errors:\n<li>Attribute references specified via JPA annotations should resolve OK</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaQueryApiInspection",
          "displayName": "Unresolved queries and query parameters",
          "enabled": false,
          "description": "<!--\n  ~ Copyright (c) 2000-2007 JetBrains s.r.o. All Rights Reserved.\n  -->\n\n<html>\n<body>\nThis inspection checks for the following Persistence model problems:\n<li>Named query not found</li>\n<li>Query parameter not found</li>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaAttributeMemberSignatureInspection",
          "displayName": "Persistent attribute signature checks",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification errors:\n<li>More than one attribute configured for method/field</li>\n<li>Attribute cannot be used in Embeddable object (JPA 1.0)</li>\n<li>Persistent attribute metadata should be specified on field or property getter</li>\n<li>For property-based access both setter and getter should be present</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaEntityListenerInspection",
          "displayName": "Entity listener problems",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification errors:\n<li>Entity listener class should define public no-arg constructor</li>\n<li>Entity listener methods should have correct signature</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaObjectClassSignatureInspection",
          "displayName": "Persistent object class signature checks",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for the following JPA specification errors:\n<li>Persistent object class should be a top-level, not final, annotated once</li>\n<li>Class should not be defined as persistent and entity listener class at the same time</li>\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaConfigDomFacetInspection",
          "displayName": "Persistence.xml is not added to facet",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you add persistence.xml to a facet configuration if it is not there\n</body>\n</html>\n"
        },
        {
          "shortName": "JpaDomInspection",
          "displayName": "persistence.xml problems",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in XML descriptors that define Persistence Units configuration:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Visibility",
      "inspections": [
        {
          "shortName": "TypeParameterHidesVisibleType",
          "displayName": "Type parameter hides visible type",
          "enabled": false,
          "description": "<html>\n<body>\nReports type parameters being named\nidentically to visible types in the current scope. Such a parameter name may be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassEscapesItsScope",
          "displayName": "Non-accessible class is exposed",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of classes in field types and in method signatures where the class is less visible than the field or the method.\n<p>\n  Examples are a <b>public</b> method which returns a <b>private</b> inner class, or a <b>protected</b> field\n  whose type is a package-visible class.<br>\n  While legal Java, such fields and methods aren't useful outside of the visibility scope of the classes used in the field or the method.\n<p>\n  In addition to that, in Java 9 a module may hide some of its classes by not exporting their packages.<br>\n  If the public API of a class in an exported package references a class from non-exported package,\n  such API isn't useful outside of the module.\n<!-- tooltip end -->\n<p>\n  The options of what is checked are:\n<ul>\n  <li>The module API - the public&protected fields&methods within exported packages (for Java 9+)</li>\n  <li>The public&protected fields&methods (the \"public API\") in all packages</li>\n  <li>The package-local fields&methods</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "MethodOverridesInaccessibleMethodOfSuper",
          "displayName": "Method overrides inaccessible method of superclass",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with the same signature as an inaccessible method from super class, e.g. package-private method of super class in another package or private method.\nSuch methods may result in confusing semantics, particularly if the super method is ever made\npublicly visible. A package-private method can only properly be overridden if\nthe subclass resides in the same package. Private methods can't be overridden.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FieldHidesSuperclassField",
          "displayName": "Field name hides field in superclass",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields with the same name as a field in an ancestor class. Such field\nnames may be confusing, and can be bug-prone.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to indicate whether this inspection should report all name clashes, or only\nclashes with fields which are visible from the subclass.\n<p>\nUse the second checkbox below to ignore <b>static</b> fields which hide <b>static</b> fields in super classes.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousClassVariableHidesContainingMethodVariable",
          "displayName": "Anonymous class variable hides variable in containing method",
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous class variables being named identically to variables of a containing method or lambda expression.\nSuch a variable name may be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AmbiguousFieldAccess",
          "displayName": "Access of inherited field looks like access of element in surrounding code",
          "enabled": false,
          "description": "<html>\n<body>\nReports ambiguous accesses of a super class field from an inner or anonymous class, where a local variable, parameter or field with identical name is available\nin the surrounding code. In this situation a cursory examination of the code may suggest that an element in the surrounding code is\naccessed, when in actual fact a field from the super class is accessed. To clarify the intent of the code it is recommended to add a\n<b>super</b> qualifier to the field access.\n<p>Example:\n<pre><code>\n<b>class</b> X {\n  <b>protected</b> String s;\n}\n<b>class</b> Y {\n  <b>void</b> foo(String s) {\n    <b>new</b> X() {{\n      System.out.println(s); // here the field is accessed not the parameter\n    }};\n  }\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AmbiguousMethodCall",
          "displayName": "Call to inherited method looks like call to local method",
          "enabled": false,
          "description": "<html>\n<body>\nReports ambiguous super method calls from inside an inner or anonymous class, where a method\nwith identical signature is available in the surrounding class. In this situation a cursory\nexamination of the code may suggest a method in the surrounding class is\ncalled, when in actual fact a method from the super class is called. To clarify the\nintent of the code it is recommended to add a\n<b>super</b> qualifier to the method call.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "Java9UndeclaredServiceUsage",
          "displayName": "Usage of service not declared in 'module-info'",
          "enabled": false,
          "description": "<html>\n<body>\nThe inspection detects situations when a service is loaded with <code>java.util.ServiceLoader</code>\nbut it isn't declared with <code>uses</code> clause in the <code>module-info.java</code> file.\n<p>\n  <small>New in 2018.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "LocalVariableHidingMemberVariable",
          "displayName": "Local variable hides field",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables named identically to fields of their class\nor surrounding classes if it is a local variable inside of an inner or anonymous class.\nSuch a variable name may be confusing.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore local variables hiding a super class field which is not visible (e.g. because it's <b>private</b>).\n<p>\nUse the second checkbox below to ignore local variables in a static context, named identically to a non-<b>static</b> field.\nFor example when the local variable is inside a <b>static</b> method\nor inside a method which is inside an inner class which is <b>static</b>.\n</body>\n</html>"
        },
        {
          "shortName": "MethodOverloadsParentMethod",
          "displayName": "Method overloads method of superclass",
          "enabled": false,
          "description": "<html>\n<body>\nReports instance methods having the same name and the same number of parameters with the same or compatible types as\na method in a superclass. In this case, the child method overloads the parent method, instead of overriding it.\nWhile that may be intended, if unintended it may result in latent bugs.\n<!-- tooltip end -->\n<p>\nUse the checkbox below also report even if the parameter types are not compatible.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodOverridesStaticMethod",
          "displayName": "Method tries to override static method of superclass",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>static</b> methods with an identical signature as a <b>static</b> method of a superclass.\nBecause <b>static</b> methods cannot override methods in superclasses, this may result in confusing semantics.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InnerClassVariableHidesOuterClassVariable",
          "displayName": "Inner class field hides outer class field",
          "enabled": false,
          "description": "<html>\n<body>\nReports inner class variables being named identically to member variables of a containing class.\nSuch a variable name may be confusing.\n<!-- tooltip end -->\n<p>\nUse the checkbox below the indicate whether this inspection should report all name clashes, or only\nclashes with fields which are visible from the inner class.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "Java9ModuleExportsPackageToItself",
          "displayName": "Module exports/opens package to itself",
          "enabled": false,
          "description": "<html>\n<body>\nThe inspection detects a situation where a package is exported or opened to the same Java 9 module where it's defined.\n<br>Example:\n<code>module <b>B</b> { exports org.example to A, <b>B</b>, C; }</code>\n</body>\n</html>"
        },
        {
          "shortName": "ParameterHidingMemberVariable",
          "displayName": "Parameter hides field",
          "enabled": false,
          "description": "<html>\n<body>\nReports method parameters named identically to visible fields of their class\nor surrounding classes if it is a parameter inside of an inner or anonymous class.\nSuch a parameter name may be confusing.\n<!-- tooltip end -->\n<p>\nUse the first checkbox to ignore parameters of simple setters.\n<p>\nUse the second checkbox to ignore for private fields in a superclass, which are not visible from the parameter.\n<p>\nUse the third checkbox to ignore parameters of constructors.\n<p>\nUse the fourth checkbox to ignore parameters of abstract methods.\n<p>\nUse the fifth checkbox to ignore parameters of <b>static</b> methods hiding an instance field and\nto ignore parameters of instance methods in static inner classes hiding an instance field in an outer class.\nWhile not strictly hiding, such parameters can still be confusing.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LambdaParameterHidingMemberVariable",
          "displayName": "Lambda parameter hides field",
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda parameters named identically to fields of the surrounding classes or their superclasses.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore fields that are not actually visible from the lambda expression.\nFor example <b>private</b> fields in a super class.\n<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Switch statement issues",
      "inspections": [
        {
          "shortName": "JSMissingSwitchDefault",
          "displayName": "'switch' statement has no 'default' branch",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements without <b>default</b> clause in case when not all possible values are enumerated.\n</body>\n</html>"
        },
        {
          "shortName": "JSMissingSwitchBranches",
          "displayName": "'switch' statement has missing branches",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements on a variable of enum or union type when the statement covers not all the value options from the type.\n</body>\n</html>"
        },
        {
          "shortName": "TextLabelInSwitchStatementJS",
          "displayName": "Text label in 'switch' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports labelled statements inside of <b>switch</b> statements.\nWhile occasionally intended, this construction is often the result of a typo.\n\n<pre>\n    <b>switch</b>(x)\n    {\n        <b>case</b> 1:\n        case2:   //typo!\n        <b>case</b> 3:\n            <b>break</b>;\n    }\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "JSDuplicateCaseLabel",
          "displayName": "Duplicate case label",
          "enabled": false,
          "description": "<html>\n<body>\nReports duplicated <b>case</b> labels on <b>switch</b> statements.\nSuch <b>switch</b> statements are normally an indication of programmer error.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSUnreachableSwitchBranches",
          "displayName": "Unreachable 'case' branch of a 'switch' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>case</b> branches of a <b>switch</b> statement that are unreachable in current context\n</body>\n</html>"
        },
        {
          "shortName": "DefaultNotLastCaseInSwitchJS",
          "displayName": "'default' not last case in 'switch'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements where the <b>default</b> case\ncomes before some other case.<br/>\nHaving the <b>default</b> mixed with other cases causes confusion. The best practice is to have it as the very last case.\n</body>\n</html>\n"
        },
        {
          "shortName": "FallThroughInSwitchStatementJS",
          "displayName": "Fallthrough in 'switch' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports cases where control can proceed from one branch of a\n<b>switch</b> statement to the next.  Such \"fall-through\" is often\na result of programmer error, for example, a missing <b>break</b> or <b>return</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "NestedSwitchStatementJS",
          "displayName": "Nested 'switch' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements which\nare nested in other <b>switch</b> statements.  Such nested switch statements can be\nvery confusing, particularly if proper indenting is not followed.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSRedundantSwitchStatement",
          "displayName": "'switch' statement is redundant and can be replaced",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <b>switch</b> statements. Warns on switch statement with an empty body, only one <b>case</b> branch, or only single <b>default</b> branch.\n</body>\n</html>"
        },
        {
          "shortName": "JSSwitchVariableDeclarationIssue",
          "displayName": "Variable is declared and being used in different 'case' clauses",
          "enabled": false,
          "description": "<html>\n<body>\nReports variables that are declared in one <b>case</b> clause of a switch statement, and are used in a different <b>case</b>\nclause of the same statement.\nFor block-scope variables, this results in a <b>ReferenceError</b> being thrown.\nFor <b>var</b>-variables, it signifies a potential error. This inspection can be disabled for <b>var</b>-variables if you use this pattern intentionally.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Resource management",
      "inspections": [
        {
          "shortName": "DriverManagerGetConnection",
          "displayName": "Use of DriverManager to get JDBC connection",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <b>java.sql.DriverManager</b>\nto acquire a JDBC connection. The <b>java.sql.DriverManager</b>\nhas been superseded by <b>javax.sql.Datasource</b>, which\nallows for connection pooling and other optimizations.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AutoCloseableResource",
          "displayName": "AutoCloseable used without 'try'-with-resources",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>AutoCloseable</b> instances which are not used in a try-with-resources statement, also known as\n<i>Automatic Resource Management</i>.\nThis means that the open resource before/in <b>try</b>, close in <b>finally</b> style which was used before\ntry-with-resources was available is also reported.\nThis inspection is meant to replace all <i>opened but not safely closed</i> inspections when developing in Java 7 and higher.\n<p>\nUse the first table below to specify which AutoCloseable subclasses should be ignored by this inspection.\nSpecify AutoCloseable subclasses here which do not need to be closed.\n<p>\n  <b>Note</b>: This inspection will still warn on streams returned from the java.nio.file.Files methods lines(), walk(), list() and find(),\n  even when java.util.stream.Stream is specified to be ignored in this table.\n  These streams contain an associated I/O resource that needs to be closed.\n</p>\n<p>\nUse the second table below to specify which methods returning AutoCloseable will be ignored when called.\n<p>\nUse the first checkbox below to ignore an AutoCloseable if it the result of a method call.\nWhen enabled, the results of factory methods will also be ignored.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if an AutoCloseable instance is passed\nas a method call argument.\nIf enabled the inspection assumes the resource is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and an AutoCloseable argument will not be ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JNDIResource",
          "displayName": "JNDI resource opened but not safely closed",
          "enabled": false,
          "description": "\n<html>\n<body>\nReports any JNDI resource which is not safely closed in a <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed. JNDI resources reported\nby this inspection include <b>javax.naming.InitialContext</b>,\nand <b>javax.naming.NamingEnumeration</b>.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to specify if a JNDI Resource is allowed to be opened <i>inside</i> a <b>try</b>\nblock. This style is less desirable because it is more verbose than opening a resource\n<i>in front of</i> a <b>try</b> block.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if a JNDI resource is passed as a method call argument.\nIf enabled the inspection assumes the resource is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and a JNDI resource argument will not be ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "IOResource",
          "displayName": "I/O resource opened but not safely closed",
          "enabled": false,
          "description": "<html>\n<body>\nReports any I/O resource which is not safely closed in a <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed. I/O resources checked\nby this inspection include <b>java.io.InputStream</b>,\n<b>java.io.OutputStream</b>,\n<b>java.io.Reader</b>,\n<b>java.io.Writer</b> and\n<b>java.io.RandomAccessFile</b>. I/O resources which are wrapped by other I/O resources\nare not reported, as the wrapped resource will be closed by the wrapping resource.\n<!-- tooltip end -->\n<p>\nUse the table below to specify which I/O resources should be ignored by this inspection.\nSpecify I/O resource classes here which do not need to be closed.\n<p>\nUse the first checkbox below to specify if an I/O resource is allowed to be opened <i>inside</i> a <b>try</b>\nblock. This style is less desirable because it is more verbose than opening a resource <i>in front of</i> a <b>try</b>\nblock.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if an I/O resource is passed as a method call argument.\nIf enabled the inspection assumes the resource is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and an I/O resource argument will not be ignored.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SocketResource",
          "displayName": "Socket opened but not safely closed",
          "enabled": false,
          "description": "\n<html>\n<body>\nReports any Socket resource which is not safely closed in a <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed. Socket resources reported\nby this inspection include <b>java.net.Socket</b>,\n<b>java.net.DatagramSocket</b>,\nand <b>java.net.ServerSocket</b>.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to specify if a Socket is allowed to be opened <i>inside</i> a <b>try</b>'\nblock. This style is less desirable because it is more verbose than opening a Socket\n<i>in front of</i> a <b>try</b> block.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if a Socket is passed as a method call argument.\nIf enabled the inspection assumes the Socket is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and a Socket argument will not be ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "HibernateResource",
          "displayName": "Hibernate resource opened but not safely closed",
          "enabled": false,
          "description": "\n<html>\n<body>\nReports any Hibernate resource which is not safely closed in a <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed. Hibernate resources reported\nby this inspection include <b>org.hibernate.Session</b>.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to specify if a Hibernate resource is allowed to be opened <i>inside</i> a <b>try</b>\nblock. This style is less desirable because it is more verbose than opening a resource\n<i>in front of</i> a <b>try</b> block.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if a Hibernate resource is passed as a method call argument.\nIf enabled the inspection assumes the resource is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and a Hibernate resource argument will not be ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ChannelResource",
          "displayName": "Channel opened but not safely closed",
          "enabled": false,
          "description": "<html>\n<body>\nReports any Channel which is not safely closed in a <b>finally</b> block.\nSuch resources may be inadvertently leaked\nif an exception is thrown before the resource is closed. Channel resources reported\nby this inspection include any instances created by calling\ngetChannel() on a file or socket resource.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to specify if a Channel is allowed to be opened <i>inside</i> a <b>try</b>\nblock. This style is less desirable because it is more verbose than opening a Channel\n<i>in front of</i> a <b>try</b> block.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if a Channel instance is passed as a method call argument.\nIf enabled the inspection assumes the Channel is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and a Channel argument will not ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JDBCResource",
          "displayName": "JDBC resource opened but not safely closed",
          "enabled": false,
          "description": "<html>\n<body>\nReports any JDBC resource which is not safely closed in a <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed. JDBC resources reported\nby this inspection include <b>java.sql.Connection</b>,\n<b>java.sql.Statement</b>,\n<b>java.sql.PreparedStatement</b>,\n<b>java.sql.CallableStatement</b>,\nand <b>java.sql.ResultSet</b>.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to specify if a JDBC resource is allowed to be opened <i>inside</i> a <b>try</b>\nblock. This style is less desirable because it is more verbose than opening a resource\n<i>in front of</i> a <b>try</b> block.\n<p>\nUse the second checkbox below to specify that the inspection should not warn if a JDBC resource is passed as a method call argument.\nIf enabled the inspection assumes the resource is closed in the called method.\nMethod calls inside a <b>finally</b> block with <i>close</i> in the name and an JDBC resource argument will not be ignored.\n<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Web Services",
      "inspections": [
        {
          "shortName": "OneWayWebMethod",
          "displayName": "One way web service operation",
          "enabled": false,
          "description": "<html>\n<body>\nChecks oneway Java web service <b>method</b> to have void return type.\nThe validation works in Java files. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "WSReferenceInspection",
          "displayName": "Can't resolve",
          "enabled": false,
          "description": "<html>\n<body>\nWeb Services inspections.\n</body>\n</html>\n"
        },
        {
          "shortName": "ImplicitlyExposedWebServiceMethods",
          "displayName": "Report Implicitly Exposed Web Methods",
          "enabled": false,
          "description": "<html>\n<body>\nReports web service <b>methods</b> exposed implicitly.\nThe inspection works in Java files. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "ValidExternallyBoundObject",
          "displayName": "Valid externally bound object",
          "enabled": false,
          "description": "<html>\n<body>\nChecks Java <b>class</b> used as web service or for reading / writing xml data (e.g. web service parameter class)\nto be instantiatable.\nThe validation works in Java files. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "NonJaxWsWebServices",
          "displayName": "Report Non JAX-WS Web Services",
          "enabled": false,
          "description": "<html>\n<body>\nReports non JaxWS complaint web service <b>classes</b> .\nThe inspection works in Java files. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "EmptyWebServiceClass",
          "displayName": "Empty WebService Class",
          "enabled": false,
          "description": "<html>\n<body>\nChecks Java web service <b>class</b> to have at least one web service method.\nThe validation works in Java files. <br>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Dart",
      "inspections": [
        {
          "shortName": "DartOutdatedDependencies",
          "displayName": "Outdated package dependencies",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks whether <code><a href=\"https://www.dartlang.org/tools/pub/cmd/pub-get.html\">pub get</a></code>\nor <code><a href=\"https://www.dartlang.org/tools/pub/cmd/pub-upgrade.html\">pub upgrade</a></code> is run after editing\n<code><a href=\"https://www.dartlang.org/tools/pub/pubspec.html\">pubspec.yaml</a></code> file.\n</body>\n</html>"
        },
        {
          "shortName": "DartPathPackageReference",
          "displayName": "Path Package reference",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection works in <code>pubspec.yaml</code> file and checks path references for dependencies configured as\n<a href=\"https://www.dartlang.org/tools/pub/dependencies.html#path-packages\">Path Packages</a>:\n<ul>\n  <li>Path must be valid and target folder must contain <code>pubspec.yaml</code> file.</li>\n  <li>Path Package should be within the project content, otherwise files from such packages are not editable.</li>\n</ul>\n\nExample of <code>pubspec.yaml</code> file:<br/>\n<pre>\nname: my_dart_project\nversion: 0.0.1\ndependencies:\n  my_another_dart_project:\n    path: ../my_another_dart_project\n</pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Description file",
      "inspections": [
        {
          "shortName": "InspectionDescriptionNotFoundInspection",
          "displayName": "Inspection description checker",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects missing HTML-description for an inspection.\n</body>\n</html>\n"
        },
        {
          "shortName": "PostfixTemplateDescriptionNotFound",
          "displayName": "Postfix template description checker",
          "enabled": false,
          "description": "<html>\n<body>\nChecks if postfix template (completion) has a description.\n</body>\n</html>\n"
        },
        {
          "shortName": "IntentionDescriptionNotFoundInspection",
          "displayName": "Intention description checker",
          "enabled": false,
          "description": "<html>\n<body>\nChecks if intention has a description.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "OSGi",
      "inspections": [
        {
          "shortName": "PackageAccessibility",
          "displayName": "Package accessibility",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  This inspections reports usage of classes from packages not accessible inside the OSGi context -\n  i.e. those located in .jar files not packaged as bundles, or not exported by bundles,\n  or not imported in manifest file (if applicable).\n  Asking for such a classes may cause \"class not found\" exceptions at runtime.\n</p>\n<p>\n  The inspection is disabled in tests by default (see \"Check tests\" option).\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "NonOsgiMavenDependency",
          "displayName": "Non-OSGi Maven Dependency",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Reports any Maven dependency inside an OSGi project which points to a library which can not be\n  run inside an OSGi container. Osmorc will try and bundlify these libraries, however using a library that natively\n  supports OSGi will generally provide a better result and is therefore the preferred choice.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassInDefaultPackage",
          "displayName": "Class in default package",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Reports classes which are located in the default package. OSGi does not handle these classes\n  very well, so it is strongly recommended to put classes into a package when working with OSGi.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "WrongImportPackage",
          "displayName": "Invalid package import",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  This inspection checks whether some not-exported package (in any of the model dependencies) is entered in the Import-Package header\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnregisteredActivator",
          "displayName": "Bundle activator registration",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Reports classes implementing BundleActivator which are not registered in the manifest or the facet configuration.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Accessibility",
      "inspections": [
        {
          "shortName": "HtmlRequiredTitleElement",
          "displayName": "Missing required 'title' element",
          "enabled": false,
          "description": "<html>\n<body>\nReports a missing <code>title</code> element inside the <code>head</code> section (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H25.html\">H25</a>) and offers a quick-fix for adding the tag. This title should describe the document.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredLangAttribute",
          "displayName": "Missing required 'lang' attribute",
          "enabled": false,
          "description": "<html>\n<body>\nReports a missing <code>lang</code> (or <code>xml:lang</code>) attribute for the <code>html</code> tag (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H57.html\">H57</a>) and offers a quick-fix for adding the attribute. This attribute should state the default language of a document.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlFormInputWithoutLabel",
          "displayName": "Missing associated label",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights form elements (<code>input</code>, <code>textarea</code>, and <code>select</code>) without required associated labels (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H44.html\">H44</a>) and offers a quick-fix for creating a new label.<br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredAltAttribute",
          "displayName": "Missing required 'alt' attribute",
          "enabled": false,
          "description": "<html>\n<body>\nReports a missing <code>alt</code> attribute for the <code>applet</code> and <code>img</code> tags and the <code>area</code> elements of image maps (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H24.html\">H24</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H35.html\">H35</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H36.html\">H36</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H37.html\">H37</a>) and offers a quick-fix for adding the attribute. This attribute should provide a text alternative for the content of the tag. <br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredSummaryAttribute",
          "displayName": "Missing required 'summary' attribute",
          "enabled": false,
          "description": "<html>\n<body>\nReports a missing <code>summary</code> attribute for the <code>table</code> tag (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H73.html\">H73</a>) and offers a quick-fix for adding the summary.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredTitleAttribute",
          "displayName": "Missing required 'title' attribute",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights <code>frame</code>, <code>iframe</code>, <code>dl</code>, and <code>a</code> tags without required title attributes (WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H33.html\">H33</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H40.html\">H40</a>, and <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H64.html\">H64</a>) and offers a quick-fix for adding a title.\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Ant",
      "inspections": [
        {
          "shortName": "AntDuplicateTargetsInspection",
          "displayName": "Duplicate targets",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n        Reports duplicate <b><font color=\"#000080\">targets</font></b> in\n        current build file.\n      </td>\n  </tr>\n</table>\n</body>\n</html>"
        },
        {
          "shortName": "AntMissingPropertiesFileInspection",
          "displayName": "Missing properties file",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n        Reports missing <b><font color=\"#000080\">properties files</font></b>.\n      </td>\n  </tr>\n</table>\n</body>\n</html>"
        },
        {
          "shortName": "AntResolveInspection",
          "displayName": "Ant references resolve problems",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      Reports unresolved references on properties as well as custom type definitions that cannot be resolved.\n    </td>\n  </tr>\n</table>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Assignment issues",
      "inspections": [
        {
          "shortName": "AssignmentToForLoopParameter",
          "displayName": "Assignment to 'for' loop parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment to, or modification of <b>for</b> statement parameters inside the body of a <b>for</b> loop.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\n<p>\nAssignments in basic <b>for</b> loops without an update statement are not reported.\nIn these cases the assignment is probably intended and can't be easily moved to the update part of the <b>for</b> loop.\nFor example:\n<pre><code>\n  <b>for</b> (<b>int</b> i = 0; i &lt; list.size(); ) {\n    <b>if</b> (element.equals(list.get(i))) {\n      list.remove(i);\n    } <b>else</b> {\n      i++; // modification of for loop parameter\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IncrementDecrementUsedAsExpression",
          "displayName": "Value of ++ or -- used",
          "enabled": false,
          "description": "<html>\n<body>\nReports increment or decrement expressions nested inside other expressions.\nWhile admirably terse, such expressions may be confusing, and violate the general design principle that a\ngiven construct should do precisely one thing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyUncheckedAssignmentOfMemberOfRawType",
          "displayName": "Unchecked assignment from members of raw type",
          "enabled": false,
          "description": "<html>\n<body>\n        Reports unchecked assignments from members of raw type.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAssignmentCanBeOperatorAssignment",
          "displayName": "Assignment replaceable with operator assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment operations which can be replaced by operator-assignment. Code\nusing operator assignment may be clearer, and theoretically more performant.\n<p>\n Use the check box below to ignore the conditional operators <b>&amp;&amp;</b>\n and <b>||</b>. Replacing conditional operators with operator\n assignment modifies the semantics of the expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySillyAssignment",
          "displayName": "Silly assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments of a variable to itself.\n</body>\n</html>\n"
        },
        {
          "shortName": "NestedAssignmentJS",
          "displayName": "Nested assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment expressions nested inside other expressions.  While admirably terse,\nsuch expressions may be confusing, and violate the general design principle that a given construct should do precisely one thing.\n</body>\n</html>\n"
        },
        {
          "shortName": "AssignmentUsedAsCondition",
          "displayName": "Assignment used as condition",
          "enabled": false,
          "description": "<html>\n<body>\nReports an assignment being\nused as the condition of an <b>if</b>, <b>while</b>, <b>for</b> or\n<b>do</b> statement. While occasionally intended,\nthis usage is confusing, and often indicates a typo\n(<b>=</b> instead of <b>==</b>).\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToMethodParameter",
          "displayName": "Assignment to method parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment to a\nvariable declared as a method parameter. It also reports any attempt to increment or decrement the variable.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceAssignmentWithOperatorAssignmentJS",
          "displayName": "Assignment replaceable with operator assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment operations which can be replaced by operator assignment.\nUsing operator assignment may be clearer, and theoretically more performant.\n</body>\n</html>\n"
        },
        {
          "shortName": "AssignmentToSuperclassField",
          "displayName": "Constructor assigns value to field defined in superclass",
          "enabled": false,
          "description": "<html>\n<body>\nReports any assignments to fields from a superclass from within a constructor. It is usually better to call a constructor of the\nsuperclass to initialize the fields.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyResultOfAssignmentUsed",
          "displayName": "Result of assignment used",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment expressions nested inside other expressions, so as to use the assigned value immediately.\nWhile admirably terse, such expressions may be confusing, and violate the general design principle that a\ngiven construct should do precisely one thing.\n</body>\n</html>\n"
        },
        {
          "shortName": "JSAssignmentUsedAsCondition",
          "displayName": "Assignment used as condition",
          "enabled": false,
          "description": "<html>\n<body>\nReports an assignment being\nused as the condition of an <b>if</b>, <b>while</b>, <b>for</b> or\n<b>do</b> statement. While occasionally intended,\nthis usage is confusing, and often indicates a typo\n(<b>=</b> instead of <b>==</b>).\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyAssignmentToForLoopParameter",
          "displayName": "Assignment to for-loop parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment to or modification of <b>for</b> statement parameters inside the <b>for</b> loop body.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceAssignmentWithOperatorAssignment",
          "displayName": "Assignment replaceable with operator assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment operations which can be replaced by operator-assignment. Code\nusing operator assignment may be clearer, and theoretically more performant.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore the conditional operators <b>&amp;&amp;</b>\nand <b>||</b>. Replacing conditional operators with operator\nassignment modifies the semantics of the expression.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyNestedAssignment",
          "displayName": "Nested assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment expressions nested inside other expressions.\nWhile admirably terse,\nsuch expressions may be confusing, and violate the general design principle that a given construct\nshould do precisely one thing.\n</body>\n</html>\n"
        },
        {
          "shortName": "AssignmentToLambdaParameter",
          "displayName": "Assignment to lambda parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments to a lambda parameter, this includes compound assignments and incrementing or decrementing the parameter.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToNull",
          "displayName": "'null' assignment",
          "enabled": false,
          "description": "<html>\n<body>\nReports the assignment of a variable to\n<b>null</b>, outside of declarations.\nWhile occasionally useful for triggering garbage collection, this\nconstruct may make the code more prone\nto NullPointerExceptions, and often indicates that the developer doesn't\nreally understand the class's intended semantics.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore assignments to fields.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyAssignmentToMethodParameter",
          "displayName": "Assignment to method parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment to or modification of a\nvariable declared as a method parameter.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAssignabilityCheck",
          "displayName": "Incompatible type assignments",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments with incompatible types.\n</body>\n</html>\n"
        },
        {
          "shortName": "AssignmentResultUsedJS",
          "displayName": "Result of assignment used",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment expressions where the result of the assignment is\nused in a containing expression. Such assignments are often indications of coding errors\nsuch as using <b>=</b> instead of <b>==</b>.\nMoreover, they can result in confusion due to order\nof operations, as evaluation of the assignment may effect the outer expression in unexpected\nways.\n</body>\n</html>\n"
        },
        {
          "shortName": "AssignmentToCatchBlockParameter",
          "displayName": "Assignment to catch block parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment to variable declared as a <b>catch</b> block parameter.\nWhile occasionally intended, this construct can be confusing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToStaticFieldFromInstanceMethod",
          "displayName": "Assignment to static field from instance context",
          "enabled": false,
          "description": "<html>\n<body>\nReports any assignments to <b>static</b> fields from within\ninstance methods. While legal, such assignments are tricky to do\nsafely, and are often a result of fields being inadvertently marked\n<b>static</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToFunctionParameterJS",
          "displayName": "Assignment to function parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments to function parameters. It also reports attempts to increment or\ndecrement the variable.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a\nprogrammer error.\n\n</body>\n</html>\n"
        },
        {
          "shortName": "SillyAssignmentJS",
          "displayName": "Variable is assigned to itself",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments of the form <b>x = x</b>. These are pointless,\nand usually indicate programmer error.\n</body>\n</html>\n"
        },
        {
          "shortName": "AssignmentToForLoopParameterJS",
          "displayName": "Assignment to 'for' loop parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments to variables declared as a <b>for</b> loop parameter.\nWhile occasionally intended, this construct can be extremely confusing, and is often the result of a\nprogrammer error.\n</body>\n</html>\n"
        },
        {
          "shortName": "NestedAssignment",
          "displayName": "Result of assignment used",
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment expressions nested inside other expressions. While admirably terse,\nsuch expressions may be confusing, and violate the general design principle that a given construct should do precisely one thing.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Potentially confusing code constructs",
      "inspections": [
        {
          "shortName": "IncrementDecrementResultUsedJS",
          "displayName": "Result of increment or decrement used",
          "enabled": false,
          "description": "<html>\n<body>\nReports increment (<b>++</b>) or decrement\n(<b>--</b>) expressions where the result of the assignment is\nused in a containing expression. Such assignments can result in confusion due to order\nof operations, as evaluation of the assignment may effect the outer expression in unexpected\nways.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNestedSwitch",
          "displayName": "Nested switch statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>switch</b> statements that are nested inside other\n<b>switch</b> statements. Such nested switch statements are confusing, and may result in unexpected behaviour.\n</body>\n</html>"
        },
        {
          "shortName": "OverlyComplexBooleanExpressionJS",
          "displayName": "Overly complex boolean expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean expressions with too many terms. Such expressions may be confusing and bug-prone.\n<p>\n  Use the field provided below to specify the maximum number of terms allowed in an arithmetic expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConfusingFloatingPointLiteralJS",
          "displayName": "Confusing floating point literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports floating point numbers which do not have a decimal point, numbers before the decimal point,\nand numbers after the decimal point.  Such literals may be confusing, and violate several coding standards.\n</body>\n</html>\n"
        },
        {
          "shortName": "NewInstanceOfSingleton",
          "displayName": "New instance of class annotated with @groovy.lang.Singleton",
          "enabled": false,
          "description": "<html>\n<body>\nReports new instance creation of classes annotated with <b>@groovy.lang.Singleton</b>.\nSuch constructions can lead to runtime exception \"Can't instantiate singleton\".\n</body>\n</html>"
        },
        {
          "shortName": "ClashingTraitMethods",
          "displayName": "Clashing trait methods",
          "enabled": false,
          "description": "<html>\n<body>\n  Assume you have two traits which contains methods with the same signatures e.g. 'foo()' and you create a class 'MyImplementor' implementing both these traits. So the result of invoking\n  'new MyImplementor().foo()' can be unexpected.\n  Reports classes which have such a problem.\n</body>\n</html>\n"
        },
        {
          "shortName": "PointlessArithmeticExpressionJS",
          "displayName": "Pointless arithmetic expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless arithmetic expressions. Such expressions include adding or subtracting zero, multiplying by\nzero or one, division by one, and shift by zero. Such expressions may be the result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNegatedIf",
          "displayName": "Negated if condition expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements\nwhich contain <b>else</b> branches and whose conditions are negated.\nFlipping the order of the <b>if</b> and <b>else</b>\nbranches will usually increase the clarity of such statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyResultOfIncrementOrDecrementUsed",
          "displayName": "Result of increment or decrement used",
          "enabled": false,
          "description": "<html>\n<body>\nReports increment or decrement expressions nested inside other expressions.\nWhile admirably terse, such expressions may be confusing, and violate the general design principle that a\ngiven construct should do precisely one thing.\n</body>\n</html>\n"
        },
        {
          "shortName": "ClashingGetters",
          "displayName": "Clashing getters",
          "enabled": false,
          "description": "<html>\n<body>\n\n  Assume you have two methods with signatures 'getX()' and 'isX()'. Both methods are getters for property 'x'. So the result of invoking\n  'foo.x' can be unexpected.\n  Reports methods which have such a problem.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrReassignedInClosureLocalVar",
          "displayName": "Local variable is reassigned in closure or anonymous class",
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables assigned to expression with different type inside of closure of anonymous class.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyConditional",
          "displayName": "Conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports the ternary condition operator. Some coding standards prohibit the use of\nthe condition operator, in favor of <b>if-else</b> statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "NestedFunctionJS",
          "displayName": "Nested function",
          "enabled": false,
          "description": "<html>\n<body>\nReports functions nested inside other functions.\nWhile JavaScript allows functions to be nested, such constructs may be confusing.\nAdditionally, nested functions are prone to cause difficult-to-diagnose memory\nleaks in certain browsers, including Microsoft Internet Explorer.\n<p>\n  Use the checkbox below to prevent this inspection from reporting anonymous nested functions.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOverlyComplexBooleanExpression",
          "displayName": "Overly complex boolean expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean expressions with too many terms. Such\nexpressions may be confusing and bug-prone.\n<p>\n Use the field provided below to specify the maximum number of terms allowed in an boolean expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOverlyComplexArithmeticExpression",
          "displayName": "Overly complex arithmetic expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports arithmetic expressions with too many terms. Such\nexpressions may be confusing and bug-prone.\n<p>\n Use the field provided below to specify the maximum number of terms allowed in an arithmetic expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyDoubleNegation",
          "displayName": "Double negation",
          "enabled": false,
          "description": "<html>\n<body>\nReports double negation, for example: <b>if (!!functionCall())</b>\n</body>\n</html>\n"
        },
        {
          "shortName": "CallerJS",
          "displayName": "Use of 'caller' property",
          "enabled": false,
          "description": "<html>\n<body>\nReports uses of the <b>caller</b> property in a JavaScript function.\nUse of this property to access the stack frame of the calling method can be extremely confusing, and result in subtle bugs.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrPackage",
          "displayName": "Package mismatch",
          "enabled": false,
          "description": "<html>\n<body>\nReports files with a declared package that does not match the package expected.\n</body>\n</html>\n"
        },
        {
          "shortName": "NegatedIfStatementJS",
          "displayName": "Negated 'if' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b> statements which have an <b>else</b> branch and a negated condition.\nFlipping the order of the <b>if</b> and <b>else</b>\nbranches will usually increase the clarity of such statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "GrDeprecatedAPIUsage",
          "displayName": "Deprecated API inspection",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of deprecated code.\n</body>\n</html>"
        },
        {
          "shortName": "NegatedConditionalExpressionJS",
          "displayName": "Negated conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions whose conditions are negated.\nFlipping the order of the conditional expression branches will usually increase the clarity of such\nstatements.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNegatedConditional",
          "displayName": "Negated conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions whose conditions are negated.\nFlipping the order of the conditional expression branches will usually increase the clarity of such\nstatements.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyPointlessArithmetic",
          "displayName": "Pointless arithmetic expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless arithmetic\nexpressions. Such expressions include adding or subtracting zero, multiplying by zero or one,\ndivision by one, and shift by zero. Such expressions may be the result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryQualifiedReference",
          "displayName": "Unnecessary qualified reference",
          "enabled": false,
          "description": "<html>\n<body>\nReports fully qualified references which can be replaced with import.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConfusingPlusesOrMinusesJS",
          "displayName": "Confusing sequence of '+' or '-'",
          "enabled": false,
          "description": "<html>\n<body>\nReports suspicions combinations of <b>+</b> or <b>-</b>\ncharacters in JavaScript code (e.g. <b>a+++b</b>.  While legal, such sequences are confusing,\nand may have their semantics changed through changes in whitespace.\n</body>\n</html>\n"
        },
        {
          "shortName": "EmptyStatementBodyJS",
          "displayName": "Statement with empty body",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b>, <b>while</b>, <b>for</b>, and <b>with</b> statements whose bodies are empty.  While\noccasionally useful, such statements are often the result of typos, and may cause confusion.\n<p>\n  Use the checkbox below to select whether statements whose bodies are empty block statements\n  will be reported by this inspection.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "NestedConditionalExpressionJS",
          "displayName": "Nested conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary conditional expressions contained within other ternary conditions.\nSuch nested conditionals may be extremely confusing, and best replaced by more explicit conditional\nlogic.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOctalInteger",
          "displayName": "Octal integer",
          "enabled": false,
          "description": "<html>\n<body>\nReports octal integer literals. Some coding standards prohibit the\nuse of octal literals, as they may be easily confused with decimal literals.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyPointlessBoolean",
          "displayName": "Pointless boolean expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless or pointlessly\ncomplicated boolean expressions. Such expressions include <b>and</b>ing with true,\n<b>or</b>ing with false,\nequality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be\nthe result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n</body>\n</html>\n"
        },
        {
          "shortName": "OverlyComplexArithmeticExpressionJS",
          "displayName": "Overly complex arithmetic expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports arithmetic expressions with too many terms. Such expressions may be confusing and bug-prone.\n<p>\n  Use the field provided below to specify the maximum number of terms allowed in an arithmetic expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "BlockStatementJS",
          "displayName": "Unnecessary 'block' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary block statements.  Block statements that are not used as the body of <b>if</b>, <b>for</b>,\n<b>while</b>, <b>do</b>, <b>with</b>, or <b>try</b> statements, or as the\nbody of a function declaration are reported.  Since JavaScript blocks do not introduce new scopes\nas is common in Java and other languages, free-standing block statements may be the result of\ncode confusion, and may result in subtle bugs.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNestedConditional",
          "displayName": "Nested conditional expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary conditional expressions that are nested inside other\nconditional expressions.  Such nested conditionals may be very confusing.  \"Elvis\" expressions are counted as conditionals\nfor purpose of this inspection.\n</body>\n</html>"
        },
        {
          "shortName": "GroovyEmptyStatementBody",
          "displayName": "Statement with empty body",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>if</b>, <b>while</b>, <b>do</b> or <b>for</b> statements\nwith empty bodies. While occasionally intended, this construction is confusing, and often the result of a typo.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyGStringKey",
          "displayName": "GString map key",
          "enabled": false,
          "description": "<html>\n<body>\nReports statements which use a <b>GString</b> object as a key to map.\nIn general <b>GString</b> objects are mutable and probably should not be used as keys.\n<p>\nAlso, a <b>GString</b> entry cannot be accessed with a <b>java.lang.String</b> object with same value. Example:\n<br>\n<pre>\n    def map = [:]\n    <b>def</b> key = 'foo'\n    map &lt&lt [\"${key}\": 'bar']\n    <b>assert </b> map[key] == <b>null</b>\n</pre>\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "DynamicallyGeneratedCodeJS",
          "displayName": "Execution of dynamically generated JavaScript",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to the <b>eval()</b>, <b>setTimeout()</b>,\nand <b>setInterval()</b> functions, or allocation of a <b>Function</b>\nobject.  These functions are used to execute arbitrary strings of JavaScript text, often\ndynamically generated.  This can be very confusing, and may be a security risk.\n</body>\n</html>\n"
        },
        {
          "shortName": "MagicNumberJS",
          "displayName": "Magic number",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"magic numbers\", i.e. literal numeric constants used without declaration.\n\"Magic numbers\" can result in code whose intention is extremely unclear, and may result in errors if a \"magic\nnumber\" is changed in one code location but not another.  The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \n0.0 and 1.0 are not reported by this inspection.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Java language level migration aids",
      "inspections": [
        {
          "shortName": "IfCanBeSwitch",
          "displayName": "'if' replaceable with 'switch'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>if</b> statements that can be replaced\nby a <b>switch</b> statement. This inspection will automatically suggest string\nswitches when the project language level is Java 7 or higher.\n<!-- tooltip end -->\n<p>\nUse the text field below to indicate the minimum number of <b>if</b> branches with condition\nan <b>if</b> statement should have to be reported.\nA terminal <b>else</b> branch (without <b>if</b>) is not counted\n<p>\nUse the first checkbox below to have this inspection suggest <b>switch</b> statements on\nprimitive and boxed numbers and characters.\n<p>\nUse the second checkbox below to have this inspection suggest switch statements on\nenum constants.\n<p>\nUse the third checkbox below to only suggest switch statements which can't introduce a <b>NullPointerException</b>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UseCompareMethod",
          "displayName": "'compare()' method can be used to compare numbers",
          "enabled": false,
          "description": "<html>\n<body>\nSuggests to use the static <code>Integer.compare()</code> method and similar methods where more verbose or less efficient constructs are\nused. For example, <code>x &gt; y ? 1 : x &lt; y ? -1 : 0</code> or <code>Integer.valueOf(x).compareTo(y)</code> could be\nreplaced with <code>Integer.compare(x, y)</code>. If <code>x</code> and <code>y</code> are already boxed integers, then\n<code>x.compareTo(y)</code> is suggested.\n\n<p><code>Double.compare</code> and <code>Float.compare</code> methods appeared in Java 1.4, methods for other primitive types\n   are available since Java 1.7</p>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "EnumerationCanBeIteration",
          "displayName": "Enumeration can be iteration",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>Enumeration</b> methods\nused, which can be replaced equivalent <b>Iterator</b>\nconstructs. <b>Iterator</b>s are part of the Java\nCollection Framework, which has been available since Java 1.2.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "Since15",
          "displayName": "Usages of API which isn't available at the configured language level",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection finds all usages of methods that have <b><font color=\"#000080\">@since</font></b> tag in\ntheir documentation.<br><br>\nThis may be useful when development is performed under newer SDK version as the target platform for production.<br><br>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "FreeMarker",
      "inspections": [
        {
          "shortName": "FtlTypesInspection",
          "displayName": "Types inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nCheck that FreeMarker expression types are consistent\n</body>\n</html>"
        },
        {
          "shortName": "FtlDeprecatedBuiltInsInspection",
          "displayName": "Deprecated built-ins inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports deprecated built-ins (default, exists, if_exists, web_safe) usages\n</body>\n</html>"
        },
        {
          "shortName": "FtlFileReferencesInspection",
          "displayName": "File references inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nCheck that FreeMarker file references (in #include and #import directives) are resolved correctly\n</body>\n</html>"
        },
        {
          "shortName": "FtlCallsInspection",
          "displayName": "Calls inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nCheck macro and function call parameter matching\n</body>\n</html>"
        },
        {
          "shortName": "FtlImportCallInspection",
          "displayName": "Import calls inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nSuggest quick fixes to #import/#include files containing referenced #macro/#function\n</body>\n</html>"
        },
        {
          "shortName": "FtlReferencesInspection",
          "displayName": "References inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nCheck that FreeMarker references are resolved correctly\n</body>\n</html>"
        },
        {
          "shortName": "FtlWellformednessInspection",
          "displayName": "Wellformedness inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nCheck that FreeMarker directives are well-formed, have appropriate nesting and closing tags if necessary\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Angular",
      "inspections": [
        {
          "shortName": "AngularUndefinedModuleExport",
          "displayName": "Undefined export from Angular module",
          "enabled": false,
          "description": "<html>\n<body>\nReports exports of undeclared or unimported components, directives and pipes from an Angular module.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularIncorrectTemplateDefinition",
          "displayName": "Incorrect component template definition",
          "enabled": false,
          "description": "<html>\n<body>\nWarns if a component doesn’t have an associated template or uses both <code>template</code> and <code>templateUrl</code> properties.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularInsecureBindingToEvent",
          "displayName": "Insecure binding to event",
          "enabled": false,
          "description": "<html>\n<body>\nReports bindings to the event properties or attributes, e.g. <code>[onclick]</code> or <code>[attr.onclick]</code> instead of\n<code>(click)</code>.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularMissingOrInvalidDeclarationInModule",
          "displayName": "Missing or invalid component, directive or pipe declaration in a module",
          "enabled": false,
          "description": "<html>\n<body>\nWarns about Angular components, directives or pipes that are not declared in any module or declared in multiple modules.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularMissingEventHandler",
          "displayName": "Missing event handler",
          "enabled": false,
          "description": "<html>\n<body>\nWarns about a missing event handler statement for an event binding.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularInvalidSelector",
          "displayName": "Missing or invalid selector",
          "enabled": false,
          "description": "<html>\n<body>\nValidates a component or directive <code>selector</code> property.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularInaccessibleComponentMemberInAotMode",
          "displayName": "Inaccessible component member in AOT mode",
          "enabled": false,
          "description": "<html>\n<body>\nWarns if component's private or protected members are accessed from its template. Such usages causes AOT compilation to fail.\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "AngularInvalidTemplateReferenceVariable",
          "displayName": "Unbound or ambiguous template reference variable",
          "enabled": false,
          "description": "<html>\n<body>\nWarns about a template reference variable that is not assigned to a directive when using <code>exportAs</code> or is assigned to multiple\ndirectives.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularUndefinedBinding",
          "displayName": "Undefined binding",
          "enabled": false,
          "description": "<html>\n<body>\nReports undefined property, event or structural directive bindings on elements.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularNonEmptyNgContent",
          "displayName": "Content inside <ng-content> tag",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that the <code>&lt;ng-content&gt;</code> tag used for content projection doesn’t have any text or other tags in it.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularUndefinedTag",
          "displayName": "Undefined tag",
          "enabled": false,
          "description": "<html>\n<body>\nReports tags, which are defined by components or directives out of current scope.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularInvalidExpressionResultType",
          "displayName": "Invalid expression result type",
          "enabled": false,
          "description": "<html>\n<body>\nReports incorrect return type of an Angular binding expression.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularInvalidI18nAttribute",
          "displayName": "Invalid i18n attribute",
          "enabled": false,
          "description": "<html>\n<body>\nReports problems with <code>i18n-*</code> attributes.\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "AngularInvalidAnimationTriggerAssignment",
          "displayName": "Invalid animation trigger assignment",
          "enabled": false,
          "description": "<html>\n<body>\nWarns about the invalid assignment of the animation trigger. To attach an animation to an element, use\n<code>[@triggerName]=\"expression\"</code> or an attribute without a value <code>@triggerName</code>.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularCliAddDependency",
          "displayName": "Angular CLI add dependency",
          "enabled": false,
          "description": "<html>\n<body>\nSuggests using 'ng add' command to install the dependency.\n<p>'ng add' will use the package manager to download it and invoke a schematic\n  which can update your project with configuration changes, add additional dependencies (e.g. polyfills),\n  or scaffold package-specific initialization code.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularRecursiveModuleImportExport",
          "displayName": "Recursive import or export of Angular module",
          "enabled": false,
          "description": "<html>\n<body>\nReports cyclic dependencies between Angular modules.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularInvalidEntryComponent",
          "displayName": "Invalid entry component",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that a valid Angular component is specified in the module’s <code>bootstrap</code> or <code>entryComponents</code> property.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularInvalidImportedOrDeclaredSymbol",
          "displayName": "Invalid imported or declared symbol",
          "enabled": false,
          "description": "<html>\n<body>\nReports any symbols that are declared, imported or exported by an Angular module that are not modules, components, directives or pipes or\ncan’t be used in the context of the property.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularAmbiguousComponentTag",
          "displayName": "Ambiguous component tag",
          "enabled": false,
          "description": "<html>\n<body>\nWarns if components are matched on an embedded template element <code>&lt;ng-template&gt;</code>, or if more than one component is matched\non any other element.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AngularMultipleStructuralDirectives",
          "displayName": "Multiple structural directives on one element",
          "enabled": false,
          "description": "<html>\n<body>\nReports the usage of multiple structural directives (<code>*ngIf</code>, <code>*ngFor</code>, etc) on one element.\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Verbose or redundant code constructs",
      "inspections": [
        {
          "shortName": "RedundantComparatorComparing",
          "displayName": "Comparator can be simplified",
          "enabled": false,
          "description": "<html>\n<body>\nReports redundant Comparator combinator constructs which can be simplified. Examples:\n<ul>\n  <li><code>c.thenComparing(Comparator.comparing(function))</code> &rarr; <code>c.thenComparing(function)</code></li>\n  <li><code>Comparator.comparing(Map.Entry::getKey)</code> &rarr; <code>Map.Entry.comparingByKey()</code></li>\n  <li><code>stream.min(Collections.reverseOrder(cmp))</code> &rarr; <code>stream.max(cmp)</code></li>\n</ul>\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferReplaceableByString",
          "displayName": "'StringBuilder' can be replaced with 'String'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any usages of <b>StringBuffer</b>, <b>StringBuilder</b> or <b>StringJoiner</b>\nwhich can be replaced with a single <b>java.lang.String</b> concatenation. Using a <b>String</b> concatenation\nmakes the code shorter and simpler. Example:\n<pre>\n  StringBuilder result = new StringBuilder();\n  result.append(\"i = \");\n  result.append(i);\n  result.append(\";\");\n  return result.toString();\n</pre>\n<p>\n  This code could be replaced with\n</p>\n<pre>\n  String result = \"i = \" + i + \";\";\n  return result;\n</pre>\n<p>\nThis inspection only reports when the suggested replacement does not result in significant \nperformance drawback on modern JVMs. In many cases the String concatenation may perform better. \n</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExcessiveLambdaUsage",
          "displayName": "Excessive lambda usage",
          "enabled": false,
          "description": "<html>\n<body>\nReports if trivial lambda expression is used where there's an alternative method which behaves the same way, but\naccepts a concrete value instead of a lambda.\n<p>\n  For example, <code>Optional.orElseGet(() -> null)</code> can be replaced with <code>Optional.orElse(null)</code>.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantCollectionOperation",
          "displayName": "Redundant Collection operation",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessarily complex collection operations which have simpler alternatives. E.g.\n<b>Arrays.asList(array).subList(0, 10).toArray(new String[0])</b> could be simplified to\n<b>Arrays.copyOfRange(array, 0, 10)</b> or <b>collection.containsAll(singletonList(\"x\"))</b> could be\nsimplified to <b>collection.contains(\"x\")</b>.\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryLabelOnContinueStatement",
          "displayName": "Unnecessary label on 'continue' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>continue</b> statements with unnecessary\nlabels.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryReturn",
          "displayName": "Unnecessary 'return' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any unnecessary <b>return</b> statements at the end of constructors and methods returning\n<b>void</b>. These may be safely removed.\n<p>\nAt present, this inspection is disabled in JSP files.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to let this inspection ignore <b>return</b> statements in the then branch of <b>if</b> statements\nwhich also have an <b>else</b> branch.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExcessiveRangeCheck",
          "displayName": "Excessive range check",
          "enabled": false,
          "description": "<html>\n<body>\nReports condition chains where a value range is checked which could be simplified to a single check. E.g. <b>x > 2 && x &lt; 4</b> could be\n  simplified to <b>x == 3</b> or <b>arr.length == 0 || arr.length > 1</b> could be simplified to <b>arr.length != 1</b>. \n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantTypeArguments",
          "displayName": "Redundant type arguments",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports all calls to parametrized methods where explicit argument types\ncan be omitted, since they will be unambiguously inferred by compiler. <br>\nSuch usages make code excessive and thus less readable. <br> <br>\nFor example if you have a call to parametrized method like:\n <pre>\n&nbsp;&nbsp;&nbsp;&nbsp;<b><font color=\"#000080\">this</font></b>.&lt;String&gt;addItem(<font color=\"#008000\">\"\"</font>);\n</pre>\n- the usage of <b><font color=\"#000080\">&lt;String&gt;</font></b> will be highlighted. <br> <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryLabelOnBreakStatement",
          "displayName": "Unnecessary label on 'break' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> statements with unnecessary\nlabels.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryBreak",
          "displayName": "Unnecessary 'break' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any unnecessary <b>break</b> statements.\nAn <b>break</b> statement is unnecessary when no other statements will be executed when it is removed.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "StringOperationCanBeSimplified",
          "displayName": "Redundant String operation",
          "enabled": false,
          "description": "<html>\n<body>\nReports a variety of redundant String-related operations like calling <b>string.toString()</b> or <b>string.substring(0)</b>.\nAlso, reports usage of redundant String constructors like <b>new String()</b> (equivalent to <b>\"\"</b>) or <b>new String(anotherString)</b>\n(equivalent to <b>anotherString</b>). Such code, when fixed, may change the program semantics if String referential equality is\nimportant (which is commonly considered as a bad practice). In this case, consider suppressing the warning or using the inspection option\nto disable reporting such problems.\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryContinue",
          "displayName": "Unnecessary 'continue' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any unnecessary <b>continue</b> statements at the end of loops.\nThese may be safely removed.\n<p>\nAt present, this inspection is disabled in JSP files.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryStringEscape",
          "displayName": "Unnecessarily escaped character",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessarily escaped characters in <b>String</b> and optionally <b>char</b> literals.\nFor example <b>\\'</b> in a <b>String</b> literal or <b>\\n</b> in a Java 13 Preview text block.\nThe escaped tab character <b>\\t</b> is not reported.\n<!-- tooltip end -->\n<p><small>New in 2019.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "CastCanBeRemovedNarrowingVariableType",
          "displayName": "Too weak variable type leads to unnecessary cast",
          "enabled": false,
          "description": "<html>\n<body>\nReports type casts which could be removed if the variable type is narrowed to the cast type. Example:\n<pre>\n  Object x = \"  string  \";\n  System.out.println(((String)x).trim());\n</pre>\nHere changing the type of <b>x</b> to <b>String</b> will make the cast redundant. The suggested quick-fix updates variable type and\nremoves all redundant casts on that variable.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "DuplicateExpressions",
          "displayName": "Multiple occurrences of the same expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports multiple equivalent occurrences of the same expression within a method (or constructor, or class initializer)\nif the result of the expression can be reused.\n<!-- tooltip end -->\n<p>\n  The expression is reported if it's free of side effects and its result is always the same (in terms of <code>Object.equals()</code>).\n  The examples of such expressions are <code>a + b</code>, <code>Math.max(a, b)</code>, <code>a.equals(b)</code>,\n  <code>s.substring(a,b)</code>. To make sure the result is always the same, it's verified that the variables used in the expression don't\n  change their values between the occurrences of the expression.</p>\n<p>\n  Such expressions may contain methods of immutable classes like <code>String</code>, <code>BigDecimal</code>, etc,\n  and of utility classes like <code>Objects</code>, <code>Math</code> (except <code>random()</code>).\n  The well-known methods, such as <code>Object.equals()</code>, <code>Object.hashCode()</code>, <code>Object.toString()</code>,\n  <code>Comparable.compareTo()</code>, and <code>Comparator.compare()</code> are OK as well because they normally don't have\n  any observable side effects.\n</p>\n\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantClassCall",
          "displayName": "Redundant 'isInstance' or 'cast' call",
          "enabled": false,
          "description": "<html>\n<body>\nReports redundant calls of <b>java.lang.Class</b> methods. E.g. <b>Xyz.class.isInstance(object)</b> could be replaced with <b>object instanceof Xyz</b>.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ExplicitArrayFilling",
          "displayName": "Explicit array filling",
          "enabled": false,
          "description": "<html>\n<body>\nReports loops which could be replaced with <code>Arrays.setAll()</code> or <code>Arrays.fill()</code> calls.\nThis inspection suggests replacing loops with <code>Arrays.setAll()</code> if the language level of the project or module is 8 or higher.\nReplacing loops with <code>Arrays.fill()</code> is possible with any language level.\n<p>For example:</p>\n<pre>\n  for (int i=0; i&lt;array.length; i++) {\n     array[i] = calc(i);\n  }\n</pre>\n<p>Will be replaced with:</p>\n<pre>\n  Arrays.setAll(array, this::calc);\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryDefault",
          "displayName": "Unnecessary 'default' for enum 'switch' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports enum <b>switch</b> statements or expression with <b>default</b> branches which can never be taken,\nbecause all possible values are covered by a <b>case</b> branch.\nThese are unnecessary, especially for <b>switch</b> expressions, because they don't compile when all\n<b>enum</b> constants are not covered by a <b>case</b> branch.\n<p>\n  The language level needs to be configured to 13 Preview to report <b>switch</b> expressions.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConditionCoveredByFurtherCondition",
          "displayName": "Condition is covered by further condition",
          "enabled": false,
          "description": "<html>\n<body>\nReports conditions that become redundant as they are completely covered by a subsequent condition.\nFor example, in the <code>value != -1 && value > 0</code> condition, the first part is redundant:\nif it's false, then the second part is also false.\nOr in a condition like <code>obj != null && obj instanceof String</code>,\nthe null-check is redundant as <code>instanceof</code> operator implies non-nullity.\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantCast",
          "displayName": "Redundant type cast",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary cast expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "ManualMinMaxCalculation",
          "displayName": "Manual min/max calculation",
          "enabled": false,
          "description": "<html>\n<body>\nReports cases where the minimum or the maximum of two numbers can be calculated by means of\n<code>Math.max()</code> or <code>Math.min()</code> instead of doing it manually.\n<p>Example:</p>\n<pre>\n  public int getMinWeight(int typeDiffWeight, int rawTypeDiffWeight) {\n    return (rawTypeDiffWeight &lt; typeDiffWeight ? rawTypeDiffWeight : typeDiffWeight);\n  }\n</pre>\n<p>Will be replaced with:</p>\n<pre>\n  public int getMinWeight(int typeDiffWeight, int rawTypeDiffWeight) {\n    return Math.min(rawTypeDiffWeight, typeDiffWeight);\n  }\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2019.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateBranchesInSwitch",
          "displayName": "Duplicate branches in 'switch'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>switch</code> statements containing the same code in different branches.\n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantArrayCreation",
          "displayName": "Redundant array creation",
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary creation of array expression\nto be passed as an argument to varargs parameter.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantCompareCall",
          "displayName": "Redundant 'compare' method call",
          "enabled": false,
          "description": "<html>\n<body>\nReports comparisons like <b>Integer.compare(a, b) == 0</b> which could be replaced simply with <b>a == b</b>.\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "TypeScript",
      "inspections": [
        {
          "shortName": "TypeScriptUnresolvedFunction",
          "displayName": "Unresolved JavaScript function",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that TypeScript called functions are valid.\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptSuspiciousConstructorParameterAssignment",
          "displayName": "Suspicious parameter assignment in constructor",
          "enabled": false,
          "description": "<html>\n<body>\nWarns against a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.<br/>\nIn this case, the corresponding field <i>won't</i> be assigned, only the local parameter value is modified.\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptDuplicateUnionOrIntersectionType",
          "displayName": "Duplicate union or intersection type component",
          "enabled": false,
          "description": "<html>\n<body>\nChecks union and intersection types for duplicates\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptConfig",
          "displayName": "tsconfig.json validation",
          "enabled": false,
          "description": "<html>\n<body>\nValidates consistency of 'paths', 'checkJs' and 'extends' in tsconfig.json files.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "JSEqualityComparisonWithCoercion.TS",
          "displayName": "Equality operator may cause type coercion",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of equality operators which may cause unexpected type coercions.\nIt is considered a good practice to use the type-safe equality operators <b>===</b> and <b>!==</b>\ninstead of their regular counterparts <b>==</b> and <b>!=</b>.\n\n<p>Depending on the option selected, this will either highlight:</p>\n\n<ul>\n  <li>\n    All usages of <b>==</b> and <b>!=</b> operators.\n  </li>\n  <li>\n    All usages except comparison with null. Some code styles allow using <b>x == null</b> as a replacement for\n    <b>x === null || x === undefined</b>.\n  </li>\n  <li>\n    Only suspicious expressions, such as: <b>==</b> or <b>!=</b> comparisons\n    to <b>0</b>, <b>''</b>,\n    <b>null</b>, <b>true</b>,\n    <b>false</b>, or <b>undefined</b>.\n  </li>\n</ul>\n</body>\n</html>\n"
        },
        {
          "shortName": "TypeScriptUnresolvedVariable",
          "displayName": "Unresolved JavaScript variable",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that TypeScript referenced variables and fields are valid.\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptMissingAugmentationImport",
          "displayName": "Missing augmentation import",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that current file imports the augmentation module.\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptFieldCanBeMadeReadonly",
          "displayName": "Field is assigned only in the constructor and can be made readonly",
          "enabled": false,
          "description": "<html>\n<body>\nIf a private field is assigned only in the constructor, it can be made readonly.\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptSmartCast",
          "displayName": "Variable type is narrowed by a type guard",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights variable usages where variable type is narrowed by a type guard.\nNote that severity level doesn't affect this inspection.\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptValidateJSTypes",
          "displayName": "Type mismatch in 'any' type context",
          "enabled": false,
          "description": "<html>\n<body>\nChecks TypeScript called function parameters, return values, assigned expressions to be of correct type in <b>any</b> type context.\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptValidateGenericTypes",
          "displayName": "Generic type mismatch",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that a corresponding type argument is passed when a generic type is used in a function, interface or class declaration\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptLibrary",
          "displayName": "Required TypeScript library is not included in tsconfig.json",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that the TypeScript library files required for the symbol are listed under the 'lib' compiler option in tsconfig.json.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptCheckImport",
          "displayName": "Imports validation",
          "enabled": false,
          "description": "<html>\n<body>\nValidates names and paths in <b>import</b> declarations in TypeScript code.\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptAccessibilityCheck",
          "displayName": "'private' and 'protected' members accessibility",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that TypeScript <b>private</b> and <b>protected</b> members are visible in current context.\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptRedundantGenericType",
          "displayName": "Redundant type argument for a generic type",
          "enabled": false,
          "description": "<html>\n<body>\nChecks type arguments for redundancy when a reference provides the type with default values\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
          "displayName": "Abstract class constructor can be made protected",
          "enabled": false,
          "description": "<html>\n<body>\nSuggests to make the constructor of an abstract class protected (because it is useless to have it public).\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptExplicitMemberType",
          "displayName": "Explicit member types",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights type annotations that do not match the current code style for explicit types.\n<!-- tooltip end -->\n<p>\n  Type declarations are not necessary when the type inferred from the context exactly matches the type annotation, for example:\n</p>\n<p>\n  <code>\n    var pi: number = 3.14\n  </code>\n</p>\n<p>In some cases it is preferable to always have explicit types - this saves from accidental type changes and makes code more explicit.</p>\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptMissingConfigOption",
          "displayName": "Missing option in tsconfig.json",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that required options are enabled in tsconfig.json, e.g. when using React JSX in .tsx files, the TypeScript configuration file contains 'jsx: \"react\"'.\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptUMDGlobal",
          "displayName": "Reference to a UMD global",
          "enabled": false,
          "description": "<html>\n<body>\nReport the use of references to a UMD global if the current file is a module.\n</body>\n</html>"
        },
        {
          "shortName": "TypeScriptValidateTypes",
          "displayName": "Type mismatch",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that TypeScript called function parameters, return values, assigned expressions are of the correct type.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Properties files",
      "inspections": [
        {
          "shortName": "WrongPropertyKeyValueDelimiter",
          "displayName": "Property key/value delimiter doesn't match code style settings",
          "enabled": false,
          "description": "<html>\n<body>\nReports on properties in which key/value delimiter doesn't match code style settings.\n</body>\n</html>"
        },
        {
          "shortName": "UnusedProperty",
          "displayName": "Unused Property",
          "enabled": false,
          "description": "<html>\n<body>\nReports all properties not referenced from outside of the properties file.\n</body>\n</html>\n"
        },
        {
          "shortName": "InconsistentResourceBundle",
          "displayName": "Inconsistent resource bundle",
          "enabled": false,
          "description": "<html>\n<body>\nReports problems in the properties files contained in the resource bundle.\n<ul>\n  <li><b>Report missing translation</b>\n  </li>\n</ul>\noption controls search for an untranslated properties. <br>\nIt reports properties contained in parent properties file that are missing in inherited (unless it's a language dialect). <br>\nE.g. having this resource bundle: <br>\n\n<b>messages.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n<b>messages_fr.properties</b> : empty <br>\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as untranslated.\n<ul>\n  <li>\n\n    <b>Report inconsistent properties</b>\n  </li>\n</ul>\noption controls invalid resource bundle structure inspection. <br>\nIt reports properties contained in inherited properties file that are missing in parent (or in sibling if there is no parent). <br>\nE.g. having this resource bundle: <br>\n<b>messages.properties</b> : empty <br>\n<b>messages_fr.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n\nProperty <font color=\"#000080\"><b>abc</b></font> translation here is not available for any language except French,\nand, thus, will be reported as missing in the (default) properties file <b>messages.properties</b> .\n\n<ul>\n  <li>\n\n    <b>Report properties overridden with the same value</b>\n  </li>\n</ul>\noption checks for properties which are copy-pasted into several properties files verbatim. <br>\nE.g. in this resource bundle: <br>\n<b>messages.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n<b>messages_fr.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as unnecessarily inherited in the file <b>messages_fr.properties</b> .\n<br>\n\n<ul>\n  <li>\n\n    <b>Report properties overridden with different placeholders</b>\n  </li>\n</ul>\noption checks for properties which are overridden for placeholders consistency. <br>\nE.g. in this resource bundle: <br>\n<b>messages.properties</b> : <br>\n<font color=\"#000080\"><b>qwe={0}xxx{1}</b></font> <br>\n<font color=\"#000080\"><b>abc={0}yyy{1}</b></font> <br>\n<b>messages_fr.properties</b> : <br>\n<font color=\"#000080\"><b>qwe={0}xxx{0}xxx{1}</b></font> <br>\n<font color=\"#000080\"><b>abc={0}yyy</b></font> <br>\n\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as property contains message format placeholders\nwith value not corresponding to <b>messages.properties</b> .\n<br>\n\n<ul>\n  <li>\n\n    <b>Report properties overridden with different values endings</b>\n  </li>\n</ul>\noption checks for properties which are overridden for endings consistency. <br>\nE.g. in this resource bundle: <br>\n<b>messages.properties</b> : <br>\n<font color=\"#000080\"><b>abc=xxxzzz</b></font> <br>\n<b>messages_fr.properties</b> : <br>\n<font color=\"#000080\"><b>abc=xxx;</b></font> <br>\n\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as property contains special signs\n( <b>'!'</b> , <b>'?'</b> , <b>'.'</b> , <b>':'</b> or <b>';'</b> ) at the end of value but\nvalue in <b>messages.properties</b> doesn't.\n<br>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "IncompleteProperty",
          "displayName": "Property is incomplete",
          "enabled": false,
          "description": "<!--\n  ~ Copyright 2000-2015 JetBrains s.r.o.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n<html>\n<body>\nInspection detects property keys which have no translations in part of resource bundle properties files.\n</body>\n</html>"
        },
        {
          "shortName": "UnresolvedPropertyKey",
          "displayName": "Invalid property key",
          "enabled": false,
          "description": "<html>\n<body>\nVerifies that arguments passed to functions\nwith parameters annotated as <b>@PropertyKey</b> are valid property keys in the\nrespective properties files. Also verifies that the <b>resourceBundle</b>\nargument of the <b>@PropertyKey</b> annotation is an existing resource bundle.\n</body>\n</html>\n"
        },
        {
          "shortName": "TrailingSpacesInProperty",
          "displayName": "Trailing Spaces in Property",
          "enabled": false,
          "description": "<html>\n<body>\nReports all properties which key or value are ending with whitespaces. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedMessageFormatParameter",
          "displayName": "Missing message format parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports properties values\nwhich looks like <b><font color=\"#000080\">java.text.MessageFormat</font></b> format strings\nbut do not use some of the parameters of <b><font color=\"#000080\">{xx}</font></b> kind.\n<p>\n  For example:\n  <code><pre>\n# parameter {0} is not used\n<b><font color=\"#000080\">error.message</font></b>=Something happened in line <b><font color=\"#000080\">{1}</font></b>\n</pre>\n  </code>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousLocalesLanguages",
          "displayName": "Suspicious resource bundle locale languages",
          "enabled": false,
          "description": "<html>\n<body>\nInspection detects locales which contain language codes not supported by Java.\n</body>\n</html>"
        },
        {
          "shortName": "DuplicatePropertyInspection",
          "displayName": "Duplicate Property",
          "enabled": false,
          "description": "<html>\n<body>\nReports duplicate property keys with different values, duplicate keys or duplicate property values.\nScope defines the area where inspection would search for duplicates.\n<p>\n  For example:\n  <code><pre>\nproperty1=<b><font color=\"#000080\">value</font></b>;\nproperty2=<b><font color=\"#000080\">value</font></b>;\n</pre>\n  </code>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "AlphaUnsortedPropertiesFile",
          "displayName": "Properties File or Resource Bundle is Alphabetically Unsorted",
          "enabled": false,
          "description": "<html>\n<body>\nReports on alphabetically unsorted resource bundles or properties files.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Struts 2",
      "inspections": [
        {
          "shortName": "ValidatorModelInspection",
          "displayName": "Validator model",
          "enabled": false,
          "description": "<html>\n<body>\n  Validates validation.xml files for syntactic and reference errors.\n</body>\n</html>"
        },
        {
          "shortName": "ValidatorConfigModelInspection",
          "displayName": "Validator-Config model",
          "enabled": false,
          "description": "<html>\n<body>\n  Validates validator configuration file (validators.xml in classpath-root) for syntactic and reference errors.\n</body>\n</html>"
        },
        {
          "shortName": "Struts2ModelInspection",
          "displayName": "Struts 2 Model",
          "enabled": false,
          "description": "<html>\n<body>\nValidates struts.xml files for syntactic and reference errors.\n</body>\n</html>"
        },
        {
          "shortName": "HardcodedActionUrl",
          "displayName": "Hardcoded action URL",
          "enabled": false,
          "description": "<html>\n<body>\nHardcoded Struts Action URL.\nReports patterns, where Struts Action URL is made \"by hand\" and suggests to convert using Struts &lt;url&gt;-tag.<br/>\n<br/>\nSample:\n<br/><br/>\n&lt;a href=\"namespace/foo!bar.action?param1=value1&amp;param2=value2\"/&gt;\n<br/><br/>\nwill be replaced with\n<br/><br/>\n&lt;a href=\"&lt;s:url namespace=\"namespace\" action=\"foo\" method=\"bar\"/&gt;<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;s:param name=\"param1\"&gt;value1&lt;/s:param&gt;<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;s:param name=\"param2\"&gt;value2&lt;/s:param&gt;<br/>\n&lt;/s:url&gt;\"/&gt;\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Android Lint: Internationalization",
      "inspections": [
        {
          "shortName": "AndroidLintRtlEnabled",
          "displayName": "Using RTL attributes without enabling RTL support",
          "enabled": false,
          "description": "<html><body>Using RTL attributes without enabling RTL support<br><br>To enable right-to-left support, when running on API 17 and higher, you must set the <code>android:supportsRtl</code> attribute in the manifest <code>&lt;application></code> element.<br/>\n<br/>\nIf you have started adding RTL attributes, but have not yet finished the migration, you can set the attribute to false to satisfy this lint check.<br><br>Issue id: RtlEnabled</body></html>"
        },
        {
          "shortName": "AndroidLintEnforceUTF8",
          "displayName": "Encoding used in resource files is not UTF-8",
          "enabled": false,
          "description": "<html><body>Encoding used in resource files is not UTF-8<br><br>XML supports encoding in a wide variety of character sets. However, not all tools handle the XML encoding attribute correctly, and nearly all Android apps use UTF-8, so by using UTF-8 you can protect yourself against subtle bugs when using non-ASCII characters.<br/>\n<br/>\nIn particular, the Android Gradle build system will merge resource XML files assuming the resource files are using UTF-8 encoding.<br><br>Issue id: EnforceUTF8</body></html>"
        },
        {
          "shortName": "AndroidLintConstantLocale",
          "displayName": "Constant Locale",
          "enabled": false,
          "description": "<html><body>Constant Locale<br><br>Assigning <code>Locale.getDefault()</code> to a constant is suspicious, because the locale can change while the app is running.<br><br>Issue id: ConstantLocale</body></html>"
        },
        {
          "shortName": "AndroidLintByteOrderMark",
          "displayName": "Byte order mark inside files",
          "enabled": false,
          "description": "<html><body>Byte order mark inside files<br><br>Lint will flag any byte-order-mark (BOM) characters it finds in the middle of a file. Since we expect files to be encoded with UTF-8 (see the EnforceUTF8 issue), the BOM characters are not necessary, and they are not handled correctly by all tools. For example, if you have a BOM as part of a resource name in one particular translation, that name will not be considered identical to the base resource's name and the translation will not be used.<br><br>Issue id: ByteOrderMark<br><br><a href=\"http://en.wikipedia.org/wiki/Byte_order_mark\">http://en.wikipedia.org/wiki/Byte_order_mark</a></body></html>"
        },
        {
          "shortName": "AndroidLintSetTextI18n",
          "displayName": "TextView Internationalization",
          "enabled": false,
          "description": "<html><body>TextView Internationalization<br><br>When calling <code>TextView#setText</code><br/>\n* Never call <code>Number#toString()</code> to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using <code>String#format</code> with proper format specifications (<code>%d</code> or <code>%f</code>) instead.<br/>\n* Do not pass a string literal (e.g. \"Hello\") to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.<br/>\n* Do not build messages by concatenating text chunks. Such messages can not be properly translated.<br><br>Issue id: SetTextI18n<br><br><a href=\"http://developer.android.com/guide/topics/resources/localization.html\">http://developer.android.com/guide/topics/resources/localization.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintRtlHardcoded",
          "displayName": "Using left/right instead of start/end attributes",
          "enabled": false,
          "description": "<html><body>Using left/right instead of start/end attributes<br><br>Using <code>Gravity#LEFT</code> and <code>Gravity#RIGHT</code> can lead to problems when a layout is rendered in locales where text flows from right to left. Use <code>Gravity#START</code> and <code>Gravity#END</code> instead. Similarly, in XML <code>gravity</code> and <code>layout_gravity</code> attributes, use <code>start</code> rather than <code>left</code>.<br/>\n<br/>\nFor XML attributes such as paddingLeft and <code>layout_marginLeft</code>, use <code>paddingStart</code> and <code>layout_marginStart</code>. <b>NOTE</b>: If your <code>minSdkVersion</code> is less than 17, you should add <b>both</b> the older left/right attributes <b>as well as</b> the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.<br/>\n<br/>\n(Note: For <code>Gravity#LEFT</code> and <code>Gravity#START</code>, you can use these constants even when targeting older platforms, because the <code>start</code> bitmask is a superset of the <code>left</code> bitmask. Therefore, you can use <code>gravity=\"start\"</code> rather than <code>gravity=\"left|start\"</code>.)<br><br>Issue id: RtlHardcoded</body></html>"
        },
        {
          "shortName": "AndroidLintHardcodedText",
          "displayName": "Hardcoded text",
          "enabled": false,
          "description": "<html><body>Hardcoded text<br><br>Hardcoding text attributes directly in layout files is bad for several reasons:<br/>\n<br/>\n* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)<br/>\n<br/>\n* The application cannot be translated to other languages by just adding new translations for existing string resources.<br/>\n<br/>\nThere are quickfixes to automatically extract this hardcoded string into a resource lookup.<br><br>Issue id: HardcodedText</body></html>"
        },
        {
          "shortName": "AndroidLintRtlCompat",
          "displayName": "Right-to-left text compatibility issues",
          "enabled": false,
          "description": "<html><body>Right-to-left text compatibility issues<br><br>API 17 adds a <code>textAlignment</code> attribute to specify text alignment. However, if you are supporting older versions than API 17, you must <b>also</b> specify a gravity or layout_gravity attribute, since older platforms will ignore the <code>textAlignment</code> attribute.<br><br>Issue id: RtlCompat</body></html>"
        },
        {
          "shortName": "AndroidLintRelativeOverlap",
          "displayName": "Overlapping items in RelativeLayout",
          "enabled": false,
          "description": "<html><body>Overlapping items in RelativeLayout<br><br>If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like <code>toEndOf</code>/<code>toStartOf</code>.<br><br>Issue id: RelativeOverlap</body></html>"
        },
        {
          "shortName": "AndroidLintRtlSymmetry",
          "displayName": "Padding and margin symmetry",
          "enabled": false,
          "description": "<html><body>Padding and margin symmetry<br><br>If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry.<br><br>Issue id: RtlSymmetry</body></html>"
        }
      ]
    },
    {
      "name": "JBoss Seam",
      "inspections": [
        {
          "shortName": "SeamDuplicateComponentsInspection",
          "displayName": "Duplicated component definition",
          "enabled": false,
          "description": "Validate duplicated component definition in seam classes"
        },
        {
          "shortName": "SeamIllegalComponentScopeInspection",
          "displayName": "Illegal component scope",
          "enabled": false,
          "description": "<html>\n<head>\n    <style type=\"text/css\">\n<!--\n    th {font-family:monospace;vertical-align:top;}\n    td {font-family:monospace;text-align:center;}\n-->\n    </style>\n</head>\n<body>\n\nEach type of Seam component supports only specific scopes. <br>\nReports @Scope, @Role and @DataModel annotations that specify an unsupported scope for the specific component. <br> <br>\nThese are the supported scopes for each component type (default scope in bold):\n<table border=\"1\">\n    <tr>\n        <th></th>\n        <th>Stateless<br>Session Bean</th>\n        <th>Stateful<br>Session Bean</th>\n        <th>Entity Bean</th>\n        <th>Java Bean</th>\n    </tr>\n    <tr>\n        <th>STATELESS</th>\n        <td><b>X</b></td>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>x</td>\n    </tr>\n    <tr>\n        <th>EVENT</th>\n        <td>&nbsp;</td>\n        <td>x</td>\n        <td>x</td>\n        <td>x</td>\n    </tr>\n    <tr>\n        <th>PAGE</th>\n        <td>&nbsp;</td>\n        <td>&nbsp;</td>\n        <td>x</td>\n        <td>x</td>\n    </tr>\n    <tr>\n        <th>CONVERSATION</th>\n        <td>&nbsp;</td>\n        <td><b>X</b></td>\n        <td><b>X</b></td>\n        <td><b>X</b></td>\n    </tr>\n    <tr>\n        <th>SESSION</th>\n        <td>&nbsp;</td>\n        <td>x</td>\n        <td>x</td>\n        <td>x</td>\n    </tr>\n    <tr>\n        <th>BUSINESS_PROCESS</th>\n        <td>&nbsp;</td>\n        <td>x</td>\n        <td>x</td>\n        <td>x</td>\n    </tr>\n    <tr>\n        <th>APPLICATION</th>\n        <td>&nbsp;</td>\n        <td>x</td>\n        <td>x</td>\n        <td>x</td>\n    </tr>\n\n</table>\n<br>\n@DataModel context variables have another restriction on their scope:<br>\nIf no scope is specified the scope is the same as for the enclosing component (EVENT if that that component is in STATELESS scope).<br>\nAlternatively it's allowed to specify PAGE scope for data model context variables.<br><br>\n<br>\n</body>\n</html>"
        },
        {
          "shortName": "SeamDomModelInspection",
          "displayName": "Components.xml errors",
          "enabled": false,
          "description": "Validate seam components.xml errors"
        },
        {
          "shortName": "SeamAnnotationIncorrectSignatureInspection",
          "displayName": "Seam annotation incorrect signature",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      This inspection checks for Seam annotations that appear on classes or methods with invalid signatures or fields with invalid type.\n      <br>\n\n      <ul>\n        <li>\n          <strong>@Name</strong><br>\n          @Name is invalid on interfaces or abstract classes. @Name annotation requires a no-argument constructor in the annotated class.\n        </li>\n        <li>\n          <strong>@In</strong><br>\n          Must appear either on a field or on a method that has \"setter-signature\": <span style=\"font-size:larger;font-family:monospace;\">void setUser(User user)</span>\n          <ul>\n            <li>void return type</li>\n            <li>single argument</li>\n            <li>not static</li>\n            <li>name must start with \"set\"</li>\n          </ul>\n        </li>\n        <li>\n          <strong>@Out</strong><br>\n          Must appear either on a field or on a method that has \"getter-signature\": <span style=\"font-size:larger;font-family:monospace;\">User getUser()</span>\n          <ul>\n            <li>non-void return type</li>\n            <li>no arguments</li>\n            <li>not static</li>\n            <li>name must start with \"get\" or optionally \"is\" when return type is \"boolean\"</li>\n          </ul>\n        </li>\n        <li>\n          <strong>@DataModel</strong><br>\n          If annotation is on method, then the method must have \"getter-signature\" (like for @Out annotation).\n          Additionally the type (field type or return type of getter) must be one of:\n          <ul>\n            <li>java.util.List</li>\n            <li>java.util.Set</li>\n            <li>java.util.Map</li>\n          </ul>\n        </li>\n        <li>\n          <strong>@DataModelSelection</strong><br>\n          If annotation is on method, then the method must have \"setter-signature\".\n        </li>\n        <li>\n          <strong>@DataModelSelectionIndex</strong><br>\n          If annotation is on method, then the method must have \"setter-signature\".\n        </li>\n        <li>\n          <strong>@Factory</strong><br>\n          Method that have this signature:\n          <ul>\n            <li>non-void return type</li>\n            <li>either no parameters or a single parameter of class 'org.jboss.seam.Component' (or super type)</li>\n            <li>not static</li>\n          </ul>\n        </li>\n        <li>\n          <strong>@Unwrap</strong><br>\n          Annotated method must have this signature:\n          <ul>\n            <li>non-void return type</li>\n            <li>either no parameters or a single parameter of class 'org.jboss.seam.Component' (or super type)</li>\n            <li>not static</li>\n          </ul>\n        </li>\n        <li>\n          <strong>@Create</strong><br>\n          Annotated method must have this signature:\n          <ul>\n            <li>either no parameters or a single parameter of class 'org.jboss.seam.Component' (or super type)</li>\n            <li>not static</li>\n          </ul>\n        </li>\n        <li>\n          <strong>@Destroy</strong><br>\n          Annotated method must have this signature:\n          <ul>\n            <li>void return type</li>\n            <li>no parameters</li>\n            <li>not static</li>\n          </ul>\n        </li>\n      </ul>\n    </td>\n  </tr>\n</table>\n</body>\n</html>"
        },
        {
          "shortName": "SeamBijectionUndefinedContextVariableInspection",
          "displayName": "Bijection undefined context variables",
          "enabled": false,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n\n      Reports JBoss Seam Dependency Bijection annotations that use context variable names that do not correspond\n      to any defined context variable. <br> <br>\n\n      Context variable that are added programmatically using org.jboss.seam.contexts.Context.set() are not detected and may cause\n      false warnings.\n    </td>\n  </tr>\n</table>\n</body>\n</html>"
        },
        {
          "shortName": "SeamJamComponentInspection",
          "displayName": "@Name annotation errors",
          "enabled": false,
          "description": "Validate @Name annotation errors"
        },
        {
          "shortName": "SeamBijectionIllegalScopeParameterInspection",
          "displayName": "Bijection illegal scope parameter",
          "enabled": false,
          "description": "<html>\n<body>\n<table><tr>\n  <td valign=\"top\">\n\n    This inspection checks for 'scope' parameters in @In and @Out annotations for cases when Seam always uses the scope defined at\n    the component itself:. <br>\n\n    <ul>\n      <li>\n        @In(create=trultaarb dbp;fn\n        e)<br/>\n        When specifying 'create=true', the context variable must belong to a declared Seam component.\n        (else Seam would not know which class to instantiate).<br/>\n        (In other words: When 'create=true' you cannot inject values that are not Seam components.)<br/>\n        Seam always uses the scope defined at the component declaration (the default scope for the component type or the scope defined in\n        @Scope or @Role).<br/>\n      </li>\n      <li>\n        @Out<br/>\n        When @Out is used to outject the value of a declared Seam component, then the scope is always taken from that component.<br/>\n        You can only use @Out(scope=...) when you are not outjecting a Seam component.\n      </li>\n    </ul>\n  </td></tr>\n</table>\n</body>\n</html>"
        },
        {
          "shortName": "PageflowModelInspection",
          "displayName": "Pageflow Model Errors",
          "enabled": false,
          "description": "Pageflow Model Inspection"
        },
        {
          "shortName": "PagesModelInspection",
          "displayName": "Pages Navigation errors (pages.xml)",
          "enabled": false,
          "description": "Pages Navigation Model Inspection"
        },
        {
          "shortName": "SeamAnnotationsInconsistencyInspection",
          "displayName": "Seam annotations inconsistency",
          "enabled": false,
          "description": "This inspection checks for each usage of a Seam annotation if it appears on a valid component type.<br> All Seam annotations are only allowed for classes that are Seam components (except for @Around, @Within, @DataBinderClass and @DataSelectorClass).<br> Additionally many annotations are only valid for specific component types. Most importantly Entity Beans do not support bijection, context demaracation or transaction demarcation.<br> More specifically these are the allowed component types for each Seam\nannotation:\n<table border=\"1\">\n<tr>\n<th>Type</th><th>Annotation</th><th>Stateless<br>Session\nBean</th><th>Stateful<br>Session Bean</th><th>Entity Bean</th><th>Java Bean</th> </tr> <tr> <td>Component<br>Definition</td><td>@Name</td><td>X</td><td>X</td><td>X</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@Scope</td><td>X</td><td>X</td><td>X</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@Role</td><td>X</td><td>X</td><td>X</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@Roles</td><td>X</td><td>X</td><td>X</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@Intercept</td><td>X</td><td>X</td><td>X</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@JndiName</td><td>X</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td>\n</tr>\n<tr>\n<td></td><td>@Startup</td><td>X</td><td>X</td><td>X</td><td>X</td>\n</tr>\n<tr>\n<td>Bijection</td><td>@In</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@Out</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@Unwrap</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@Factory</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@Logger</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@RequestParameter</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td>Lifecycle</td><td>@Create</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@Destroy</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@Observer</td><td>X</td><td>X</td><td>X</td><td>X</td>\n</tr>\n<tr>\n<td>Context<br>Demarcation</td><td>@Begin</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@BeginTask</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@End</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@EndTask</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@StartTask</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@ResumeProcess</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@CreateProcess</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td>Transaction<br>Demarcation</td><td>@Transactional</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@Rollback</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td>Validation</td><td>@IfInvalid</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td>Remoting</td><td>@Remote</td><td>X<br>on local interface</td><td>X<br>on local interface</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td>JSF Data\nTable</td><td>@DataModel</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@DataModelIndex</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@DataModelSelection</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td>Data\nBinding</td><td>@DataBinderClass</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td>\n</tr>\n<tr>\n<td></td><td>@DataSelectorClass</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td>\n</tr>\n</table>\n<style type=\"text/css\">\n<!--\nth {font-family:monospace;vertical-align:top;}\ntd {font-family:monospace;text-align:center;vertical-align:top;}\n-->\n</style>"
        },
        {
          "shortName": "SeamBijectionTypeMismatchInspection",
          "displayName": "Bijection context variables type mismatch",
          "enabled": false,
          "description": "<html>\n<body>\n<table><tr>\n  <td valign=\"top\">\n\n    Reports JBoss Seam Dependency Bijection annotations where the type of the bijected property (field or accessor\n    parameter)\n    does not match the type of the context variable. <br>\n    Example code:\n         <pre>\n            @In(\"loggedInUser\")\n            private User user;</pre>\n    The inspection shows a warning if the context variable \"loggedInUser\" is not assignment compatible to class User (i.e. it must be of\n    class \"User\" or a subclass). <br>\n  </td></tr>\n</table>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JUnit",
      "inspections": [
        {
          "shortName": "JUnit5MalformedParameterized",
          "displayName": "JUnit 5 malformed parameterized test",
          "enabled": false,
          "description": "<html>\n<body>\nReports parameterized tests which have malformed sources:\n<ul>\n  <li>\n    MethodSource has unknown target or method is not static, no-arg\n  </li>\n  <li>\n    ValueSource/EnumSource types are not convertible to method parameters\n  </li>\n  <li>\n    No sources are defined\n  </li>\n</ul>\n<!-- tooltip end -->\n<p>\n  <small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "TestFailedLine",
          "displayName": "Highlight problem line in test",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights failed method calls or assertions in tests.\n</body>\n</html>"
        },
        {
          "shortName": "AssertEqualsCalledOnArray",
          "displayName": "'assertEquals()' called on array",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to JUnit's <b>assertEquals()</b>\nmethod with arguments of type array. Arrays should be checked with one of the\n<b>assertArrayEquals()</b> methods.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MultipleExceptionsDeclaredOnTestMethod",
          "displayName": "Multiple exceptions declared on test method",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit test methods with more than one exception declared in the\n<b>throws</b> clause. Such a\n<b>throws</b> clause can be more concisely declared as:<br>\n<pre><b>throws</b> Exception</pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JUnit3StyleTestMethodInJUnit4Class",
          "displayName": "Old style JUnit test method in JUnit 4 class",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 3 style test methods which are located inside a class\nwhich does not extend the abstract JUnit 3 class <b>TestCase</b> and contains JUnit 4/JUnit 5 <b>@Test</b> annotated methods.\nIn addition to being confusing such test methods will not be run.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "BeforeOrAfterIsPublicVoidNoArg",
          "displayName": "Malformed @Before or @After method",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 4.0 <b>@Before</b> or <b>@After</b> methods\nwhich are not declared\n<b>public</b>, do not return <b>void</b>, or take arguments.\nSuch methods are easy to create inadvertently, but will not be executed by JUnit tests runners.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TestMethodWithoutAssertion",
          "displayName": "JUnit test method without any assertions",
          "enabled": false,
          "description": "<html>\n<body>\nReports test methods of JUnit test case classes that do not contain\nany assertions. Such methods indicate either incomplete or weak test cases.\n<!-- tooltip end -->\n<p>\nUse the table below to specify which combinations of fully qualified class name and method name regular expression\nqualify as assertions.\nClass names also match subclasses.\n<p>\nUse the first checkbox below to specify if Java <b>assert</b> statements, using the <b>assert</b> keyword, should be considered an assertion.\n<p>\nUse the second checkbox to ignore test methods which declare exceptions.\nThis can be useful when you have tests that will throw an exception on failure and thus don't need any assertions.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TestCaseWithNoTestMethods",
          "displayName": "Test class with no tests",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-abstract test cases which do not\ncontain any test methods. Such test cases usually indicate developer error.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to specify that test cases which have super classes with\ntest methods should be ignored by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5MalformedNestedClass",
          "displayName": "JUnit 5 malformed @Nested class",
          "enabled": false,
          "description": "<html>\n<body>\nReports static inner classes annotated with @Nested.\n<!-- tooltip end -->\n<p>\n  <small>New in 2018.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "AssertEqualsMayBeAssertSame",
          "displayName": "'assertEquals()' may be 'assertSame()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>org.junit.Assert.assertEquals()</b>\nor <b>junit.framework.Assert.assertEquals()</b> which\ncan be replaced with an equivalent call to <b>assertSame()</b>.\nThis is possible when the arguments are instances of a final class which does not override\nthe <b>equals()</b> method.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssertsWithoutMessages",
          "displayName": "Message missing on JUnit assertion",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to JUnit <b>assertXXX()</b> or <b>fail()</b> methods that do not have an error message string argument.\nAn error message on assertion failure may help clarify the test case's intent.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssertEqualsBetweenInconvertibleTypes",
          "displayName": "'assertEquals()' between objects of inconvertible types",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to JUnit's <b>assertEquals()</b>\nmethod where the expected result and actual result arguments are of incompatible\ntypes. While such a call might theoretically be useful, most likely it represents a bug.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfObsoleteAssert",
          "displayName": "Usage of obsolete 'junit.framework.Assert' method",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to methods from the <b>junit.framework.Assert</b> class. This class is\nobsolete and the calls can be replaced by calls to methods from the <b>org.junit.Assert</b> class.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JUnit4AnnotatedMethodInJUnit3TestCase",
          "displayName": "JUnit 4 test method in class extending JUnit 3 TestCase",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 4 <b>@Test</b> annotated methods which are located inside a class\nextending the abstract JUnit 3 class <b>TestCase</b>. Mixing JUnit API's like this is\nconfusing and can lead to problems running the tests, for example a method annotated with <b>@Ignore</b> won't\nbe actually ignored if its name starts with test.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TestCaseWithConstructor",
          "displayName": "JUnit TestCase with non-trivial constructors",
          "enabled": false,
          "description": "<html>\n<body>\nReports on JUnit test cases with initialization logic in their constructors. Initialization\nof JUnit test cases should be done in <b>setUp()</b> methods instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParameterizedParametersStaticCollection",
          "displayName": "@RunWith(Parameterized.class) without data provider",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes annotated with @RunWith(Parameterized.<b>class</b>) without\ndata provider method annotated with @Parameterized.Parameters\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExpectedExceptionNeverThrown",
          "displayName": "Expected exception never thrown in test method body",
          "enabled": false,
          "description": "<html>\n<body>\nReports checked exceptions expected by a JUnit 4 test method,\nwhich are never thrown inside the method body.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "StaticSuite",
          "displayName": "'suite()' method not declared 'static'",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit test case classes which contain <b>suite()</b> methods which\nare not declared <b>static</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5Platform",
          "displayName": "@RunWith(JUnitPlatform.class) without test methods",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes annotated with @RunWith(JUnitPlatform.class) which provide no test methods. These classes won't start tests because\norg.junit.vintage.engine.discovery.DefensiveAllDefaultPossibilitiesBuilder.DefensiveAnnotatedBuilder prevents recursion and\norg.junit.vintage.engine.discovery.DefensiveAllDefaultPossibilitiesBuilder.DefensiveJUnit4Builder expects test methods\n<!-- tooltip end -->\n<p>\n  <small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "UnconstructableTestCase",
          "displayName": "Unconstructable JUnit TestCase",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-abstract JUnit test cases which do not\nexpose a public no-arg constructor or a public constructor which takes a single string\nas an argument. Such test cases will be unrunnable by most JUnit test runners, including\nIDEA's.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableJUnitAssertion",
          "displayName": "Simplifiable JUnit assertion",
          "enabled": false,
          "description": "<html>\n<body>\nReports any JUnit <b>assert</b> calls which can be replaced by simpler but equivalent calls.\n<table>\n  <tr><th>Example</th><th>&rarr;</th><th>Replacement</th></tr>\n\n  <tr>\n    <td><code>assertEquals(<b>true</b>, x());</code></td>\n    <td></td>\n    <td><code>assertTrue(x());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(y() != null);</code></td>\n    <td></td>\n    <td><code>assertNotNull(y());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(z == z());</code></td>\n    <td></td>\n    <td><code>assertSame(z, z());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(a.equals(a()));</code></td>\n    <td></td>\n    <td><code>assertEquals(a, a());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(<b>false</b>);</code></td>\n    <td></td>\n    <td><code>fail();</code></td>\n  </tr>\n</table>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantJUnitAssertArgument",
          "displayName": "Constant JUnit assert argument",
          "enabled": false,
          "description": "<html>\n<body>\nReports constant arguments to JUnits assertTrue, assertFalse,\nassertNull and assertNotNull method calls. Calls to these methods with such\nconstant arguments will either always fail or always succeed.\nSuch statements can easily be left over after refactoring and are probably not intended.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TestMethodInProductCode",
          "displayName": "JUnit test method in product source",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 4+ @Test methods in product source trees.\nThis most likely indicates programmer error, and can result in test code being shipped\ninto production.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BeforeClassOrAfterClassIsPublicStaticVoidNoArg",
          "displayName": "Malformed @BeforeClass/@BeforeAll or @AfterClass/@AfterAll method",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 4.0 <b>@BeforeClass</b> or <b>@AfterClass</b> methods\nwhich are not declared\n<b>public</b> and <b>static</b>, do not return <b>void</b>, or take arguments.\nSuch methods are easy to create inadvertently, but will not be executed by JUnit tests runners.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JUnitDatapoint",
          "displayName": "Malformed @DataPoint field",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for any member that is annotated with @DataPoint but is not public or not static.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "TestMethodIsPublicVoidNoArg",
          "displayName": "Malformed test method",
          "enabled": false,
          "description": "<html>\n<body>\nReports any JUnit test methods which are declared <b>static</b>, not declared\n<b>public</b>, do not return\n<b>void</b>, or have parameters.\nSuch test methods are easy to create inadvertently, but will not be executed by\nJUnit test runners.\n<!-- tooltip end -->\n<p>\nUse the table below to specify special annotations.\nAny parameter annotated with one of these annotations will not be reported.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuperTearDownInFinally",
          "displayName": "'super.tearDown()' not called from 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>super.tearDown()</b> calls which are not performed inside a <b>finally</b> block.\nIf there are other method calls in the <b>tearDown()</b> method, which may throw\nan exception before the <b>super.tearDown()</b> call, this may lead to inconsistencies and leaks.\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n</body>\n</html>"
        },
        {
          "shortName": "MigrateAssertToMatcherAssert",
          "displayName": "Assertion expression can be replaced with 'assertThat' method call",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <b>Assert.assertEquals</b>, <b>Assert.assertTrue</b> etc. methods when its can be migrated to <b>Assert.assertThat</b>\n\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5Converter",
          "displayName": "JUnit 4 test can be JUnit 5",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 4 tests which can be automatically converted to JUnit 5. Though default runners are automatically convertable, custom runners, method- and field- rules are not and require manual changes.\nThis inspection requires JUnit 5 library already available on the classpath as well as JDK 1.8 or higher configured for the project.\n<p>\n  <small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "MisorderedAssertEqualsParameters",
          "displayName": "Misordered 'assertEquals()' arguments",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to JUnit <b>assertEquals()</b> which have the expected argument and the actual argument in the wrong order.\nFor JUnit the correct order is <code>(expected, actual)</code>.\nSuch calls will behave fine for assertions which pass, but may give confusing error reports on failure.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5AssertionsConverter",
          "displayName": "Obsolete assertions in JUnit 5 tests",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to methods from the <b>junit.framework.Assert</b>, <b>org.junit.Assert</b>, <b>org.junit.Assume</b> classes inside JUnit 5 tests.\nThough still working, migration to <b>org.junit.jupiter.api.Assertions</b>/<b>org.junit.jupiter.api.Assumptions</b> could avoid dependency on old JUnit version.\n<p>\n  <small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "TestCaseInProductCode",
          "displayName": "JUnit TestCase in product source",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit test cases in product source trees.\nThis most likely indicates programmer error, and can result in test code being shipped\ninto production.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MalformedSetUpTearDown",
          "displayName": "Malformed 'setUp()' or 'tearDown()' method",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit <b>setUp()</b> or <b>tearDown()</b> methods which are not declared\n<b>public</b>, do not return <b>void</b>, or take arguments.\nSuch <b>setUp()</b> or <b>tearDown()</b> methods are easy to create inadvertently,\nand will not be executed by JUnit test runners.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JUnitRule",
          "displayName": "Malformed @Rule/@ClassRule field",
          "enabled": false,
          "description": "<html>\n<body>\nReports malformed @Rule/@ClassRule usages: <br/>\n<ul>\n  <li>\n    Checks for any member that is annotated with @Rule but is not public. \n  </li>\n  <li>\n    Checks for any member that is annotated with @ClassRule but is not public or not static.\n  </li>\n</ul>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "IgnoredJUnitTest",
          "displayName": "JUnit test annotated with '@Ignore'/'@Disabled'",
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit tests which are annotated with @Ignore/@Disabled.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5MalformedRepeated",
          "displayName": "JUnit 5 malformed repeated test",
          "enabled": false,
          "description": "<html>\n<body>\nReports repeated test problems:\n<ul>\n  <li>\n    @Test and @RepeatedTest on the same method\n  </li>\n  <li>\n    RepetitionInfo parameter is used in @BeforeAll/@AfterAll methods\n  </li>\n  <li>\n    RepetitionInfo parameter is used in @BeforeEach/@AfterEach methods in classes with @Test methods\n  </li>\n</ul>\n<!-- tooltip end -->\n<p>\n  <small>New in 2017.2</small>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Flow type checker",
      "inspections": [
        {
          "shortName": "FlowJSCoverage",
          "displayName": "Code is not covered by Flow",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that JavaScript code is covered by the Flow type checker. \nTo use this inspection, the Flow executable must be configured in <em>Settings | Languages & Frameworks | JavaScript</em>\n</body>\n</html>"
        },
        {
          "shortName": "FlowJSFlagCommentPlacement",
          "displayName": "Flow flag is misplaced",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that the <code>// @flow</code> flag is located on the top of the file – otherwise this file will not be checked by Flow.\n</body>\n</html>"
        },
        {
          "shortName": "FlowJSError",
          "displayName": "Flow errors",
          "enabled": false,
          "description": "<html>\n<body>\nReports errors from <b><a href=\"https://flowtype.org/\">Flow</a></b> in Inspect code.\n</body>\n</html>"
        },
        {
          "shortName": "FlowJSConfig",
          "displayName": "Missing .flowconfig",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that there’s a <em>.flowconfig</em> file in the project that covers a JavaScript file with the <code>// @flow</code> flag.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Android Lint: Compliance",
      "inspections": [
        {
          "shortName": "AndroidLintExpiredTargetSdkVersion",
          "displayName": "TargetSdkVersion No Longer Supported",
          "enabled": false,
          "description": "<html><body>TargetSdkVersion No Longer Supported<br><br>As of the second half of 2018, Google Play requires that new apps and app updates target API level 26 or higher.<br/>\n<br/>\nConfiguring your app to target a recent API level ensures that users benefit from significant security and performance improvements, while still allowing your app to run on older Android versions (down to the <code>minSdkVersion</code>).<br/>\n<br/>\nTo update your <code>targetSdkVersion</code>, follow the steps from \"Meeting Google Play requirements for target API level\",<br/>\n<a href=\"https://developer.android.com/distribute/best-practices/develop/target-sdk.html\">https://developer.android.com/distribute/best-practices/develop/target-sdk.html</a><br><br>Issue id: ExpiredTargetSdkVersion<br><br><a href=\"https://support.google.com/googleplay/android-developer/answer/113469#targetsdk\">https://support.google.com/googleplay/android-developer/answer/113469#targetsdk</a><br><a href=\"https://support.google.com/googleplay/android-developer/answer/113469#targetsdk\">https://support.google.com/googleplay/android-developer/answer/113469#targetsdk</a></body></html>"
        },
        {
          "shortName": "AndroidLintExpiringTargetSdkVersion",
          "displayName": "TargetSdkVersion Soon Expiring",
          "enabled": false,
          "description": "<html><body>TargetSdkVersion Soon Expiring<br><br>In the second half of 2018, Google Play will require that new apps and app updates target API level 26 or higher. This will be required for new apps in August 2018, and for updates to existing apps in November 2018.<br/>\n<br/>\nConfiguring your app to target a recent API level ensures that users benefit from significant security and performance improvements, while still allowing your app to run on older Android versions (down to the <code>minSdkVersion</code>).<br/>\n<br/>\nThis lint check starts warning you some months <b>before</b> these changes go into effect if your <code>targetSdkVersion</code> is 25 or lower. This is intended to give you a heads up to update your app, since depending on your current <code>targetSdkVersion</code> the work can be nontrivial.<br/>\n<br/>\nTo update your <code>targetSdkVersion</code>, follow the steps from \"Meeting Google Play requirements for target API level\",<br/>\n<a href=\"https://developer.android.com/distribute/best-practices/develop/target-sdk.html\">https://developer.android.com/distribute/best-practices/develop/target-sdk.html</a><br><br>Issue id: ExpiringTargetSdkVersion<br><br><a href=\"https://support.google.com/googleplay/android-developer/answer/113469#targetsdk\">https://support.google.com/googleplay/android-developer/answer/113469#targetsdk</a></body></html>"
        },
        {
          "shortName": "AndroidLintOutdatedLibrary",
          "displayName": "Outdated Library",
          "enabled": false,
          "description": "<html><body>Outdated Library<br><br>Your app is using an outdated version of a library. This may cause violations of Google Play policies (see <a href=\"https://play.google.com/about/monetization-ads/ads/\">https://play.google.com/about/monetization-ads/ads/</a>) and/or may affect your app&#8217;s visibility on the Play Store.<br/>\n<br/>\nPlease try updating your app with an updated version of this library, or remove it from your app.<br><br>Issue id: OutdatedLibrary</body></html>"
        }
      ]
    },
    {
      "name": "Error handling",
      "inspections": [
        {
          "shortName": "GroovyThrowFromFinallyBlock",
          "displayName": "'throw' inside 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>throw</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such <b>throw</b> statements may mask exceptions thrown, and\ntremendously complicate debugging.\n</body>\n</html>\n"
        },
        {
          "shortName": "ExtendsThrowable",
          "displayName": "Class directly extends 'java.lang.Throwable'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which directly extend <b>java.lang.Throwable</b>.\nIt is generally considered bad practice to extend <b>java.lang.Throwable</b> directly and\nit is usually enough to extend either <b>java.lang.RuntimeException</b> or <b>java.lang.Exception</b> or in special\ncases <b>java.lang.Error</b>.\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "EmptyTryBlock",
          "displayName": "Empty 'try' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <b>try</b> blocks.\n<!-- tooltip end -->\n<p>\nAt present, this inspection is disabled in JSP files.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyUnusedCatchParameter",
          "displayName": "Unused catch parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>catch</b> parameters that are unused in their\ncorresponding blocks. This inspection will not report any <b>catch</b> parameters\nnamed \"ignore\" or \"ignored\".\n</body>\n</html>\n"
        },
        {
          "shortName": "InstanceofCatchParameter",
          "displayName": "'instanceof' on 'catch' parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>instanceof</b> expressions on <b>catch</b> block parameters.\nTesting the type of <b>catch</b> parameters is usually better done by having separate\n<b>catch</b> blocks, rather than <b>instanceof</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BadExceptionDeclared",
          "displayName": "Prohibited exception declared",
          "enabled": false,
          "description": "<html>\n<body>\nReports inappropriate exceptions declared by methods. One use of this inspection would be to warn of\n<b>throws</b> clauses which declare overly generic exceptions (e.g. <b>java.lang.Exception</b> or <b>java.lang.Throwable</b>).\n<!-- tooltip end -->\n<p>\nUse the list below to specify which exceptions should be flagged by this inspection.\n<p>\nUse the checkbox below to ignore exceptions declared on methods which override a library method.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyEmptyTryBlock",
          "displayName": "Empty 'try' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <b>try</b> blocks.\nEmpty <b>try</b> blocks usually indicate coding errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "NonFinalFieldOfException",
          "displayName": "Non-final field of exception class",
          "enabled": false,
          "description": "<html>\n<body>\nReports any fields on subclasses of\n<b>java.lang.Exception</b> which are not declared as\n<b>final</b>. Data on exception objects should not\nbe modified, as it may result in loss of error context for later debugging and\nlogging.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TooBroadThrows",
          "displayName": "Overly broad 'throws' clause",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>throws</b> clauses which contain exceptions which are more generic than the\nexceptions actually thrown by the method.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to have this inspection only warn on the most generic exceptions.\n<p>\nUse the second checkbox below to ignore overly broad <b>throws</b> clauses in methods which override a library method.\n<p>\nUse the third checkbox below to ignore any exceptions which hide other exceptions, but which may be thrown from the method body and thus\nare technically not overly broad.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyContinueOrBreakFromFinallyBlock",
          "displayName": "'continue' or 'break' inside 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> or <b>continue</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such statements are very confusing, may mask exceptions thrown, and\ntremendously complicate debugging.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyEmptyCatchBlock",
          "displayName": "Empty 'catch' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <b>catch</b> blocks. While occasionally intended,\nempty <b>catch</b> blocks can make debugging extremely difficult.\n</body>\n</html>\n"
        },
        {
          "shortName": "FinallyBlockCannotCompleteNormally",
          "displayName": "'finally' block which can not complete normally",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>finally</b> blocks which\ncan not complete normally.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BadExceptionThrown",
          "displayName": "Prohibited exception thrown",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>throw</b> statements\nwhich throw inappropriate exceptions. One use of this inspection would be to warn of\n<b>throw</b> statements which throw overly generic exceptions\n(e.g. <b>java.lang.Exception</b> or <b>java.io.IOException</b>).\n<!-- tooltip end -->\n<p>\nUse the list below to specify which exceptions should be flagged by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThrowCaughtLocally",
          "displayName": "'throw' caught by containing 'try' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>throw</b> statements whose exceptions are always\ncaught by containing <b>try</b> statements. Using <b>throw</b>\nstatements as a \"goto\" to change the local flow of control is both confusing and likely to have poor performance.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThrowsRuntimeException",
          "displayName": "Unchecked exception declared in 'throws' clause",
          "enabled": false,
          "description": "<html>\n<body>\nReports declarations of unchecked exceptions (RuntimeException and its subclasses) in the <b>throws</b> clause of a method.\nDeclaration of unchecked exceptions are not required and may be removed or moved to a Javadoc <b>@throws</b> tag.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ErrorRethrown",
          "displayName": "'java.lang.Error' not rethrown",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>try</b> statements which catch\n<b>java.lang.Error</b> or any subclass and which do not rethrow the error.\nStatements which catch <b>java.lang.ThreadDeath</b> are not\nreported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyReturnFromFinallyBlock",
          "displayName": "'return' inside 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>return</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such <b>return</b> statements may mask exceptions thrown, and\ntremendously complicate debugging.\n</body>\n</html>\n"
        },
        {
          "shortName": "UncheckedExceptionClass",
          "displayName": "Unchecked exception class",
          "enabled": false,
          "description": "<html>\n<body>\nReports unchecked exception classes (i.e. subclasses of <b>RuntimeException</b>).\nCertain coding standards require that all user-defined exception classes be checked.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryInitCause",
          "displayName": "Unnecessary call to 'Throwable.initCause()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>Throwable.initCause()</b> where the exception constructor also takes a <b>Throwable</b> cause argument.\nIn this case the <b>initCause()</b> call can be removed and its argument added to the call to the exception's constructor.\n<!-- tooltip end -->\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "CatchMayIgnoreException",
          "displayName": "Catch block may ignore exception",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>catch</b> blocks which are empty or may ignore exception.\nWhile occasionally intended, empty <b>catch</b> blocks can make debugging extremely difficult.\nAlso ignoring catch parameter could be wrong. Finally it will be reported if it's statically detected\nthat catch block may silently ignore important VM exceptions like <b>NullPointerException</b>. Ignoring such exception\n(without logging or rethrowing it) may hide a bug.\n<p>\n  This inspection will not report any <b>catch</b> parameters named \"ignore\" or \"ignored\".\n  Conversely this inspection will warn on any <b>catch</b> parameters named \"ignore\" or \"ignored\" that are actually used.\n  Also <b>catch</b> parameters named \"expected\" or \"ok\" are not reported inside test sources.\n</p>\n<p>\n  For empty <b>catch</b> blocks an additional fix to generate the <b>catch</b> body is suggested.\n  You can modify the \"Catch Statement Body\" template in\n  <a href=\"settings://fileTemplates\">Settings | Editor | File and Code Templates</a> (see the \"Code\" tab).\n</p>\n  <!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "NewExceptionWithoutArguments",
          "displayName": "Exception constructor called without arguments",
          "enabled": false,
          "description": "<html>\n<body>\nReports exception instance creation without any arguments specified. When an exception is constructed\nwithout arguments it contains no information about the fault that happened, which makes debugging needlessly hard.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ThrowFromFinallyBlock",
          "displayName": "'throw' inside 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>throw</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such <b>throw</b> statements may mask exceptions thrown, and\ntremendously complicate debugging.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ContinueOrBreakFromFinallyBlock",
          "displayName": "'continue' or 'break' inside 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>break</b> or <b>continue</b> statements\ninside of <b>finally</b>\nblocks. While occasionally intended, such statements are very confusing, may mask exceptions thrown, and\ntremendously complicate debugging.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExceptionFromCatchWhichDoesntWrap",
          "displayName": "'throw' inside 'catch' block which ignores the caught exception",
          "enabled": false,
          "description": "<html>\n<body>\nReports exceptions constructed and thrown\nfrom inside <b>catch</b> blocks, which do not \"wrap\" the caught\nexception. It is considered good practice when throwing an exception in response to an exception\nto wrap the initial exception, so that valuable context information\nsuch as stack frames and line numbers are not lost.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to indicate if the inspection should ignore exceptions which\nreceive the result of a method call on the original exception, such as <b>getMessage()</b>,\nas an argument.\n<p>\nUse the second checkbox below to have this inspection ignore throw statements which throw exceptions which do not have a\nconstructor which accepts a <b>Throwable</b> cause.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadDeathRethrown",
          "displayName": "'java.lang.ThreadDeath' not rethrown",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>try</b> statements which catch\n<b>java.lang.ThreadDeath</b> which do not rethrow the exception.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NestedTryStatement",
          "displayName": "Nested 'try' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports nested <b>try</b> statements. Nested <b>try</b> statements\nmay result in confusing code, and should probably have their <b>catch</b> and <b>finally</b> sections\nmerged.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EmptyFinallyBlock",
          "displayName": "Empty 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <b>finally</b> blocks. Empty <b>finally</b> blocks\nusually indicate coding errors.\n<!-- tooltip end -->\n<p>\nAt present, this inspection is disabled in JSP files.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TooBroadCatch",
          "displayName": "Overly broad 'catch' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>catch</b> blocks which have parameters which are more generic than the\nexceptions thrown by the corresponding <b>try</b> block.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to have this inspection only warn on the most generic exceptions.\n<p>\nUse the second checkbox below to ignore any exceptions which hide other exceptions, but which may be thrown and thus\nare technically not overly broad.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CaughtExceptionImmediatelyRethrown",
          "displayName": "Caught exception is immediately rethrown",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>catch</b> block where\nthe caught exception is immediately rethrown, without performing any action on it.\nSuch <b>catch</b> blocks are unnecessary or lack error\nhandling.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CheckedExceptionClass",
          "displayName": "Checked exception class",
          "enabled": false,
          "description": "<html>\n<body>\nReports checked exception classes (i.e. subclasses of <b>Exception</b> which are\nnot also subclasses of <b>RuntimeException</b>). Certain coding standards require that all user-defined exception\nclasses be unchecked.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NullThrown",
          "displayName": "'null' thrown",
          "enabled": false,
          "description": "<html>\n<body>\nReports any null literals which are used as the argument for a throw statement.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "BadExceptionCaught",
          "displayName": "Prohibited exception caught",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>catch</b> clauses\nwhich catch inappropriate exceptions. Some exceptions, for instance\n<b>java.lang.NullPointerException</b> and\n<b>java.lang.IllegalMonitorStateException</b> represent programming errors\nand so should almost certainly not be caught in production code.\n<!-- tooltip end -->\n<p>\nUse the list below to specify which exceptions should be flagged by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyEmptyFinallyBlock",
          "displayName": "Empty 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <b>finally</b> blocks.\nEmpty <b>finally</b> blocks usually indicate coding errors.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReturnFromFinallyBlock",
          "displayName": "'return' inside 'finally' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>return</b> statements inside of <b>finally</b>\nblocks. While occasionally intended, such <b>return</b> statements may mask exceptions thrown, and\ntremendously complicate debugging.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Declaration",
      "inspections": [
        {
          "shortName": "GrMethodMayBeStatic",
          "displayName": "Method may be static",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods which may safely be made <b>static</b>. A method may be static if it is not synchronized, it does not\nreference any of its class' non static methods and non static fields and is not overridden in a sub class.\nUse the checkboxes below to inspect only <b>private</b> or <b>final methods</b>, which increases the performance of this inspection and to\nignore empty methods.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Threading issues",
      "inspections": [
        {
          "shortName": "NotifyWithoutCorrespondingWait",
          "displayName": "'notify()' without corresponding 'wait()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>Object.notify()</b>\nor <b>Object.notifyAll()</b>\nfor which no call to a corresponding <b>Object.wait()</b>\ncan be found. Only calls which target fields of the current class are reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticInitializerReferencesSubClass",
          "displayName": "Static initializer references subclass",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that refer to their own subclasses in their static initializers or in static fields.\nSuch references can cause JVM-level deadlocks in multithreaded environment, when one thread tries to load superclass\nand another thread tries to load subclass at the same time.\n</body>\n</html>"
        },
        {
          "shortName": "AtomicFieldUpdaterNotStaticFinal",
          "displayName": "AtomicFieldUpdater field not declared 'static final'",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields of type <b>java.util.concurrent.atomic.AtomicLongFieldUpdater</b>,\n<b>java.util.concurrent.atomic.AtomicIntegerFieldUpdater</b> or <b>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</b>\nthat are not <b>static final</b>. Because only one atomic field updater is needed for updating a <b>volatile</b> field in all instances\nof a class, it can almost always be <b>static</b>.\nMaking the updater <b>final</b>, allows the JVM to optimize access for improved performance.\n<!-- tooltip end -->\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "ThreadRun",
          "displayName": "Call to 'Thread.run()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>run()</b> on <b>java.lang.Thread</b> or any of its subclasses.\nWhile occasionally intended, this is usually a mistake, with <b>start()</b> intended instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyEmptySyncBlock",
          "displayName": "Empty 'synchronized' block",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>synchronized</b> statements\nwith empty bodies. While theoretically this may be the semantics intended, this construction is\nconfusing, and often the result of a typo.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNotifyWhileNotSynchronized",
          "displayName": "'notify()' or 'notifyAll()' while not synced",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>notify()</b> not made inside a corresponding synchronized\nstatement or synchronized method. Calling <b>notify()</b> on an object\nwithout holding a lock on that object will result in an <b>IllegalMonitorStateException</b> being thrown.\nSuch a construct is not necessarily an error, as the necessary lock may be acquired before\nthe containing method is called, but it's worth looking at.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAccessToStaticFieldLockedOnInstance",
          "displayName": "Access to static field locked on instance data",
          "enabled": false,
          "description": "<html>\n<body>\nReports accesses to static fields of any non-thread-safe type specified below,\nwhich is accessed from an instance field or a non-synchronized block. It is possible that the static\nfield is accessed from multiple threads, which can lead to unspecified side effects.\n</body>\n</html>\n"
        },
        {
          "shortName": "SynchronizationOnGetClass",
          "displayName": "Synchronization on 'getClass()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronization on a call to <b>getClass()</b>.\nIf the class containing the synchronization is subclassed, the subclass will synchronize on a different class object.\nUsually the call to <b>getClass()</b> can be replaced with a class literal expression, for example <b>String.class</b>.\nAn even better solution is synchronizing on a <b>private static final</b> lock object, access to which can be completely controlled.\n<!-- tooltip end -->\n<p>\n<small>New in 2016.2</small>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyWaitCallNotInLoop",
          "displayName": "'wait()' not in loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>wait()</b> not made inside a loop. <b>wait()</b> is normally\nused to suspend a thread until a condition is true, and that condition should be checked after the <b>wait()</b>\nreturns. A loop is the clearest way to achieve this.\n</body>\n</html>\n"
        },
        {
          "shortName": "SharedThreadLocalRandom",
          "displayName": "'ThreadLocalRandom' instance might be shared",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>java.util.concurrent.ThreadLocalRandom</b> instances which might be shared between threads.\nA <b>ThreadLocalRandom</b> might be shared between threads and is reported when it is assigned to a field,\nused as a method argument or assigned to a local variable and used in anonymous or nested classes.\nA <b>ThreadLocalRandom</b> should not be shared between threads because that is not thread-safe.\n<p>\nUsages of <b>ThreadLocalRandom</b> should typically look like <b>ThreadLocalRandom.current().nextInt(...)</b>\n(or <b>nextDouble(...)</b> etc.).\nWhen all usages are in this form, <b>ThreadLocalRandom</b> instances can not be used accidentally by multiple threads.\n<!-- tooltip end -->\n<p>\nUse the table below to specify methods that are safe to pass a <b>ThreadLocalRandom</b> to, as an argument.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NotifyCalledOnCondition",
          "displayName": "'notify()' or 'notifyAll()' called on 'java.util.concurrent.locks.Condition' object",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>notify()</b>\nor <b>notifyAll()</b> on an object\nof class <b>java.util.concurrent.locks.Condition()</b>.\nIt is almost certain that <b>signal()</b> or\n<b>signalAll()</b> was intended instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizeOnThis",
          "displayName": "Synchronization on 'this'",
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronization on <b>this</b> or <b>class</b> expressions.\nConstructs reported include <b>synchronized</b> blocks, and calls to <b>wait()</b>,\n<b>notify()</b> or <b>notifyAll()</b>.\n<p>\nThere are several reasons synchronization on this or class expressions may be a bad idea:\nFirst, it makes synchronization part of the external interface of the class.\nThis makes a future change to a different locking mechanism difficult.\nSecond, it makes it hard to track just who is locking on a given object.\nAnd third , it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing.\n\n<p>As an alternative, consider\nsynchronizing on a <b>private final</b> lock object, access to which can be completely controlled.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizedMethod",
          "displayName": "'synchronized' method",
          "enabled": false,
          "description": "<html>\n<body>\nReports use of the <b>synchronized</b> modifier on methods.\nThere are several reasons a <b>synchronized</b> modifier on a method may be a bad idea:\nFirst, as a rule as little work as possible should be performed under a lock.\nTherefore it is often better to use a <b>synchronized</b> statement and move as much of the methods code outside the\n<b>synchronized</b> region.\nSecond, it makes synchronization part of the external interface of the class.\nThis makes a future change to a different locking mechanism difficult.\nThird, it makes it hard to track just who is locking on a given object.\nAnd fourth, it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing.\n\n<p>\nAs an alternative, consider\nsynchronizing on a <b>private final</b> lock object, access to which can be completely controlled.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitNotInLoop",
          "displayName": "'wait()' not in loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>wait()</b> not made inside a loop. <b>wait()</b> is normally\nused to suspend a thread until a condition is true, and that condition should be checked after the <b>wait()</b>\nreturns. A loop is the clearest way to achieve this.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizedOnLiteralObject",
          "displayName": "Synchronization on an object initialized with a literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>synchronized</b>\nblock which locks on an object which is initialized with a literal.\nString literals are interned and Character, Boolean and Number literals can be allocated from a cache.\nBecause of this, it is possible that some other part of the system\nwhich uses an object initialized with the same literal, is actually holding a\nreference to the exact same object. This can create unexpected dead-lock situations,\nif the lock object was thought to be private.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to warn on any synchronization on String, Character, Boolean and Number objects.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CallToNativeMethodWhileLocked",
          "displayName": "Call to a native method while locked",
          "enabled": false,
          "description": "<html>\n<body>\nReports any to methods declared <b>native</b> while in\na synchronized block or method. While not necessarily representing a problem, such calls cause\nan expensive context switch, and are best kept out of synchronized contexts, if possible.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadStartInConstruction",
          "displayName": "Call to 'Thread.start()' during object construction",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>start()</b> on <b>java.lang.Thread</b>\nor any of its subclasses during object construction. While occasionally useful, this construct should be avoided due\nto inheritance issues. Subclasses of a class which launches a thread during object construction will not have finished\nany initialization logic of their own before the thread has launched.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyThreadStopSuspendResume",
          "displayName": "Call to Thread.stop(), Thread.suspend(), or Thread.resume()",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>Thread.stop()</b>,<b>Thread.suspend()</b>, or <b>Thread.resume()</b>.\nThese calls are inherently prone to data corruption and deadlock, and their use is strongly\ndiscouraged.\n</body>\n</html>\n"
        },
        {
          "shortName": "SleepWhileHoldingLock",
          "displayName": "Call to 'Thread.sleep()' while synchronized",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.lang.Thread.sleep()</b> that occur while\nwithin a <b>synchronized</b> block or method. Sleeping\nwhile synchronized may result in decreased performance, poor scalability, and possibly\neven deadlocking. Consider using <b>wait</b> instead,\nas it will release the lock held.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ObjectNotify",
          "displayName": "Call to 'notify()' instead of 'notifyAll()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>notify()</b>. While occasionally useful, in almost all cases\n<b>notifyAll()</b> is a better choice. See Doug Lea's <I>Concurrent Programming in Java</I> for a discussion.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizationOnStaticField",
          "displayName": "Synchronization on 'static' field",
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronization on static fields. While not strictly incorrect,\nsynchronization on static fields can lead to bad performance because of contention.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "SignalWithoutCorrespondingAwait",
          "displayName": "'signal()' without corresponding 'await()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>Condition.signal()</b>\nor <b>Condition.signalAll()</b>\nfor which no call to a corresponding <b>Condition.await()</b>\ncan be found. Only calls which target fields of the current class are reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NestedSynchronizedStatement",
          "displayName": "Nested 'synchronized' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports nested <b>synchronized</b> statements. Nested <b>synchronized</b> statements\nare either redundant (if the lock objects are identical) or prone to deadlock.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AccessToNonThreadSafeStaticFieldFromInstance",
          "displayName": "Non-thread-safe static field access",
          "enabled": false,
          "description": "<html>\n<body>\nReports access to <b>static</b> fields that are of a non-thread-safe type.\nWhen this access is from an instance field or a non-synchronized block,\nit is possible that the static field is accessed from multiple threads.\nThis can lead to unspecified side effects, like exceptions and incorrect results.\n<!-- tooltip end -->\n<p>\nUse the table below to specify which types are not thread-safe.\nOnly fields with these exact types or initialized with these exact types are reported,\nbecause there may exist thread-safe subclasses of these types.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizeOnLock",
          "displayName": "Synchronization on a Lock object",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>synchronized</b>\nblock which locks on an instance of <b>java.util.concurrent.locks.Lock</b>.\nSuch synchronization is almost certainly inadvertent, and appropriate versions of <b>.lock()</b>\nand <b>.unlock()</b> should be used instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitWhileHoldingTwoLocks",
          "displayName": "'wait()' while holding two locks",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>.wait()</b>\nbeing called while the current thread is holding two locks. Since the call to <b>.wait()</b>\nonly frees locks on the its target, waiting with two locks held can easily lead to deadlock.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyBusyWait",
          "displayName": "Busy wait",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.lang.Thread.sleep()</b> that occur inside loops. Such calls\nare indicative of \"busy-waiting\". Busy-waiting is often inefficient, and may result in unexpected deadlocks\nas busy-waiting threads do not release locked resources.\n</body>\n</html>\n"
        },
        {
          "shortName": "BusyWait",
          "displayName": "Busy wait",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>java.lang.Thread.sleep()</b> that occur inside loops. Such calls\nare indicative of \"busy-waiting\". Busy-waiting is often inefficient, and may result in unexpected deadlocks\nas busy-waiting threads do not release locked resources.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyNestedSynchronizedStatement",
          "displayName": "Nested 'synchronized' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports nested <b>synchronized</b> statements. Nested <b>synchronized</b> statements\nare either redundant (if the lock objects are identical) or prone to deadlock.\n</body>\n</html>\n"
        },
        {
          "shortName": "SynchronizationOnLocalVariableOrMethodParameter",
          "displayName": "Synchronization on local variable or method parameter",
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronization on a local variable or parameter.\nIt is very difficult to guarantee correctness when such synchronization is used.\nIt may be possible to improve code like this by controlling access through e.g. a synchronized wrapper class,\nor by synchronizing on a field.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "WaitOrAwaitWithoutTimeout",
          "displayName": "'wait()' or 'await()' without timeout",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>Object.wait()</b> or <b>Condition.await()</b> which\ndoes not specify a timeout. Such calls may be dangerous in high-availability programs, as failures in one\ncomponent may result in blockages of the waiting component,\nif <b>notify()</b>/<b>notifyAll()</b>\nor <b>signal()</b>/<b>signalAll()</b> never\nget called.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnconditionalWait",
          "displayName": "Unconditional 'wait()' call",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>.wait()</b>\nbeing called unconditionally within a synchronized context.\nNormally, <b>.wait()</b> is\nused to block a thread until some condition is true. If <b>.wait()</b>\nis called unconditionally, that often indicates that the condition was checked before a lock was\nacquired. In that case a data race may occur, with the condition becoming true between the time\nit was checked and the time the lock was acquired. While constructs found by this inspection\nare not necessarily incorrect, they are certainly worth examining.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitCalledOnCondition",
          "displayName": "'wait()' called on 'java.util.concurrent.locks.Condition' object",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>wait()</b>\nmade on a <b>java.util.concurrent.locks.Condition</b>\nobject. This is probably a programming error, and some variant of the\n<b>await()</b> method was intended instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadYield",
          "displayName": "Call to 'Thread.yield()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>Thread.yield()</b>.\n<b>Thread.yield()</b> has no useful guaranteed semantics,\nand is often used by inexperienced programmers to mask race conditions.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadWithDefaultRunMethod",
          "displayName": "Instantiating a Thread with default 'run()' method",
          "enabled": false,
          "description": "<html>\n<body>\nReports Thread instances being created without specifying\na Runnable parameter or overriding the run() method. Such threads do nothing\nuseful.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadStopSuspendResume",
          "displayName": "Call to 'Thread.stop()', 'suspend()' or 'resume()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>Thread.stop()</b>,\n<b>Thread.suspend()</b>, or <b>Thread.resume()</b>.\nThese calls are inherently prone to data corruption and deadlock, and their use is strongly\ndiscouraged.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ThreadLocalNotStaticFinal",
          "displayName": "ThreadLocal field not declared static final",
          "enabled": false,
          "description": "<html>\n<body>\nReports fields of type <b>java.lang.ThreadLocal</b> which are not declared <b>static final</b>.\nIn the most common case a <b>java.lang.ThreadLocal</b> instance\nassociates state with a thread. A non-static non-final\n<b>java.lang.ThreadLocal</b> field associates state with\nan instance-thread combination. This is seldom necessary and often a bug\nwhich can cause memory leaks and possibly incorrect behavior.\n<!-- tooltip end -->\n<p>\nThis inspection has a quick fix to make the field <b>static final</b>\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WhileLoopSpinsOnField",
          "displayName": "'while' loop spins on field",
          "enabled": false,
          "description": "<html>\n<body>\nReports on <b>while</b> loops which spin on the\nvalue of a non-volatile field, waiting for it to be changed by another thread.\n<p>\nIn addition to being potentially extremely CPU intensive when little work is done inside the loop, such\nloops are likely have different semantics than intended, as the Java Memory Model allows such field accesses\nto be hoisted out of the loop, causing the loop to never complete even if another thread does change the\nfield's value.\n</p>\n<p>\n  Additionally since Java 9 it's recommended to call <code>Thread.onSpinWait()</code> inside spin loop\n  on a volatile field which may significantly improve performance on some hardware.\n</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyUnconditionalWait",
          "displayName": "Unconditional 'wait' call",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>wait()</b>\nbeing called unconditionally within a synchronized context.\nNormally, <b>wait()</b> is\nused to block a thread until some condition is true. If <b>wait()</b>\nis called unconditionally, that often indicates that the condition was checked before a lock was\nacquired. In that case a data race may occur, with the condition becoming true between the time\nit was checked and the time the lock was acquired. While constructs found by this inspection\nare not necessarily incorrect, they are certainly worth examining.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyWaitWhileNotSynchronized",
          "displayName": "'wait()' while not synced",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>wait()</b> not made inside a corresponding synchronized\nstatement or synchronized method. Calling <b>wait()</b> on an object\nwithout holding a lock on that object will result in an <b>IllegalMonitorStateException</b> being thrown.\nSuch a construct is not necessarily an error, as the necessary lock may be acquired before\nthe containing method is called, but its worth looking at.\n</body>\n</html>\n"
        },
        {
          "shortName": "EmptySynchronizedStatement",
          "displayName": "Empty 'synchronized' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>synchronized</b> statements\nhaving empty bodies. While theoretically this may be the semantics intended, this construction is\nconfusing, and often the result of a typo.\n<!-- tooltip end -->\n<p>\nAt present, this inspection is disabled in JSP files.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FieldAccessedSynchronizedAndUnsynchronized",
          "displayName": "Field accessed in both synchronized and unsynchronized contexts",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-final fields which are accessed in both synchronized and\nunsynchronized contexts. Volatile fields and accesses in constructors and initializers are ignored by this\ninspection. Such \"partially synchronized\" access is often the result of a coding oversight, and may\nresult in unexpectedly inconsistent data structures.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to specify if simple getters and setters are counted as accesses too.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovySynchronizationOnThis",
          "displayName": "Synchronization on 'this'",
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronization which uses <b>this</b> as its lock\nexpression. Constructs reported include <b>synchronized</b>\nblocks which lock <b>this</b>, and calls to <b>wait()</b>\n<b>notify()</b> or <b>notifyAll()</b> which target <b>wait()</b>.\nSuch constructs, like synchronized methods, make it hard to track just who is locking on a given\nobject, and make possible \"denial of service\" attacks on objects. As an alternative, consider\nlocking on a private instance variable, access to which can be completely controlled.\n</body>\n</html>\n"
        },
        {
          "shortName": "DoubleCheckedLocking",
          "displayName": "Double-checked locking",
          "enabled": false,
          "description": "<html>\n<body>\nReports the double-checked locking construct. For a\ndiscussion of double-checked locking and why it is unsafe, see\n<a href = \"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\n\">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore double-checked locking on <b>volatile</b> fields. Using\na <b>volatile</b> field for double-checked locking works correctly on virtual machines which\nimplement the Java Memory Model.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConditionSignal",
          "displayName": "Call to 'signal()' instead of 'signalAll()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>java.util.concurrent.locks.signal()</b>. While occasionally useful, in almost all cases\n<b>signalAll()</b> is a better and safer choice.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyPublicFieldAccessedInSynchronizedContext",
          "displayName": "Non-private field accessed in synchronized context",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>final</b>, non-<b>private</b> fields which are accessed in a synchronized context.\nA non-private field cannot be guaranteed to always be accessed in a synchronized manner, and such \"partially synchronized\"\naccess may result in unexpectedly inconsistent data structures. Accesses in constructors an initializers are ignored\nfor purposes of this inspection.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySystemRunFinalizersOnExit",
          "displayName": "Call to System.runFinalizersOnExit()",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>System.runFinalizersOnExit()</b>.\nThis call is one of the most dangerous in the Java language. It is inherently non-thread-safe,\nmay result in data corruption, deadlock, and may affect parts of the program far removed from it's call point.\nIt is deprecated, and it's use strongly discouraged.\n</body>\n</html>\n"
        },
        {
          "shortName": "SynchronizeOnNonFinalField",
          "displayName": "Synchronization on a non-final field",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>synchronized</b> statements where the lock expression\nis a reference to a non-<b>final</b> field. Such statements are unlikely to have useful semantics, as different\nthreads may be locking on different objects even when operating on the same object.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "VolatileArrayField",
          "displayName": "Volatile array field",
          "enabled": false,
          "description": "<html>\n<body>\nReports array fields\nwhich are declared as <b>volatile</b>. Such fields\nmay be confusing, as accessing the array itself follows the rules for <b>volatile</b>\nfields, but accessing the array's contents does not. If such volatile access is needed to array contents,\nthe JDK5.0 <b>java.util.concurrent.atomic</b> classes should be used instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NakedNotify",
          "displayName": "'notify()' or 'notifyAll()' without corresponding state change",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>.notify()</b> or\n<b>.notifyAll()</b> being called without any detectable state change occurring.\nNormally, <b>.notify()</b> and <b>.notifyAll()</b> are\nused to inform other threads that a state change has occurred. That state change should occur in a synchronized\ncontext that contains the <b>.notify()</b> or\n<b>.notifyAll()</b> call, and prior to the call. While not having such a state change\nisn't necessarily incorrect, it is certainly worth examining.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovySynchronizedMethod",
          "displayName": "Synchronized method",
          "enabled": false,
          "description": "<html>\n<body>\nReports the <b>synchronized</b> modifier on methods. Some coding standards\nprohibit the use of the <b>synchronized</b> modifier, in favor of <b>synchronized</b> statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "AtomicFieldUpdaterIssues",
          "displayName": "AtomicFieldUpdater issues",
          "enabled": false,
          "description": "<html>\n<body>\nReports issues on fields of type <b>java.util.concurrent.atomic.AtomicLongFieldUpdater</b>,\n<b>java.util.concurrent.atomic.AtomicIntegerFieldUpdater</b> or <b>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</b>.\nThe issues reported are identical to the runtime problems that can happen with atomic field updaters:\nspecified field not found, specified field not accessible, specified field of the wrong type, etc.\n\n<!-- tooltip end -->\n<p>\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "ThreadPriority",
          "displayName": "Call to 'Thread.setPriority()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>Thread.setPriority()</b>.\nModifying priorities of threads is an inherently non-portable operation, as no guarantees\nare given in the Java specification of how priorities are used in scheduling threads, or even\nif they are used at all.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AccessToStaticFieldLockedOnInstance",
          "displayName": "Access to static field locked on instance data",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any access to a non-constant <b>static</b> field which is\nlocked on either <b>this</b> or an instance field of <b>this</b>.\nLocking a <b>static</b> field on instance data does not prevent the field from being\nmodified by other instances, and thus may result in surprising race conditions.\n<!-- tooltip end -->\n<p>\nUse the table below to specify classes to ignore. Any static fields of the types specified will be ignored by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicFieldAccessedInSynchronizedContext",
          "displayName": "Non-private field accessed in synchronized context",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-final, non-private fields which are accessed in a synchronized context.\nA non-private field cannot be guaranteed to always be accessed in a synchronized manner, and such \"partially synchronized\"\naccess may result in unexpectedly inconsistent data structures.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MethodMayBeSynchronized",
          "displayName": "Method with synchronized block could be synchronized method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods of which the body is contained in a single\n<b>synchronized</b> statement. The lock expression\nfor this <b>synchronized</b> statement must be\nequal to <b>this</b> for instance methods\nor ClassName.<b>class</b> for static methods. In\nsuch cases the synchronized statements may be replaced by their contents and the\ncontaining method marked <b>synchronized</b>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SystemRunFinalizersOnExit",
          "displayName": "Call to 'System.runFinalizersOnExit()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>System.runFinalizersOnExit()</b>.\nThis call is one of the most dangerous in the Java language. It is inherently non-thread-safe,\nmay result in data corruption, deadlock, and may affect parts of the program far removed from its call point.\nIt is deprecated, and its use strongly discouraged.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovySynchronizationOnNonFinalField",
          "displayName": "Synchronization on non-final field",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>synchronized</b> statements where the lock expression\nis a non-<b>final</b> field. Such statements are unlikely to have useful semantics, as different\nthreads may be locking on different objects even when operating on the same object.\n</body>\n</html>\n"
        },
        {
          "shortName": "AwaitWithoutCorrespondingSignal",
          "displayName": "'await()' without corresponding 'signal()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>Condition.signal()</b>\nor <b>Condition.signalAll()</b>\nfor which no call to a corresponding <b>Condition.await()</b>\ncan be found. Only calls which target fields of the current class are reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyUnsynchronizedMethodOverridesSynchronizedMethod",
          "displayName": "Unsynchronized method overrides synchronized method",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>synchronized</b>methods overriding <b>synchronized</b> methods.\n</body>\n</html>\n"
        },
        {
          "shortName": "WaitWithoutCorrespondingNotify",
          "displayName": "'wait()' without corresponding 'notify()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>Object.wait()</b>\nfor which no call to a corresponding <b>Object.notify()</b> or\n<b>Object.notifyAll()</b>\ncan be found. Only calls which target fields of the current class are reported by this inspection.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSynchronizedMethodOverridesSynchronizedMethod",
          "displayName": "Unsynchronized method overrides synchronized method",
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<b>synchronized</b>\nmethods overriding <b>synchronized</b> methods.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonAtomicOperationOnVolatileField",
          "displayName": "Non-atomic operation on volatile field",
          "enabled": false,
          "description": "<html>\n<body>\nReports any non-atomic operations on <b>volatile</b> fields. Non-atomic\noperations on <b>volatile</b> fields are operations where the field is read and\nthe value is used to update the field. It is possible for the value of the\nfield to change between the read and the write, possibly invalidating the operation.\nThe non-atomic operation can be avoided by surrounding it with a synchronized block or\nby making use of one of the classes from the <b>java.util.concurrent.atomic</b> package.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyWhileLoopSpinsOnField",
          "displayName": "While loop spins on field",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>while</b> loops which spin on the\nvalue of a non-<b>volatile</b> field, waiting for it to be changed by another thread. In addition to being potentially\nextremely CPU intensive when little work is done inside the loop, such\nloops are likely have different semantics than intended, as the Java Memory Model allows such field accesses\nto be hoisted out of the loop, causing the loop to never complete even if another thread does change the\nfield's value.\n</body>\n</html>\n"
        },
        {
          "shortName": "AwaitNotInLoop",
          "displayName": "'await()' not in loop",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>java.util.concurrent.locks.Condition.await()</b> not made inside a loop.\n<b>await()</b> and related methods are normally\nused to suspend a thread until a condition is signalled as true, and that condition should be checked after the <b>await()</b>\nreturns. A loop is the clearest way to achieve this.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovySynchronizationOnVariableInitializedWithLiteral",
          "displayName": "Synchronization on variable initialized with literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronized blocks which lock on an object which is initialized with a\nliteral. String literals are interned and <b>Number</b> literals can be allocated from a cache. Because of\nthis, it is possible that some other part of the system which uses an object initialized with the same\nliteral, is actually holding a reference to the exact same object. This can create unexpected dead-lock\nsituations, if the string was thought to be private.\n</body>\n</html>\n"
        },
        {
          "shortName": "ExtendsThread",
          "displayName": "Class directly extends 'java.lang.Thread'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any classes which directly extend <b>java.lang.Thread</b>.\nIt is usually thought better practice to delegate to rather than extend\n<b>java.lang.Thread</b>, so that a thread creator may exert better\ncontrol over the thread's behavior, and to better localize all concurrency related operations.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitNotifyNotInSynchronizedContext",
          "displayName": "'wait()' or 'notify()' while not synchronized",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any call to <b>wait()</b>, <b>notify()</b> or <b>notifyAll()</b> not made inside a corresponding synchronized\nstatement or synchronized method. Calling <b>wait()</b>, <b>notify()</b> or <b>notifyAll()</b> on an object\nwithout holding a lock on that object will result in an <b>IllegalMonitorStateException</b> being thrown.\nSuch a construct is not necessarily an error, as the necessary lock may be acquired before\nthe containing method is called, but its worth looking at.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SafeLock",
          "displayName": "Lock acquired but not safely unlocked",
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>java.util.concurrent.locks.Lock</b> resource which is not acquired in front of a\n<b>try</b> block and unlocked in the corresponding <b>finally</b> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "GroovyDoubleCheckedLocking",
          "displayName": "Double-checked locking",
          "enabled": false,
          "description": "<html>\n<body>\nReports double-checked locking. For a\ndiscussion of double-checked locking and why it is unsafe, see\n<a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\n\">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>\n\n<p>\n Use the checkbox below to ignore double-checked locking on volatile fields. Using\n a volatile field for double-checked locking works correctly on Java 5 virtual machines,\n but probably does not have any performance advantages over plain full synchronization\n of the accessor method.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Faces Model",
      "inspections": [
        {
          "shortName": "JsfManagedBeansInconsistencyInspection",
          "displayName": "Managed Beans configuration errors",
          "enabled": false,
          "description": "Managed Beans Configuration Errors"
        },
        {
          "shortName": "FacesModelInspection",
          "displayName": "Faces Model Inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection lets you spot the following problems that might occur in your\nJava Server Faces configuration files:\n\n<li>References to the non-instantiable classes\n<li>References to the classes that do not extend required class\n<li>References to classes with inappropriate scope\n<li>Empty tag and attribute values\n<li>Tag and attribute values that do not match required pattern (e.g. Java Identifiers)\n<li>Tags that do not include required children tags or attributes\n<li>Tags that define objects with duplicate names\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Cloning issues",
      "inspections": [
        {
          "shortName": "CloneInNonCloneableClass",
          "displayName": "'clone()' method in non-Cloneable class",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which override the\n<b>clone()</b> method, but which do not implement the <b>Cloneable</b> interface.\nThis usually represents a programming error.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate if this inspection should only warn on <b>public</b> methods.\nClasses designed for inheritance may choose to override <b>clone</b>() and declare it <b>protected</b>\nwithout implementing <b>Cloneable</b> to give subclasses the choice to implement it.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfClone",
          "displayName": "Use of 'clone()' or 'Cloneable'",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to and implementations of the <b>clone()</b> method and uses of <b>java.lang.Cloneable</b>.\nSome coding standards prohibit <b>clone()</b> usage, and recommend using a copy constructor or <b>static</b> factory method.\nCalls to <b>clone()</b> on arrays are ignored, because that is a common, correct, efficient and compact way to copy an array.\n\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NonPublicClone",
          "displayName": "'clone()' method not 'public'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>clone()</b> methods that are <b>protected</b> and not <b>public</b>.\nWhen overriding the <b>clone()</b> method from <b>java.lang.Object</b> it is convention to make the method <b>public</b>,\nso that it is accessible from non-subclasses outside the package.\nSee also the documentation of <b>java.lang.Cloneable</b>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "CloneableImplementsClone",
          "displayName": "Cloneable class without 'clone()' method",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which implement the <b>Cloneable</b> interface, but which do not override the\n<b>clone()</b> method. Such classes use the default implementation of <b>clone()</b>, which is often not the desired\nbehavior.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CloneCallsConstructors",
          "displayName": "'clone()' instantiates objects with constructor",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to object constructors inside <b>clone()</b> methods.\nInstantiation of objects inside of <b>clone()</b> should be done by calling <b>clone()</b>,\ninstead of creating the object directly, to support later subclassing.\nThis inspection will not report\n<b>clone()</b> methods declared <b>final</b>,\nor <b>clone()</b> methods on <b>final</b> classes.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CloneReturnsClassType",
          "displayName": "'clone()' should have return type equal to the class it contains",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>clone()</b> methods that have a return type different than the class they are contained in.\nOften a <b>clone()</b> method will have a return type of <b>java.lang.Object</b>, which makes it harder to use by its clients.\n<i>Effective Java, Second Edition</i> recommends for the return type of the <b>clone()</b> method to be\nthe class type of the object it returns.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "CloneDeclaresCloneNotSupported",
          "displayName": "'clone()' does not declare 'CloneNotSupportedException'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>clone()</b> methods which are not declared as throwing\n<b>CloneNotSupportedException</b>. If <b>clone()</b> is not declared\nto possibly throw <b>CloneNotSupportedException</b>, then subclasses which need to\nprohibit cloning will not be able to do so in the standard way. This inspection will not report\n<b>clone()</b> methods declared <b>final</b>,\nor <b>clone()</b> methods on <b>final</b> classes.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to indicate if this inspection should only warn on <b>protected</b> methods.\nIn <i>Effective Java, Second Edition</i> (but not in the first edition) it is recommended to omit the <b>CloneNotSupportedException</b>\ndeclaration on <b>public</b> methods, because methods that don't throw checked exceptions are easier to use.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Room",
      "inspections": [
        {
          "shortName": "AndroidUnresolvedRoomSqlReference",
          "displayName": "Unresolved reference in Room SQL",
          "enabled": false,
          "description": "<html>\n<body>\nChecks Room SQL queries for unresolved references.\n</body>\n</html>\n"
        },
        {
          "shortName": "AndroidRoomQuestionMarkBindParameter",
          "displayName": "'?' used as parameter in a Room query.",
          "enabled": false,
          "description": "<html>\n<body>\nReports Room SQL queries that use unnamed query parameters (e.g. <code>WHERE id = ?</code>). This is not supported by the Room query\nanalyzer which requires named query parameters (e.g. <code>WHERE id = :id</code>) that correspond to arguments of the method annotated with\n<code>@Query</code>.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Shell script",
      "inspections": [
        {
          "shortName": "ShellCheck",
          "displayName": "ShellCheck",
          "enabled": false,
          "description": "<html>\n<body>\nShellCheck. <p>A shell script static analysis tool. <a href=\"https://github.com/koalaman/shellcheck\">https://github.com/koalaman/shellcheck</a>\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Annotations verifying",
      "inspections": [
        {
          "shortName": "SingletonConstructor",
          "displayName": "@Singleton constructors",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that classes annotated by <b>@Singleton</b> do not have constructors unless it is declared non strict.\n</body>\n</html>"
        },
        {
          "shortName": "DelegatesTo",
          "displayName": "@DelegatesTo inspection",
          "enabled": false,
          "description": "<html>\n<body>\nChecks <b>@groovy.lang.DelegatesTo</b> annotation arguments.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Spring Security",
      "inspections": [
        {
          "shortName": "SpringSecurityFiltersConfiguredInspection",
          "displayName": "Web.xml Filter Configuration",
          "enabled": false,
          "description": "Validates if Spring Security filter is setup in web application."
        },
        {
          "shortName": "SpringSecurityAnnotationBeanPointersResolveInspection",
          "displayName": "Checks errors in spring security annotations",
          "enabled": false,
          "description": "<html>\n<body>\nChecks errors in Spring security annotations\n</body>\n</html>"
        },
        {
          "shortName": "SpringSecurityDebugActivatedInspection",
          "displayName": "Debug activated",
          "enabled": false,
          "description": "Checks whether <strong>&lt;debug></strong> is activated (may expose sensitive information)."
        },
        {
          "shortName": "SpringSecurityModelInspection",
          "displayName": "Spring Security Model",
          "enabled": false,
          "description": "Validates Spring Security model."
        }
      ]
    },
    {
      "name": "Numeric issues",
      "inspections": [
        {
          "shortName": "UnaryPlus",
          "displayName": "Unary plus",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of the unary <b>+</b> operator. Unary plus is usually a null operation, and\nits presence may represent a coding error.\nParticularly in combination with the increment operator, <b>+++</b>, or the equals operator, <b>=+</b>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to only report when an unary plus is used together with a binary or another unary expression.\nThis means the inspection won't warn when an unary plus expression is used for example as a method argument, or in an array\ninitializer expression. In such cases it is much less confusing.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IntLiteralMayBeLongLiteral",
          "displayName": "'int' literal cast to 'long' could be 'long' literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>int</b> literal expressions\nwhich are immediately cast to <b>long</b>. Such\nliteral expressions can be replaced with the equivalent <b>long</b>\nliteral.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnpredictableBigDecimalConstructorCall",
          "displayName": "Unpredictable BigDecimal constructor call",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>BigDecimal</b> constructors which accept a <b>double</b> value.\nThese constructors produce a <b>BigDecimal</b> which is exactly equal to the supplied <b>double</b> value.\nHowever, as doubles are encoded in <i>IEEE 754 64-bit double-precision binary floating-point</i> format, the exact value could be unexpected.\n<p>\nFor example <code><b>new</b> BigDecimal(0.1)</code> yields a <b>BigDecimal</b> whose value is\n<small><code>0.1000000000000000055511151231257827021181583404541015625</code></small>,\nwhich is the nearest number to 0.1 representable as a double.\nTo get a <b>BigDecimal</b> which stores the same value as written in the source code,\nuse either <code><b>new</b> BigDecimal(\"0.1\")</code> or <code>BigDecimal.valueOf(0.1)</code>.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FloatingPointEquality",
          "displayName": "Floating point equality comparison",
          "enabled": false,
          "description": "<html>\n<body>\nReports floating-point values\nbeing compared with an <b>==</b> or <b>!=</b> operator.\nFloating point values are inherently inaccurate, and comparing them for exact\nequality is almost never the desired semantics. This inspection ignores comparisons\nwith zero and infinity literals.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BigDecimalMethodWithoutRoundingCalled",
          "displayName": "Call to 'BigDecimal' method without a rounding mode argument",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>divide()</b> or <b>setScale()</b> without a rounding mode argument.\nSuch calls can lead to an <b>ArithmeticException</b> when the exact value cannot be represented in the result\n(e.g. because it has a non-terminating decimal expansion).\nSpecifying a rounding mode prevents the <b>ArithmeticException</b>.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ComparisonToNaN",
          "displayName": "Comparison to Double.NaN or Float.NaN",
          "enabled": false,
          "description": "<html>\n<body>\nReports any equality or inequality comparisons to\n<b>Double.NaN</b> or <b>Float.NaN</b>.\nEquality comparison to these values is always false. Instead, use the\n<b>Double.isNaN()</b> of <b>Float.isNaN()</b>\nmethods instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryExplicitNumericCast",
          "displayName": "Unnecessary explicit numeric cast",
          "enabled": false,
          "description": "<html>\n<body>\nReports any primitive numeric casts which would otherwise be inserted implicitly by the compiler.\nAlso reports any primitive numeric casts which the compiler will remove.\nFor example:\n<pre><code>\n  <b>int</b> x = (<b>short</b>)5; // cast will be removed by javac\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "LongLiteralsEndingWithLowercaseL",
          "displayName": "'long' literal ending with 'l' instead of 'L'",
          "enabled": false,
          "description": "<html>\n<body>\nReports long literals ending with lowercase 'l'. These\nliterals may be confusing, as lowercase 'l' looks very similar to '1'.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CharUsedInArithmeticContext",
          "displayName": "'char' expression used in arithmetic context",
          "enabled": false,
          "description": "<html>\n<body>\nReports on any expressions of type char which are used in\naddition or subtraction expressions.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CastThatLosesPrecision",
          "displayName": "Numeric cast that loses precision",
          "enabled": false,
          "description": "<html>\n<body>\nReports any cast operations between primitive numeric types which may\nresult in loss of precision. Such casts are not necessarily a problem, but may result in difficult to\ntrace bugs if the loss of precision is unexpected.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to indicate that this inspection should ignore casts from\n<b>int</b> to <b>char</b>.\nThis type of cast is often used when implementing I/O operations, because the\n<b>read()</b> method of the class\n<b>java.io.Reader</b> returns an <b>int</b>.\n<p>\n  Use the second checkbox below to ignore casts of constant values 128-255 from <b>int</b> to <b>byte</b>.\n  Such values will overflow to negative numbers that still fit inside a byte.\n</body>\n</html>"
        },
        {
          "shortName": "NonReproducibleMathCall",
          "displayName": "Non-reproducible call to 'java.lang.Math'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>java.lang.Math</b> methods\nwhose results are not guaranteed to be precisely reproducible.  In environments\nwhere reproducibility of results are needed, <b>java.lang.StrictMath</b>\nshould be used instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "PointlessArithmeticExpression",
          "displayName": "Pointless arithmetic expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless arithmetic\nexpressions. Such expressions include adding or subtracting zero, multiplying by zero or one and\ndivision by one. Such expressions may be the result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CachedNumberConstructorCall",
          "displayName": "Number constructor call with primitive argument",
          "enabled": false,
          "description": "<html>\n<body>\nReports any attempt to instantiate a new <b>Long</b>,\n<b>Integer</b>, <b>Short</b> or\n<b>Byte</b> object from a primitive <b>long</b>,\n<b>integer</b>, <b>short</b> or\n<b>byte</b>\nargument. It may be more efficient to use the static method <b>valueOf()</b>\nhere (introduced in Java 5), which will cache objects for values between -128 and\n127 inclusive.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 5 or higher</p>\n<p>\nUse the first checkbox below to ignore calls to number constructors with a <b>String</b> argument.\n<p>\nUse the second checkbox to only report calls to deprecated constructors.\n<b>Long</b>, <b>Integer</b>, <b>Short</b> and<b>Byte</b> constructors are deprecated since JDK 9.\n</body>\n</html>"
        },
        {
          "shortName": "ConfusingFloatingPointLiteral",
          "displayName": "Confusing floating-point literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports any floating point numbers which do not have a decimal point, numbers before the decimal point,\nand numbers after the decimal point. Such literals may be confusing, and violate several coding standards.\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore floating point numbers in scientific notation.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryUnaryMinus",
          "displayName": "Unnecessary unary minus",
          "enabled": false,
          "description": "<html>\n<body>\nReports any unnecessary unary minuses.\n<p>\nFor example:\n<code><pre>\n    i += -8;\n    i = i + -8;\n</pre></code>\ncould be replaced by:\n<code><pre>\n    i -= 8;\n    i = i - 8;\n</pre></code>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousLiteralUnderscore",
          "displayName": "Suspicious underscore in number literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports number literals that use underscores where the groups are not three digits each.\n<!-- tooltip end -->\n<p>\n<small>New in 15</small>\n</body>\n</html>"
        },
        {
          "shortName": "BadOddness",
          "displayName": "Suspicious test for oddness",
          "enabled": false,
          "description": "<html>\n<body>\nReports any checks for oddness of the form:\n<code><pre>x % 2 == 1</pre></code>\nSuch checks will fail for negative odd values, which is probably not the behaviour intended. Consider using:\n<code><pre>x % 2 != 0</pre></code> or: <code><pre>(x & 1) == 1</pre></code> instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OctalAndDecimalIntegersMixed",
          "displayName": "Octal and decimal integers in same array",
          "enabled": false,
          "description": "<html>\n<body>\nReports mixed octal and decimal integer literals in a single array initializer.\nThis is often due to copying a list of numbers into an array initializer, where\nsome of the numbers in the array are zero-padded, and will thus be interpreted by the Java compiler as octal.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ComparisonOfShortAndChar",
          "displayName": "Comparison of 'short' and 'char' values",
          "enabled": false,
          "description": "<html>\n<body>\nReports equality comparisons between\n<b>short</b> and <b>char</b> values.\nSuch comparisons may cause subtle bugs, as <b>short</b> values are\nsigned and <b>char</b> values unsigned.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DivideByZero",
          "displayName": "Divide by zero",
          "enabled": false,
          "description": "<html>\n<body>\nReports division by zero or remainder by zero.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BigDecimalEquals",
          "displayName": "'equals()' called on 'java.math.BigDecimal'",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>.equals()</b> being called\nto compare two <b>java.math.BigDecimal</b> numbers. This is normally\na mistake, as two <b>java.math.BigDecimal</b>s are only equal if\nthey are equal in both value and scale, so that 2.0 is not equal to 2.00\nTo compare <b>java.math.BigDecimal</b>s for mathematical equality,\nuse <b>.compareTo()</b> instead.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OctalLiteral",
          "displayName": "Octal integer",
          "enabled": false,
          "description": "<html>\n<body>\nReports octal integer literals. Some coding standards prohibit the\nuse of octal literals, as they may be easily confused with decimal literals.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitNumericConversion",
          "displayName": "Implicit numeric conversion",
          "enabled": false,
          "description": "<html>\n<body>\nReports implicit conversion between numeric types.\nImplicit numeric conversion is not a problem in itself, but if unexpected may be a source\nof difficult to trace bugs.\n<!-- tooltip end -->\n<p>\nUse the first checkbox below if you wish this inspection to ignore implicit conversion which\ncan not result in loss of data (e.g.\n<b>int</b>-><b>long</b>).\n<p>Use the second checkbox to indicate that this inspection should ignore conversion from\nand to <b>char</b>. Conversion from floating point to <b>char</b> and vice versa will still be reported.\n<p>Use the third checkbox to let this inspection ignore conversion from literals and\ncompile time constants.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NumericOverflow",
          "displayName": "Numeric overflow",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for expressions which overflow during computation, i.e.: <br>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><font color=\"#000080\">a = 1.0/0.0;</font></b>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "IntegerDivisionInFloatingPointContext",
          "displayName": "Integer division in floating point context",
          "enabled": false,
          "description": "<html>\n<body>\nReports integer division where the\nresult is either directly or indirectly used as a floating point number.\nSuch division is often an error, and may result in unexpected results\ndue to the truncation that happens in integer division.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IntegerMultiplicationImplicitCastToLong",
          "displayName": "Integer multiplication or shift implicitly cast to long",
          "enabled": false,
          "description": "<html>\n<body>\nReports integer multiplications or left shifts which are implicitly cast to long.\nFor example:\n<pre><code>\n  <b>void</b> x(int i) {\n    <b>long</b> val = 65536 * i;\n  }\n</code></pre>\nSuch multiplication is often a mistake, as overflow truncation may occur unexpectedly.\nConverting the <b>int</b> literal to a <b>long</b> literal (<code>65536L</code>) fixes the problem.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DoubleLiteralMayBeFloatLiteral",
          "displayName": "'double' literal cast to 'float' could be 'float' literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>double</b> literal expressions\nwhich are immediately cast to <b>float</b>. Such\nliteral expressions can be replaced with the equivalent <b>float</b>\nliteral.\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "OverlyComplexArithmeticExpression",
          "displayName": "Overly complex arithmetic expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports arithmetic expressions with too many terms. Such\nexpressions may be confusing and bug-prone.\n<!-- tooltip end -->\n<p>\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantMathCall",
          "displayName": "Constant call to 'java.lang.Math'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to <b>java.lang.Math</b> or\n<b>java.lang.StrictMath</b> methods which can be determined\nto be simple compile-time constants.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "CSS",
      "inspections": [
        {
          "shortName": "CssOverwrittenProperties",
          "displayName": "Overwritten property value",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights CSS properties, which are being overwritten in the same ruleset block. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssConvertColorToHexInspection",
          "displayName": "RGB color function instead of #HEX representation",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects CSS colors which are defined as CSS rgb() function and provides an\nintention to convert such values to its HEX representation. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssConvertColorToRgbInspection",
          "displayName": "#HEX color representation instead of RGB color function",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects CSS colors which are defined as HEX, and provides a quickfix action to convert such values to a CSS rgb() function\ncall. <br>\n</body>\n</html>"
        },
        {
          "shortName": "CssUnusedSymbol",
          "displayName": "Unused CSS selector",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection detects unused CSS classes or IDs within a file. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "CssReplaceWithShorthandSafely",
          "displayName": "Properties may be safely replaced with a shorthand",
          "enabled": false,
          "description": "<html>\n<body>\nIf a CSS ruleset contains a complete set of longhand properties then this inspection suggests transforming them into a shorthand form.\n<br/><br/>\nFor example, 4 properties: <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code>\nmay be safely replaced with a single <code>padding</code> property.\n<br/><br/>\nNote that this inspection doesn't show up if the set of longhand properties is incomplete (e.g. only 3 <code>padding-xxx</code> properties in a ruleset)\nbecause switching to a shorthand may change the result. For such cases consider the 'Properties may probably be replaced with a shorthand' inspection.\n</body>\n</html>"
        },
        {
          "shortName": "CssReplaceWithShorthandUnsafely",
          "displayName": "Properties may probably be replaced with a shorthand",
          "enabled": false,
          "description": "<html>\n<body>\nIf a CSS ruleset contains a number of longhand properties that do not constitute a complete set then this inspection suggests transforming the properties into a shorthand form.\n<br/><br/>\nFor example, 2 properties: <code>outline-color</code> and <code>outline-style</code> may be replaced with a single <code>outline</code> one.\nHowever such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the <code>outline</code> shorthand means that <code>outline-width</code> is also set to its initial value, which is <code>medium</code>.\n<br/><br/>\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.\n</body>\n</html>"
        },
        {
          "shortName": "CssBrowserCompatibilityForProperties",
          "displayName": "Browser compatibility for properties",
          "enabled": false,
          "description": "<html>\n<body>\nReports CSS properties that are not supported by the specified browsers.\nThis inspection is based on the <a href=\"https://github.com/mdn/browser-compat-data\">MDN Compatibility Data</a>.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "AOP",
      "inspections": [
        {
          "shortName": "ArgNamesErrorsInspection",
          "displayName": "Advice parameters (argNames, returning, throwing) consistency check",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies that @AspectJ argNames attribute value corresponds to the actual method parameter names.\n</body>\n</html>"
        },
        {
          "shortName": "DeclareParentsInspection",
          "displayName": "Introductions (declare parents) errors",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies @AspectJ Introduction consistency: whether the defaultImpl is required and, if yes, whether it implements the given\ninterface\n</body>\n</html>"
        },
        {
          "shortName": "ArgNamesWarningsInspection",
          "displayName": "argNames not defined warning",
          "enabled": false,
          "description": "<html>\n<body>\n\nIt's recommended to define argNames attribute in @AspectJ annotations, since the method parameter names\nmay not be available at runtime.\n</body>\n</html>"
        },
        {
          "shortName": "PointcutMethodStyleInspection",
          "displayName": "Pointcut method style",
          "enabled": false,
          "description": "<html>\n<body>\n\nValidate @Pointcut methods: void return type, no throws clause, empty method body\n</body>\n</html>"
        },
        {
          "shortName": "AroundAdviceStyleInspection",
          "displayName": "Around advice style inspection",
          "enabled": false,
          "description": "<html>\n<body>\n  When using \"around\" advice, it's a good idea to remember two things:\ncalling \"org.aspectj.lang.ProceedingJoinPoint#proceed\" - otherwise call won't reach target\nreturning the result value (typed java.lang.Object) of that call - otherwise return value will never reach original caller<p>\n\nHowever, the following two conditions almost always indicate a coding error:<p>\n\n<li>The signature for the \"around\" method does not have ProceedingJoinPoint as first argument: in such cases it's impossible for the call to reach the target\n<li>The signature for the \"around\" method does not have Object as return type: in such cases return value of target method is always lost.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "GSP",
      "inspections": [
        {
          "shortName": "GspInspection",
          "displayName": "GSP Inspection",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks the consistency of attributes in GSP tags. <br>\n<br>\nExample: <br>\n\n- attribute 'contextPath' in tag &lt;g:render&gt; marked as unused if attribute 'plugin' is present. <br>\n- tag &lt;if&gt; marked as warning if it has no 'test' attribute nor 'env' attribute <br>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Micronaut",
      "inspections": [
        {
          "shortName": "MnProperties",
          "displayName": "Micronaut application.properties",
          "enabled": false,
          "description": "<html>\n<body>\nChecks Micronaut application <code>.properties</code> configuration files.\nHighlights invalid values.\n</body>\n</html>"
        },
        {
          "shortName": "MnYaml",
          "displayName": "Micronaut application.yaml",
          "enabled": false,
          "description": "<html>\n<body>\nChecks Micronaut application <code>.yaml</code> configuration files.\nHighlights invalid values.\n</body>\n</html>"
        },
        {
          "shortName": "MnUnresolvedPathVariable",
          "displayName": "Unresolved @PathVariable reference",
          "enabled": false,
          "description": "Checks references from Micronaut HTTP @PathVariable to URL mapping."
        },
        {
          "shortName": "MnIncorrectMimeTypeReference",
          "displayName": "Incorrect MIME Type declaration",
          "enabled": false,
          "description": "Checks MIME Type declarations in Micronaut HTTP annotations."
        }
      ]
    },
    {
      "name": "XSLT",
      "inspections": [
        {
          "shortName": "XsltVariableShadowing",
          "displayName": "Variable shadowing",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspections checks for shadowed XSLT variables which can lead to possibly undesired effects.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "XsltTemplateInvocation",
          "displayName": "Template invocation problems",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspection checks for problems in invocations of named XSLT templates, such as missing arguments, passing\n  arguments that are not declared by the template or passing an argument for a certain parameter more than once.\n</p>\n\n<p>\n  The inspection assumes that parameters declared with a default-value are optional and will not complain if an\n  invocation does not specify an argument for such parameters.\n</p>\n\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "XsltDeclarations",
          "displayName": "Declaration problems",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspections checks for various problems in declarations of XSLT variables, parameters and named templates:\n</p>\n<ul>\n  <li>Duplicate declarations</li>\n  <li>Illegal identifiers</li>\n</ul>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "XsltUnusedDeclaration",
          "displayName": "Unused variable/parameter",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  Reports local variables and parameters that are never used.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Manifest",
      "inspections": [
        {
          "shortName": "MisspelledHeader",
          "displayName": "Unknown or misspelled header name",
          "enabled": false,
          "description": "<html>\n<body>\n  Reports any unknown and probably misspelled header names and provides possible variants.\n</body>\n</html>"
        },
        {
          "shortName": "MissingFinalNewline",
          "displayName": "Missing final new line",
          "enabled": false,
          "description": "<html>\n<body>\n  Checks whether a manifest file ends with a final newline (as required by the JAR file specification).\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Velocity",
      "inspections": [
        {
          "shortName": "VtlFileReferencesInspection",
          "displayName": "File references inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that Velocity file references (in #include and #parse directives) are resolved correctly\n</body>\n</html>"
        },
        {
          "shortName": "VtlDirectiveArgsInspection",
          "displayName": "Directive arguments inspection ",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports about illegal values or types of arguments of Velocity directives\n</body>\n</html>"
        },
        {
          "shortName": "VtlInterpolationsInspection",
          "displayName": "Welformedness inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports about illegal usages of formal notation within #macro and #set directives\n</body>\n</html>"
        },
        {
          "shortName": "VtlReferencesInspection",
          "displayName": "References inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that Velocity references are resolved correctly\n</body>\n</html>"
        },
        {
          "shortName": "VtlTypesInspection",
          "displayName": "Types inspection",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection checks that binary and unary expressions have operands with correct types\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "FlexUnit",
      "inspections": [
        {
          "shortName": "FlexUnitMethodReturnTypeInspection",
          "displayName": "Test method should return void",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies that FlexUnit 4 test method returns void. Non-void methods cannot be run by FlexUnit 4 runner.\n</body>\n</html>"
        },
        {
          "shortName": "FlexUnitMethodVisibilityInspection",
          "displayName": "Test method is not public",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies that FlexUnit test method has public visibility. Non-public methods cannot be run by FlexUnit runner.\n</body>\n</html>"
        },
        {
          "shortName": "FlexUnitMethodHasParametersInspection",
          "displayName": "Test method has required parameters",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies that FlexUnit test method does not have required parameters. Method with parameters cannot be run by FlexUnit\nrunner.\n</body>\n</html>"
        },
        {
          "shortName": "FlexUnitMixedAPIInspection",
          "displayName": "FlexUnit 4 test method in class extending FlexUnit 1 or Flunit TestCase",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports FlexUnit 4 [Test] annotated methods which are located inside a class extending the abstract FlexUnit 1 or Flunit\nclass TestCase. Mixing FlexUnit API's like this is confusing and can lead to problems running the tests.\n</body>\n</html>"
        },
        {
          "shortName": "FlexUnitMethodIsStaticInspection",
          "displayName": "Test method is static",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies that FlexUnit test method is not static. Static methods cannot be run by FlexUnit runner.\n</body>\n</html>"
        },
        {
          "shortName": "FlexUnitClassVisibilityInspection",
          "displayName": "Test class is not public",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies that FlexUnit test class has public visibility. Non-public classes cannot be run by FlexUnit runner.\n</body>\n</html>"
        },
        {
          "shortName": "FlexUnitSuiteWithNoRunnerInspection",
          "displayName": "Test suite has no runner class specified",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports FlexUnit 4 test suite with [RunWith] metadata missing or empty. Such a suite cannot be run by FlexUnit.\n</body>\n</html>"
        },
        {
          "shortName": "FlexUnitClassInProductSourceInspection",
          "displayName": "Test class in product source",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports any instances of FlexUnit test cases in product source trees. This most likely indicates programmer error, and can\nresult in test code being shipped into production.\n</body>\n</html>"
        },
        {
          "shortName": "FlexUnitMethodInSuiteInspection",
          "displayName": "Test method in suite",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies that FlexUnit test method is not a part of test suite class. Suite class should not contain tests, it should append\ntest classes in constuctor (FlexUnit1) or declare test classes as public fields (FlexUnit4).\n</body>\n</html>"
        },
        {
          "shortName": "FlexUnitClassWithNoTestsInspection",
          "displayName": "Test class has no tests",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports any instances of FlexUnit test cases which do not contain any test methods. Such test cases usually indicate\ndeveloper error.\n</body>\n</html>"
        },
        {
          "shortName": "FlexUnitEmptySuiteInspection",
          "displayName": "Test suite is empty",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies that FlexUnit test suite has references to one or more test classes.\n</body>\n</html>"
        },
        {
          "shortName": "FlexUnitMethodIsPropertyInspection",
          "displayName": "Test method is getter/setter",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection verifies that FlexUnit test method is not property getter or setter. Such methods cannot be run by FlexUnit runner.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Spring WebSocket",
      "inspections": [
        {
          "shortName": "SpringWebSocketConfigurationInspection",
          "displayName": "Spring WebSocket Model",
          "enabled": false,
          "description": "Spring WebSocket configuration errors"
        }
      ]
    },
    {
      "name": "RESTful Web Service (JAX-RS)",
      "inspections": [
        {
          "shortName": "UnresolvedRestParam",
          "displayName": "Unresolved @PathParam reference",
          "enabled": false,
          "description": "Checks references from JAX-RS @PathParam to URL mapping."
        },
        {
          "shortName": "RestParamTypeInspection",
          "displayName": "Checks incorrect parameter type",
          "enabled": false,
          "description": "<html>\n<body>\nChecks types of parameters annotated @PathParam, @QueryParam, etc.\n\nThe type of the annotated parameter, field or property must either:\n<ol>\n<li>Be a primitive type.</li>\n<li>Have a constructor that accepts a single String argument.</li>\n<li>Have a static method named valueOf or fromString that accepts a single String argument (see, for example, Integer.valueOf(String)).</li>\n<li>Have a registered implementation of ParamConverterProvider JAX-RS extension SPI that returns a ParamConverter instance capable of a\n  \"from string\" conversion for the type.\n</li>\n  <li>Be List&lt;T&gt;, Set&lt;T&gt; or SortedSet&lt;T&gt;, where T satisfies 2, 3 or 4 above. The resulting collection is read-only. </li>\n</ol>\n\n</body>\n</html>"
        },
        {
          "shortName": "MultipleMethodDesignatorsInspection",
          "displayName": "This method should have only one HTTP method designator",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks that you have only one from @GET, @POST, @PUT, @DELETE annotations per method.\nThe validation works in Java files. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "RSIncorrectMimeTypeReference",
          "displayName": "Incorrect MIME Type declaration",
          "enabled": false,
          "description": "Incorrect MIME Type declarations in JAX-RS annotations."
        },
        {
          "shortName": "VoidMethodAnnotatedWithGET",
          "displayName": "@GET annotated method returns void value",
          "enabled": false,
          "description": "<html>\n<body>\nMethods annotated with @GET are supposed to return a result to client.\nThis inspection checks the Java code and finds the methods annotated with @GET that don't obey this recommendation. <br/>\n</body>\n</html>\n"
        },
        {
          "shortName": "RestResourceMethodInspection",
          "displayName": "Resource methods errors",
          "enabled": false,
          "description": "<html>\n<body>\nResource methods errors.\n</body>\n</html>"
        },
        {
          "shortName": "PathAnnotation",
          "displayName": "Rest @Path and @PathParam annotations inspections",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks @Path and @PathParam annotations.\nThe validation works in Java files. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "RestWrongDefaultValueInspection",
          "displayName": "@DefaultValue issues",
          "enabled": false,
          "description": "<html>\n<body>\nChecks that default value provided by @DefaultValue can be converted to the specified type.\n</body>\n</html>\n"
        },
        {
          "shortName": "WadlDomInspection",
          "displayName": "WADL configuration errors",
          "enabled": false,
          "description": "<html>\n<body>Wadl configuration errors.</body>\n</html>"
        }
      ]
    },
    {
      "name": "toString() issues",
      "inspections": [
        {
          "shortName": "FieldNotUsedInToString",
          "displayName": "Field not used in 'toString()' method",
          "enabled": false,
          "description": "<html>\n<body>\nReports any fields which are not used in the <b>toString()</b> method of a class. This can be useful to discover\nfields that were added after the <b>toString()</b> method was created and for which the <b>toString()</b> method was not\ncorrectly adjusted. It is possible to exclude fields from this check in the settings accessible via the Generate > toString() dialog.\n<p>\n  This inspection will also check for problems with getter methods if 'enable getters in code generation' is enabled\n  in settings.\n</body>\n</html>"
        },
        {
          "shortName": "ClassHasNoToStringMethod",
          "displayName": "Class does not override 'toString()' method",
          "enabled": false,
          "description": "<html>\n<body>\nReports classes without <b>toString()</b> method.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "WebSocket",
      "inspections": [
        {
          "shortName": "IncorrectOnMessageMethodsInspection",
          "displayName": "Incorrect @OnMessage methods",
          "enabled": false,
          "description": "<html>\n<body>\n<b>Check @OnMessage methods correctness:</b> <br>\n\n<p>This method level annotation can be used to make a Java method receive incoming web socket messages. Each websocket endpoint may only\n  have\n  one message handling method for each of the native websocket message formats: text, binary and pong. Methods using this annotation are\n  allowed to have parameters of types described below, otherwise the container will generate an error at deployment time.\n  The allowed parameters are:\n</p>\n\n<ol>\n  <li>Exactly one of any of the following choices</li>\n  <ul>\n    <li>if the method is handling text messages:</li>\n    <ul>\n      <li>String to receive the whole message</li>\n      <li>Java primitive or class equivalent to receive the whole message converted to that type</li>\n      <li>String and boolean pair to receive the message in parts</li>\n      <li>Reader to receive the whole message as a blocking stream</li>\n      <li>any object parameter for which the endpoint has a text decoder (Decoder.Text or Decoder.TextStream).</li>\n    </ul>\n    <li>if the method is handling binary messages:</li>\n    <ul>\n      <li>byte[] or ByteBuffer to receive the whole message</li>\n      <li>byte[] and boolean pair, or ByteBuffer and boolean pair to receive the message in parts</li>\n      <li>InputStream to receive the whole message as a blocking stream</li>\n      <li>any object parameter for which the endpoint has a binary decoder (Decoder.Binary or Decoder.BinaryStream).</li>\n    </ul>\n    <li>if the method is handling pong messages:</li>\n    <ul>\n      <li>PongMessage for handling pong messages</li>\n    </ul>\n  </ul>\n  <li>and Zero to n String or Java primitive parameters annotated with the PathParam annotation for server endpoints.</li>\n  <li>and an optional Session parameter</li>\n</ol>\n<p>The parameters may be listed in any order.</p>\n\n<p>The method may have a non-void return type, in which case the web socket runtime must interpret this as a web socket message to return\n  to the peer. The allowed data types for this return type, other than void, are String, ByteBuffer, byte[], any Java primitive or class\n  equivalent, and anything for which there is an encoder. If the method uses a Java primitive as a return value, the implementation must\n  construct the text message to send using the standard Java string representation of the Java primitive unless there developer provided\n  encoder for the type configured for this endpoint, in which case that encoder must be used. If the method uses a class equivalent of a\n  Java primitive as a return value, the implementation must construct the text message from the Java primitive equivalent as described\n  above.\n</p>\n<br>\n</body>\n</html>"
        },
        {
          "shortName": "ServerEndpointInconsistencyInspection",
          "displayName": "@ServerEndpoint configuration errors",
          "enabled": false,
          "description": "<html>\n<body>\n<b>@ServerEndpoint errors</b>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Async code and promises",
      "inspections": [
        {
          "shortName": "JSIgnoredPromiseFromCall",
          "displayName": "Result of method call returning a promise is ignored",
          "enabled": false,
          "description": "<html>\n<body>\nReports function calls that return a <b>Promise</b> that is not later used.\nThese are usually unintended and indicate an error.\n</body>\n</html>"
        },
        {
          "shortName": "ES6MissingAwait",
          "displayName": "Missing await for an async function call",
          "enabled": false,
          "description": "<html>\n<body>\nMissing <b>await</b> for an <b>async</b> function call results in having a Promise where a value was expected.<br/><br/>\n\nWhen the 'Report for promises in return statements' checkbox is checked, this inspection will also suggest adding 'await' in return statements.<br/>\nWhile this is generally not necessary, it gives two main benefits.<br/>\nThe first one is that you won't forget to add 'await' when surrounding your code with try-catch.<br/>\nThe second one is that having explicit 'await' helps V8 runtime to provide <a href=\"http://bit.ly/v8-zero-cost-async-stack-traces\">async stack traces</a>.\n</body>\n</html>"
        },
        {
          "shortName": "ES6PossiblyAsyncFunction",
          "displayName": "Possibly async function",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights usages of <b>await</b> in functions that were possibly intended to be async but are missing the <b>async</b> modifier.\n<!-- tooltip end -->\nWhile it is possible to use <b>await</b> as an identifier, it is likely that it was intended to be used as an operator\nand the containing function should be made <b>async</b>.\n</body>\n</html>"
        },
        {
          "shortName": "ES6RedundantAwait",
          "displayName": "Redundant 'await' expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports redundant <b>await</b> usages, such as <b>await await</b>, or awaiting a non-promise result.<br/>\n\nWhen the 'Report for promises' checkbox is checked, this inspection will also suggest removing 'await' before promises when applicable (in return statements, and with Promise.resolve/reject).<br/>\nWhile this is not generally necessary, removing 'await' in such contexts gives you two problems.<br/>\nThe first one is that surrounding your code with try-catch and forgetting to add 'await' will change code semantics, and you may fail to notice that.<br/>\nThe second one is that not having explicit 'await' may prevent the V8 runtime from providing <a href=\"http://bit.ly/v8-zero-cost-async-stack-traces\">async stack traces</a>.\n\n</body>\n</html>"
        },
        {
          "shortName": "ES6AwaitOutsideAsyncFunction",
          "displayName": "The 'await' operator can only be used in an 'async' function",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights usages of <b>await</b>-expressions outside async functions.\n<!-- tooltip end -->\nWhile the new 'top-level async' proposal is on its way, currently it is still illegal to use <b>await</b> outside async functions.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java language level issues",
      "inspections": [
        {
          "shortName": "VarargParameter",
          "displayName": "Varargs method",
          "enabled": false,
          "description": "<html>\n<body>\nReports methods taking a variable number of arguments, also known as varargs methods.\nSuch methods are not supported under Java 1.4 or earlier JVMs.\nThe quickfix of this inspection replaces a variable argument\nparameter with the equivalent array parameter. Relevant arguments in calls to\nthe method are wrapped in an array initializer expression.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EnumClass",
          "displayName": "Enumerated class",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>enum</b> classes.\nSuch statements are not supported under Java 1.4 or earlier JVMs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ForwardCompatibility",
          "displayName": "Forward compatibility",
          "enabled": false,
          "description": "<html>\n<body>\nReports the Java code constructs that may fail to compile in future Java versions. The following problems are reported:\n<ul>\n  <li>Use of 'assert', 'enum' or '_' as an identifier</li>\n  <li>Use of restricted keyword 'var' as a type name</li>\n  <li>Unqualified calls to method named 'yield'</li>\n  <li>Modifiers on 'requires java.base' statement inside module-info.java</li>\n</ul>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AnnotationClass",
          "displayName": "Annotation class",
          "enabled": false,
          "description": "<html>\n<body>\nReports annotation interfaces.\nSuch interfaces are not supported under Java 1.4 or earlier JVMs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssertStatement",
          "displayName": "'assert' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>assert</b> statements.\nSuch statements are not supported under Java 1.3 or earlier JVMs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "Annotation",
          "displayName": "Annotation",
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of annotations.\nAnnotations are not supported under Java 1.4 or earlier JVMs.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AutoUnboxing",
          "displayName": "Auto-unboxing",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"auto-unboxing\", e.g. the automatic unwrapping of objects into primitive values, where needed.\nCode which relies on auto-boxing will not work in pre-Java 5.0 environments.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ForeachStatement",
          "displayName": "Extended 'for' statement",
          "enabled": false,
          "description": "<html>\n<body>\nReports the Java 5 <b>for</b> statement syntax.\nSuch <b>for</b> statements are not supported under Java 1.4 and older.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AutoBoxing",
          "displayName": "Auto-boxing",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"auto-boxing\", i.e. the automatic wrapping of primitive values as objects, where needed.\nCode which relies on auto-boxing will not work in pre-Java 5.0 environments.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Dockerfile",
      "inspections": [
        {
          "shortName": "DockerFileAddOrCopySemantic",
          "displayName": "''ADD''/''COPY'' semantics",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection highlights possible problems with arguments of the ADD and COPY commands.\n<br>\n</body>\n</html>"
        },
        {
          "shortName": "DockerFileArgumentCount",
          "displayName": "Wrong number of arguments",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection finds commands with wrong or suspicious number of arguments in Dockerfiles and highlights them in the editor.\n<br>\n</body>\n</html>"
        },
        {
          "shortName": "DockerFileAssignments",
          "displayName": "Spacing of ''key=value'' pairs",
          "enabled": false,
          "description": "<html>\n<body>\nWhile it is not exactly specified in the Dockerfile documentation, some combinations of spacing for 'key=value' pairs are not actually allowed.\nThe rules are different for ARG, ENV or LABEL commands. This inspection highlights combinations which are known to be rejected.\n<br>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "RELAX NG",
      "inspections": [
        {
          "shortName": "UnusedDefine",
          "displayName": "Unused Define",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspections checks for any unused named patterns (\"define\") in a RELAX-NG file (XML or Compact Syntax) and\n  highlights them as unused symbols. This is done with respect to includes from other files, i.e. a define is not\n  marked as unused if it is used through an include in another file.\n</p>\n\n<p id=\"footer\">Powered by RELAX-NG Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnresolvedReference",
          "displayName": "Unresolved References",
          "enabled": false,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  This inspections checks for any unresolved references to named patterns (\"define\") in a RELAX-NG file in XML Syntax.\n  For unresolved references, a QuickFix is offered to create a corresponding define-element.\n</p>\n\n<p id=\"footer\">Powered by RELAX-NG Support</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Android Lint: Lint",
      "inspections": [
        {
          "shortName": "AndroidLintLintBaseline",
          "displayName": "Baseline Issues",
          "enabled": false,
          "description": "<html><body>Baseline Issues<br><br>Lint can be configured with a \"baseline\"; a set of current issues found in a codebase, which future runs of lint will silently ignore. Only new issues not found in the baseline are reported.<br/>\n<br/>\nNote that while opening files in the IDE, baseline issues are not filtered out; the purpose of baselines is to allow you to get started using lint and break the build on all newly introduced errors, without having to go back and fix the entire codebase up front. However, when you open up existing files you still want to be aware of and fix issues as you come across them.<br/>\n<br/>\nThis issue type is used to emit two types of informational messages in reports: first, whether any issues were filtered out so you don't have a false sense of security if you forgot that you've checked in a baseline file, and second, whether any issues in the baseline file appear to have been fixed such that you can stop filtering them out and get warned if the issues are re-introduced.<br><br>Issue id: LintBaseline</body></html>"
        }
      ]
    },
    {
      "name": "Android Lint: Correctness",
      "inspections": [
        {
          "shortName": "AndroidLintSlices",
          "displayName": "Slices",
          "enabled": false,
          "description": "<html><body>Slices<br><br>This check analyzes usages of the Slices API and offers suggestions based<br/>\non best practices.<br><br>Issue id: Slices</body></html>"
        },
        {
          "shortName": "AndroidLintMissingIntentFilterForMediaSearch",
          "displayName": "Missing intent-filter with action android.media.action.MEDIA_PLAY_FROM_SEARCH",
          "enabled": false,
          "description": "<html><body>Missing intent-filter with action <code>android.media.action.MEDIA_PLAY_FROM_SEARCH</code><br><br>To support voice searches on Android Auto, you should also register an <code>intent-filter</code> for the action <code>android.media.action.MEDIA_PLAY_FROM_SEARCH</code>.<br/>\nTo do this, add\n<pre>\n`&lt;intent-filter>`\n    `&lt;action android:name=\"android.media.action.MEDIA_PLAY_FROM_SEARCH\" />`\n`&lt;/intent-filter>`\n</pre>\nto your <code>&lt;activity></code> or <code>&lt;service></code>.<br><br>Issue id: MissingIntentFilterForMediaSearch<br><br><a href=\"https://developer.android.com/training/auto/audio/index.html#support_voice\">https://developer.android.com/training/auto/audio/index.html#support_voice</a></body></html>"
        },
        {
          "shortName": "AndroidLintBatteryLife",
          "displayName": "Battery Life Issues",
          "enabled": false,
          "description": "<html><body>Battery Life Issues<br><br>This issue flags code that either<br/>\n* negatively affects battery life, or<br/>\n* uses APIs that have recently changed behavior to prevent background tasks from consuming memory and battery excessively.<br/>\n<br/>\nGenerally, you should be using <code>JobScheduler</code> or <code>GcmNetworkManager</code> instead.<br/>\n<br/>\nFor more details on how to update your code, please see <a href=\"http://developer.android.com/preview/features/background-optimization.html\">http://developer.android.com/preview/features/background-optimization.html</a><br><br>Issue id: BatteryLife</body></html>"
        },
        {
          "shortName": "AndroidLintInvalidVectorPath",
          "displayName": "Invalid vector paths",
          "enabled": false,
          "description": "<html><body>Invalid vector paths<br><br>This check ensures that vector paths are valid. For example, it makes sure that the numbers are not using scientific notation (such as 1.0e3) which can lead to runtime crashes on older devices. As another example, it flags numbers like <code>.5</code> which should be written as <code>0.5</code> instead to avoid crashes on some pre-Marshmallow devices.<br><br>Issue id: InvalidVectorPath<br><br><a href=\"https://code.google.com/p/android/issues/detail?id=78162\">https://code.google.com/p/android/issues/detail?id=78162</a></body></html>"
        },
        {
          "shortName": "AndroidLintStringEscaping",
          "displayName": "Invalid string escapes",
          "enabled": false,
          "description": "<html><body>Invalid string escapes<br><br>Apostrophes (') must always be escaped (with a \\), unless they appear in a string which is itself escaped in double quotes (\").<br><br>Issue id: StringEscaping</body></html>"
        },
        {
          "shortName": "AndroidLintSpUsage",
          "displayName": "Using dp instead of sp for text sizes",
          "enabled": false,
          "description": "<html><body>Using <code>dp</code> instead of <code>sp</code> for text sizes<br><br>When setting text sizes, you should normally use <code>sp</code>, or \"scale-independent pixels\". This is like the <code>dp</code> unit, but it is also scaled by the user's font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user's preference.<br/>\n<br/>\nThere <b>are</b> cases where you might need to use <code>dp</code>; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user's font size settings are not respected, so consider adjusting the layout itself to be more flexible.<br><br>Issue id: SpUsage<br><br><a href=\"http://developer.android.com/training/multiscreen/screendensities.html\">http://developer.android.com/training/multiscreen/screendensities.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintNewerVersionAvailable",
          "displayName": "Newer Library Versions Available",
          "enabled": false,
          "description": "<html><body>Newer Library Versions Available<br><br>This detector checks with a central repository to see if there are newer versions available for the dependencies used by this project. This is similar to the <code>GradleDependency</code> check, which checks for newer versions available in the Android SDK tools and libraries, but this works with any MavenCentral dependency, and connects to the library every time, which makes it more flexible but also <b>much</b> slower.<br><br>Issue id: NewerVersionAvailable</body></html>"
        },
        {
          "shortName": "AndroidLintMissingPrefix",
          "displayName": "Missing Android XML namespace",
          "enabled": false,
          "description": "<html><body>Missing Android XML namespace<br><br>Most Android views have attributes in the Android namespace. When referencing these attributes you <b>must</b> include the namespace prefix, or your attribute will be interpreted by <code>aapt</code> as just a custom attribute.<br/>\n<br/>\nSimilarly, in manifest files, nearly all attributes should be in the <code>android:</code> namespace.<br><br>Issue id: MissingPrefix</body></html>"
        },
        {
          "shortName": "AndroidLintProtectedPermissions",
          "displayName": "Using system app permission",
          "enabled": false,
          "description": "<html><body>Using system app permission<br><br>Permissions with the protection level signature, privileged or signatureOrSystem are only granted to system apps. If an app is a regular non-system app, it will never be able to use these permissions.<br><br>Issue id: ProtectedPermissions</body></html>"
        },
        {
          "shortName": "AndroidLintAppCompatResource",
          "displayName": "Menu namespace",
          "enabled": false,
          "description": "<html><body>Menu namespace<br><br>When using the appcompat library, menu resources should refer to the <code>showAsAction</code> (or <code>actionViewClass</code>, or <code>actionProviderClass</code>) in the <code>app:</code> namespace, not the <code>android:</code> namespace.<br/>\n<br/>\nSimilarly, when <b>not</b> using the appcompat library, you should be using the <code>android:showAsAction</code> (or <code>actionViewClass</code>, or <code>actionProviderClass</code>) attribute.<br><br>Issue id: AppCompatResource</body></html>"
        },
        {
          "shortName": "AndroidLintMissingOnPlayFromSearch",
          "displayName": "Missing onPlayFromSearch.",
          "enabled": false,
          "description": "<html><body>Missing <code>onPlayFromSearch</code>.<br><br>To support voice searches on Android Auto, in addition to adding an <code>intent-filter</code> for the action <code>onPlayFromSearch</code>, you also need to override and implement <code>onPlayFromSearch(String query, Bundle bundle)</code><br><br>Issue id: MissingOnPlayFromSearch<br><br><a href=\"https://developer.android.com/training/auto/audio/index.html#support_voice\">https://developer.android.com/training/auto/audio/index.html#support_voice</a></body></html>"
        },
        {
          "shortName": "AndroidLintDiffUtilEquals",
          "displayName": "Suspicious DiffUtil Equality",
          "enabled": false,
          "description": "<html><body>Suspicious DiffUtil Equality<br><br><code>areContentsTheSame</code> is used by <code>DiffUtil</code> to produce diffs. If the method is implemented incorrectly, such as using identity equals instead of equals, or calling equals on a class that has not implemented it, weird visual artifacts can occur.<br><br>Issue id: DiffUtilEquals<br><br><a href=\"https://issuetracker.google.com/116789824\">https://issuetracker.google.com/116789824</a></body></html>"
        },
        {
          "shortName": "AndroidLintOldTargetApi",
          "displayName": "Target SDK attribute is not targeting latest version",
          "enabled": false,
          "description": "<html><body>Target SDK attribute is not targeting latest version<br><br>When your application runs on a version of Android that is more recent than your <code>targetSdkVersion</code> specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the <code>targetSdkVersion</code> is less than 14, your app may get an option button in the UI.<br/>\n<br/>\nTo fix this issue, set the <code>targetSdkVersion</code> to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: <a href=\"http://developer.android.com/reference/android/os/Build.VERSION_CODES.html\">http://developer.android.com/reference/android/os/Build.VERSION_CODES.html</a> as well as follow this guide:<br/>\n<a href=\"https://developer.android.com/distribute/best-practices/develop/target-sdk.html\">https://developer.android.com/distribute/best-practices/develop/target-sdk.html</a><br><br>Issue id: OldTargetApi</body></html>"
        },
        {
          "shortName": "AndroidLintWifiManagerLeak",
          "displayName": "WifiManager Leak",
          "enabled": false,
          "description": "<html><body>WifiManager Leak<br><br>On versions prior to Android N (24), initializing the <code>WifiManager</code> via <code>Context#getSystemService</code> can cause a memory leak if the context is not the application context. Change <code>context.getSystemService(...)</code> to <code>context.getApplicationContext().getSystemService(...)</code>.<br><br>Issue id: WifiManagerLeak</body></html>"
        },
        {
          "shortName": "AndroidLintObjectAnimatorBinding",
          "displayName": "Incorrect ObjectAnimator Property",
          "enabled": false,
          "description": "<html><body>Incorrect ObjectAnimator Property<br><br>This check cross references properties referenced by String from <code>ObjectAnimator</code> and <code>PropertyValuesHolder</code> method calls and ensures that the corresponding setter methods exist and have the right signatures.<br><br>Issue id: ObjectAnimatorBinding</body></html>"
        },
        {
          "shortName": "AndroidLintAccidentalOctal",
          "displayName": "Accidental Octal",
          "enabled": false,
          "description": "<html><body>Accidental Octal<br><br>In Groovy, an integer literal that starts with a leading 0 will be interpreted as an octal number. That is usually (always?) an accident and can lead to subtle bugs, for example when used in the <code>versionCode</code> of an app.<br><br>Issue id: AccidentalOctal</body></html>"
        },
        {
          "shortName": "AndroidLintExifInterface",
          "displayName": "Using android.media.ExifInterface",
          "enabled": false,
          "description": "<html><body>Using <code>android.media.ExifInterface</code><br><br>The <code>android.media.ExifInterface</code> implementation has some known security bugs in older versions of Android. There is a new implementation available of this library in the support library, which is preferable.<br><br>Issue id: ExifInterface</body></html>"
        },
        {
          "shortName": "AndroidLintNotInterpolated",
          "displayName": "Incorrect Interpolation",
          "enabled": false,
          "description": "<html><body>Incorrect Interpolation<br><br>To insert the value of a variable, you can use <code>${variable}</code> inside a string literal, but <b>only</b> if you are using double quotes!<br><br>Issue id: NotInterpolated<br><br><a href=\"http://www.groovy-lang.org/syntax.html#_string_interpolation\">http://www.groovy-lang.org/syntax.html#_string_interpolation</a></body></html>"
        },
        {
          "shortName": "AndroidLintSoonBlockedPrivateApi",
          "displayName": "Using Private APIs",
          "enabled": false,
          "description": "<html><body>Using Soon-to-Be Blocked Private API<br><br>Usage of restricted non-SDK interface will throw an exception at runtime. Accessing non-SDK methods or fields through reflection has a high likelihood to break your app between versions, and is being restricted to facilitate future app compatibility.<br><br>Issue id: SoonBlockedPrivateApi<br><br><a href=\"https://developer.android.com/preview/restrictions-non-sdk-interfaces\">https://developer.android.com/preview/restrictions-non-sdk-interfaces</a></body></html>"
        },
        {
          "shortName": "AndroidLintMissingPermission",
          "displayName": "Missing Permissions",
          "enabled": false,
          "description": "<html><body>Missing Permissions<br><br>This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.<br/>\n<br/>\nFurthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime.<br><br>Issue id: MissingPermission</body></html>"
        },
        {
          "shortName": "AndroidLintCanvasSize",
          "displayName": "Wrong Canvas Size",
          "enabled": false,
          "description": "<html><body>Wrong Canvas Size<br><br>In a custom view's draw implementation, you should normally call <code>getWidth</code> and <code>getHeight</code> on the custom view itself, not on the <code>canvas</code> instance.<br/>\n<br/>\nCanvas width and height are the width and height of the <code>Canvas</code>, which is not always the same as size of the view.<br/>\n<br/>\nIn the hardware accelerated path the width and height of the canvas typically always match that of the <code>View</code> because every view goes to its own recorded <code>DisplayList</code>. But in software rendering there's just one canvas that is clipped and transformed as it makes its way through the <code>View</code> tree, and otherwise remains the same <code>Canvas</code> object for every View's draw method.<br/>\n<br/>\nYou should only use Canvas state to adjust how much you draw, such as a quick-reject for early work avoidance if it's going to be clipped away, but not what you draw.<br><br>Issue id: CanvasSize</body></html>"
        },
        {
          "shortName": "AndroidLintOverrideAbstract",
          "displayName": "Not overriding abstract methods on older platforms",
          "enabled": false,
          "description": "<html><body>Not overriding abstract methods on older platforms<br><br>To improve the usability of some APIs, some methods that used to be <code>abstract</code> have been made concrete by adding default implementations. This means that when compiling with new versions of the SDK, your code does not have to override these methods.<br/>\n<br/>\nHowever, if your code is also targeting older versions of the platform where these methods were still <code>abstract</code>, the code will crash. You must override all methods that used to be abstract in any versions targeted by your application's <code>minSdkVersion</code>.<br><br>Issue id: OverrideAbstract</body></html>"
        },
        {
          "shortName": "AndroidLintDuplicateIncludedIds",
          "displayName": "Duplicate ids across layouts combined with include tags",
          "enabled": false,
          "description": "<html><body>Duplicate ids across layouts combined with include tags<br><br>It's okay for two independent layouts to use the same ids. However, if layouts are combined with include tags, then the id's need to be unique within any chain of included layouts, or <code>Activity#findViewById()</code> can return an unexpected view.<br><br>Issue id: DuplicateIncludedIds</body></html>"
        },
        {
          "shortName": "AndroidLintLibraryCustomView",
          "displayName": "Custom views in libraries should use res-auto-namespace",
          "enabled": false,
          "description": "<html><body>Custom views in libraries should use res-auto-namespace<br><br>When using a custom view with custom attributes in a library project, the layout must use the special namespace <a href=\"http://schemas.android.com/apk/res-auto\">http://schemas.android.com/apk/res-auto</a> instead of a URI which includes the library project's own package. This will be used to automatically adjust the namespace of the attributes when the library resources are merged into the application project.<br><br>Issue id: LibraryCustomView</body></html>"
        },
        {
          "shortName": "AndroidLintUnusedNavigation",
          "displayName": "Unused Navigation",
          "enabled": false,
          "description": "<html><body>Unused Navigation<br><br>Navigation resource files must be referenced from a <code>NavHostFragment</code> in a layout in order to be relevant.<br><br>Issue id: UnusedNavigation<br><br><a href=\"https://developer.android.com/topic/libraries/architecture/navigation/navigation-implementing#Modify-activity\">https://developer.android.com/topic/libraries/architecture/navigation/navigation-implementing#Modify-activity</a></body></html>"
        },
        {
          "shortName": "AndroidLintInlinedApi",
          "displayName": "Using inlined constants on older versions",
          "enabled": false,
          "description": "<html><body>Using inlined constants on older versions<br><br>This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that's fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it's safe and can be suppressed or whether the code needs to be guarded.<br/>\n<br/>\nIf you really want to use this API and don't need to support older devices just set the <code>minSdkVersion</code> in your <code>build.gradle</code> or <code>AndroidManifest.xml</code> files.<br/>\n<br/>\nIf your code is <b>deliberately</b> accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the <code>@TargetApi</code> annotation specifying the local minimum SDK to apply, such as <code>@TargetApi(11)</code>, such that this check considers 11 rather than your manifest file's minimum SDK as the required API level.<br><br>Issue id: InlinedApi</body></html>"
        },
        {
          "shortName": "AndroidLintCheckResult",
          "displayName": "Ignoring results",
          "enabled": false,
          "description": "<html><body>Ignoring results<br><br>Some methods have no side effects, and calling them without doing something without the result is suspicious.<br><br>Issue id: CheckResult</body></html>"
        },
        {
          "shortName": "AndroidLintInvalidWearFeatureAttribute",
          "displayName": "Invalid attribute for Wear uses-feature",
          "enabled": false,
          "description": "<html><body>Invalid attribute for Wear uses-feature<br><br>For the <code>android.hardware.type.watch</code> uses-feature, android:required=\"false\" is disallowed. A single APK for Wear and non-Wear devices is not supported.<br><br>Issue id: InvalidWearFeatureAttribute<br><br><a href=\"https://developer.android.com/training/wearables/apps/packaging.html\">https://developer.android.com/training/wearables/apps/packaging.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintWrongThreadInterprocedural",
          "displayName": "Wrong Thread (Interprocedural)",
          "enabled": false,
          "description": "<html><body>Wrong Thread (Interprocedural)<br><br>Searches for interprocedural call paths that violate thread annotations in the program. Tracks the flow of instantiated types and lambda expressions to increase accuracy across method boundaries.<br><br>Issue id: WrongThreadInterprocedural<br><br><a href=\"https://developer.android.com/guide/components/processes-and-threads.html#Threads\">https://developer.android.com/guide/components/processes-and-threads.html#Threads</a></body></html>"
        },
        {
          "shortName": "AndroidLintManifestOrder",
          "displayName": "Incorrect order of elements in manifest",
          "enabled": false,
          "description": "<html><body>Incorrect order of elements in manifest<br><br>The &lt;application> tag should appear after the elements which declare which version you need, which features you need, which libraries you need, and so on. In the past there have been subtle bugs (such as themes not getting applied correctly) when the <code>&lt;application></code> tag appears before some of these other elements, so it's best to order your manifest in the logical dependency order.<br><br>Issue id: ManifestOrder</body></html>"
        },
        {
          "shortName": "AndroidLintVectorRaster",
          "displayName": "Vector Image Generation",
          "enabled": false,
          "description": "<html><body>Vector Image Generation<br><br>Vector icons require API 21 or API 24 depending on used features, but when <code>minSdkVersion</code> is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the <code>drawable</code> folder is automatically moved to <code>drawable-anydpi-v21</code> or <code>drawable-anydpi-v24</code> and bitmap images are generated for different screen resolutions for backwards compatibility.<br/>\n<br/>\nHowever, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices.<br><br>Issue id: VectorRaster</body></html>"
        },
        {
          "shortName": "AndroidLintRequiresFeature",
          "displayName": "Requires Feature",
          "enabled": false,
          "description": "<html><body>Requires Feature<br><br>Some APIs require optional features to be present. This check makes sure that calls to these APIs are surrounded by a check which enforces this.<br><br>Issue id: RequiresFeature</body></html>"
        },
        {
          "shortName": "AndroidLintResourceName",
          "displayName": "Resource with Wrong Prefix",
          "enabled": false,
          "description": "<html><body>Resource with Wrong Prefix<br><br>In Gradle projects you can specify a resource prefix that all resources in the project must conform to. This makes it easier to ensure that you don't accidentally combine resources from different libraries, since they all end up in the same shared app namespace.<br><br>Issue id: ResourceName</body></html>"
        },
        {
          "shortName": "AndroidLintUseAlpha2",
          "displayName": "Using 3-letter Codes",
          "enabled": false,
          "description": "<html><body>Using 3-letter Codes<br><br>For compatibility with earlier devices, you should only use 3-letter language and region codes when there is no corresponding 2 letter code.<br><br>Issue id: UseAlpha2<br><br><a href=\"https://tools.ietf.org/html/bcp47\">https://tools.ietf.org/html/bcp47</a></body></html>"
        },
        {
          "shortName": "AndroidLintAdapterViewChildren",
          "displayName": "AdapterViews cannot have children in XML",
          "enabled": false,
          "description": "<html><body>AdapterViews cannot have children in XML<br><br>AdapterViews such as ListViews must be configured with data from Java code, such as a ListAdapter.<br><br>Issue id: AdapterViewChildren<br><br><a href=\"http://developer.android.com/reference/android/widget/AdapterView.html\">http://developer.android.com/reference/android/widget/AdapterView.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintNotificationIconCompatibility",
          "displayName": "Raster image is required for notification icon",
          "enabled": false,
          "description": "<html><body>Raster image is required for notification icon to support Android versions below 5.0 (API 21)<br><br>Notification icons should define a raster image to support Android versions below 5.0 (API 21). Note that the way Lint decides whether an icon is a notification icon is based on the filename prefix <code>ic_stat_</code>. This corresponds to the naming convention documented in <a href=\"http://developer.android.com/guide/practices/ui_guidelines/icon_design.html\">http://developer.android.com/guide/practices/ui_guidelines/icon_design.html</a><br><br>Issue id: NotificationIconCompatibility</body></html>"
        },
        {
          "shortName": "AndroidLintUnsupportedChromeOsHardware",
          "displayName": "Unsupported Chrome OS Hardware Feature",
          "enabled": false,
          "description": "<html><body>Unsupported Chrome OS Hardware Feature<br><br>The <code>&lt;uses-feature></code> element should not require this unsupported Chrome OS hardware feature. Any uses-feature not explicitly marked with <code>required=\"false\"</code> is necessary on the device to be installed on. Ensure that any features that might prevent it from being installed on a Chrome OS device are reviewed and marked as not required in the manifest.<br><br>Issue id: UnsupportedChromeOsHardware<br><br><a href=\"https://developer.android.com/topic/arc/manifest.html#incompat-entries\">https://developer.android.com/topic/arc/manifest.html#incompat-entries</a></body></html>"
        },
        {
          "shortName": "AndroidLintWebViewLayout",
          "displayName": "WebViews in wrap_content parents",
          "enabled": false,
          "description": "<html><body>WebViews in wrap_content parents<br><br>The WebView implementation has certain performance optimizations which will not work correctly if the parent view is using <code>wrap_content</code> rather than <code>match_parent</code>. This can lead to subtle UI bugs.<br><br>Issue id: WebViewLayout</body></html>"
        },
        {
          "shortName": "AndroidLintGetLocales",
          "displayName": "Locale crash",
          "enabled": false,
          "description": "<html><body>Locale crash<br><br>This check looks for usage of Lollipop-style locale folders (e.g. 3 letter language codes, or BCP 47 qualifiers) combined with an <code>AssetManager#getLocales()</code> call. This leads to crashes<br><br>Issue id: GetLocales</body></html>"
        },
        {
          "shortName": "AndroidLintIllegalResourceRef",
          "displayName": "Name and version must be integer or string, not resource",
          "enabled": false,
          "description": "<html><body>Name and version must be integer or string, not resource<br><br>For the <code>versionCode</code> attribute, you have to specify an actual integer literal; you cannot use an indirection with a <code>@dimen/name</code> resource. Similarly, the <code>versionName</code> attribute should be an actual string, not a string resource url.<br><br>Issue id: IllegalResourceRef</body></html>"
        },
        {
          "shortName": "AndroidLintMissingMediaBrowserServiceIntentFilter",
          "displayName": "Missing intent-filter with action android.media.browse.MediaBrowserService.",
          "enabled": false,
          "description": "<html><body>Missing intent-filter with action <code>android.media.browse.MediaBrowserService</code>.<br><br>An Automotive Media App requires an exported service that extends <code>android.service.media.MediaBrowserService</code> with an <code>intent-filter</code> for the action <code>android.media.browse.MediaBrowserService</code> to be able to browse and play media.<br/>\nTo do this, add\n<pre>\n`&lt;intent-filter>`\n    `&lt;action android:name=\"android.media.browse.MediaBrowserService\" />`\n`&lt;/intent-filter>`\n</pre>\nto the service that extends <code>android.service.media.MediaBrowserService</code><br><br>Issue id: MissingMediaBrowserServiceIntentFilter<br><br><a href=\"https://developer.android.com/training/auto/audio/index.html#config_manifest\">https://developer.android.com/training/auto/audio/index.html#config_manifest</a></body></html>"
        },
        {
          "shortName": "AndroidLintLogTagMismatch",
          "displayName": "Mismatched Log Tags",
          "enabled": false,
          "description": "<html><body>Mismatched Log Tags<br><br>When guarding a <code>Log.v(tag, ...)</code> call with <code>Log.isLoggable(tag)</code>, the tag passed to both calls should be the same. Similarly, the level passed in to <code>Log.isLoggable</code> should typically match the type of <code>Log</code> call, e.g. if checking level <code>Log.DEBUG</code>, the corresponding <code>Log</code> call should be <code>Log.d</code>, not <code>Log.i</code>.<br><br>Issue id: LogTagMismatch</body></html>"
        },
        {
          "shortName": "AndroidLintDuplicateActivity",
          "displayName": "Activity registered more than once",
          "enabled": false,
          "description": "<html><body>Activity registered more than once<br><br>An activity should only be registered once in the manifest. If it is accidentally registered more than once, then subtle errors can occur, since attribute declarations from the two elements are not merged, so you may accidentally remove previous declarations.<br><br>Issue id: DuplicateActivity</body></html>"
        },
        {
          "shortName": "AndroidLintResourceType",
          "displayName": "Wrong Resource Type",
          "enabled": false,
          "description": "<html><body>Wrong Resource Type<br><br>Ensures that resource id's passed to APIs are of the right type; for example, calling <code>Resources.getColor(R.string.name)</code> is wrong.<br><br>Issue id: ResourceType</body></html>"
        },
        {
          "shortName": "AndroidLintMissingTranslation",
          "displayName": "Incomplete translation",
          "enabled": false,
          "description": "<html><body>Incomplete translation<br><br>If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.<br/>\n<br/>\nIf the string should <b>not</b> be translated, you can add the attribute <code>translatable=\"false\"</code> on the <code>&lt;string></code> element, or you can define all your non-translatable strings in a resource file called <code>donottranslate.xml</code>. Or, you can ignore the issue with a <code>tools:ignore=\"MissingTranslation\"</code> attribute.<br/>\n<br/>\nYou can tell lint (and other tools) which language is the default language in your <code>res/values/</code> folder by specifying <code>tools:locale=\"languageCode\"</code> for the root <code>&lt;resources></code> element in your resource file. (The <code>tools</code> prefix refers to the namespace declaration <code>http://schemas.android.com/tools</code>.)<br><br>Issue id: MissingTranslation</body></html>"
        },
        {
          "shortName": "AndroidLintOverride",
          "displayName": "Method conflicts with new inherited method",
          "enabled": false,
          "description": "<html><body>Method conflicts with new inherited method<br><br>Suppose you are building against Android API 8, and you've subclassed Activity. In your subclass you add a new method called <code>isDestroyed</code>(). At some later point, a method of the same name and signature is added to Android. Your method will now override the Android method, and possibly break its contract. Your method is not calling <code>super.isDestroyed()</code>, since your compilation target doesn't know about the method.<br/>\n<br/>\nThe above scenario is what this lint detector looks for. The above example is real, since <code>isDestroyed()</code> was added in API 17, but it will be true for <b>any</b> method you have added to a subclass of an Android class where your build target is lower than the version the method was introduced in.<br/>\n<br/>\nTo fix this, either rename your method, or if you are really trying to augment the builtin method if available, switch to a higher build target where you can deliberately add <code>@Override</code> on your overriding method, and call <code>super</code> if appropriate etc.<br><br>Issue id: Override</body></html>"
        },
        {
          "shortName": "AndroidLintDuplicateUsesFeature",
          "displayName": "Feature declared more than once",
          "enabled": false,
          "description": "<html><body>Feature declared more than once<br><br>A given feature should only be declared once in the manifest.<br><br>Issue id: DuplicateUsesFeature</body></html>"
        },
        {
          "shortName": "AndroidLintMangledCRLF",
          "displayName": "Mangled file line endings",
          "enabled": false,
          "description": "<html><body>Mangled file line endings<br><br>On Windows, line endings are typically recorded as carriage return plus newline: \\r\\n.<br/>\n<br/>\nThis detector looks for invalid line endings with repeated carriage return characters (without newlines). Previous versions of the ADT plugin could accidentally introduce these into the file, and when editing the file, the editor could produce confusing visual artifacts.<br><br>Issue id: MangledCRLF<br><br><a href=\"https://bugs.eclipse.org/bugs/show_bug.cgi?id=375421\">https://bugs.eclipse.org/bugs/show_bug.cgi?id=375421</a></body></html>"
        },
        {
          "shortName": "AndroidLintRequiredSize",
          "displayName": "Missing layout_width or layout_height attributes",
          "enabled": false,
          "description": "<html><body>Missing <code>layout_width</code> or <code>layout_height</code> attributes<br><br>All views must specify an explicit <code>layout_width</code> and <code>layout_height</code> attribute. There is a runtime check for this, so if you fail to specify a size, an exception is thrown at runtime.<br/>\n<br/>\nIt's possible to specify these widths via styles as well. GridLayout, as a special case, does not require you to specify a size.<br><br>Issue id: RequiredSize</body></html>"
        },
        {
          "shortName": "AndroidLintScrollViewCount",
          "displayName": "ScrollViews can have only one child",
          "enabled": false,
          "description": "<html><body>ScrollViews can have only one child<br><br>ScrollViews can only have one child widget. If you want more children, wrap them in a container layout.<br><br>Issue id: ScrollViewCount</body></html>"
        },
        {
          "shortName": "AndroidLintNetworkSecurityConfig",
          "displayName": "Valid Network Security Config File",
          "enabled": false,
          "description": "<html><body>Valid Network Security Config File<br><br>Ensures that a <code>&lt;network-security-config></code> file, which is pointed to by an <code>android:networkSecurityConfig</code> attribute in the manifest file, is valid<br><br>Issue id: NetworkSecurityConfig<br><br><a href=\"https://developer.android.com/preview/features/security-config.html\">https://developer.android.com/preview/features/security-config.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintMissingDefaultResource",
          "displayName": "Missing Default",
          "enabled": false,
          "description": "<html><body>Missing Default<br><br>If a resource is only defined in folders with qualifiers like <code>-land</code> or <code>-en</code>, and there is no default declaration in the base folder (<code>layout</code> or <code>values</code> etc), then the app will crash if that resource is accessed on a device where the device is in a configuration missing the given qualifier.<br/>\n<br/>\nAs a special case, drawables do not have to be specified in the base folder; if there is a match in a density folder (such as <code>drawable-mdpi</code>) that image will be used and scaled. Note however that if you  only specify a drawable in a folder like <code>drawable-en-hdpi</code>, the app will crash in non-English locales.<br/>\n<br/>\nThere may be scenarios where you have a resource, such as a <code>-fr</code> drawable, which is only referenced from some other resource with the same qualifiers (such as a <code>-fr</code> style), which itself has safe fallbacks. However, this still makes it possible for somebody to accidentally reference the drawable and crash, so it is safer to create a default dummy fallback in the base folder. Alternatively, you can suppress the issue by adding <code>tools:ignore=\"MissingDefaultResource\"</code> on the element.<br/>\n<br/>\n(This scenario frequently happens with string translations, where you might delete code and the corresponding resources, but forget to delete a translation. There is a dedicated issue id for that scenario, with the id <code>ExtraTranslation</code>.)<br><br>Issue id: MissingDefaultResource</body></html>"
        },
        {
          "shortName": "AndroidLintSupportAnnotationUsage",
          "displayName": "Incorrect support annotation usage",
          "enabled": false,
          "description": "<html><body>Incorrect support annotation usage<br><br>This lint check makes sure that the support annotations (such as <code>@IntDef</code> and <code>@ColorInt</code>) are used correctly. For example, it's an error to specify an <code>@IntRange</code> where the <code>from</code> value is higher than the <code>to</code> value.<br><br>Issue id: SupportAnnotationUsage</body></html>"
        },
        {
          "shortName": "AndroidLintAppLinksAutoVerifyError",
          "displayName": "App Links Auto Verification Failure",
          "enabled": false,
          "description": "<html><body>App Links Auto Verification Failure<br><br>Ensures that app links are correctly set and associated with website.<br><br>Issue id: AppLinksAutoVerifyError<br><br><a href=\"https://g.co/appindexing/applinks\">https://g.co/appindexing/applinks</a></body></html>"
        },
        {
          "shortName": "AndroidLintFontValidationWarning",
          "displayName": "Validation of font files",
          "enabled": false,
          "description": "<html><body>Validation of font files<br><br>Look for problems in various font files.<br><br>Issue id: FontValidationWarning<br><br><a href=\"https://developer.android.com/guide/topics/text/downloadable-fonts.html\">https://developer.android.com/guide/topics/text/downloadable-fonts.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintGradleOverrides",
          "displayName": "Value overridden by Gradle build script",
          "enabled": false,
          "description": "<html><body>Value overridden by Gradle build script<br><br>The value of (for example) <code>minSdkVersion</code> is only used if it is not specified in the <code>build.gradle</code> build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity.<br><br>Issue id: GradleOverrides</body></html>"
        },
        {
          "shortName": "AndroidLintBottomAppBar",
          "displayName": "BottomAppBar Problems",
          "enabled": false,
          "description": "<html><body>BottomAppBar Problems<br><br>The <code>BottomAppBar</code> widget must be placed within a <code>CoordinatorLayout</code>.<br><br>Issue id: BottomAppBar</body></html>"
        },
        {
          "shortName": "AndroidLintGradlePluginVersion",
          "displayName": "Incompatible Android Gradle Plugin",
          "enabled": false,
          "description": "<html><body>Incompatible Android Gradle Plugin<br><br>Not all versions of the Android Gradle plugin are compatible with all versions of the SDK. If you update your tools, or if you are trying to open a project that was built with an old version of the tools, you may need to update your plugin version number.<br><br>Issue id: GradlePluginVersion</body></html>"
        },
        {
          "shortName": "AndroidLintUnlocalizedSms",
          "displayName": "SMS phone number missing country code",
          "enabled": false,
          "description": "<html><body>SMS phone number missing country code<br><br>SMS destination numbers must start with a country code or the application code must ensure that the SMS is only sent when the user is in the same country as the receiver.<br><br>Issue id: UnlocalizedSms</body></html>"
        },
        {
          "shortName": "AndroidLintShowToast",
          "displayName": "Toast created but not shown",
          "enabled": false,
          "description": "<html><body>Toast created but not shown<br><br><code>Toast.makeText()</code> creates a <code>Toast</code> but does <b>not</b> show it. You must call <code>show()</code> on the resulting object to actually make the <code>Toast</code> appear.<br><br>Issue id: ShowToast</body></html>"
        },
        {
          "shortName": "AndroidLintPermissionImpliesUnsupportedChromeOsHardware",
          "displayName": "Permission Implies Unsupported Chrome OS Hardware",
          "enabled": false,
          "description": "<html><body>Permission Implies Unsupported Chrome OS Hardware<br><br>The <code>&lt;uses-permission></code> element should not require a permission that implies an unsupported Chrome OS hardware feature. Google Play assumes that certain hardware related permissions indicate that the underlying hardware features are required by default. To fix the issue, consider declaring the corresponding uses-feature element with <code>required=\"false\"</code> attribute.<br><br>Issue id: PermissionImpliesUnsupportedChromeOsHardware<br><br><a href=\"https://developer.android.com/topic/arc/manifest.html#implied-features\">https://developer.android.com/topic/arc/manifest.html#implied-features</a></body></html>"
        },
        {
          "shortName": "AndroidLintMinSdkTooLow",
          "displayName": "Minimum SDK Version Too Low",
          "enabled": false,
          "description": "<html><body>API Version Too Low<br><br>The value of the <code>minSdkVersion</code> property is too low and can be incremented without noticeably reducing the number of supported devices.<br><br>Issue id: MinSdkTooLow</body></html>"
        },
        {
          "shortName": "AndroidLintHighAppVersionCode",
          "displayName": "versionCode too high",
          "enabled": false,
          "description": "<html><body>VersionCode too high<br><br>The declared <code>versionCode</code> is an Integer. Ensure that the version number is not close to the limit. It is recommended to monotonically increase this number each minor or major release of the app. Note that updating an app with a versionCode over <code>Integer.MAX_VALUE</code> is not possible.<br><br>Issue id: HighAppVersionCode<br><br><a href=\"https://developer.android.com/studio/publish/versioning.html\">https://developer.android.com/studio/publish/versioning.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintEnqueueWork",
          "displayName": "WorkManager Enqueue",
          "enabled": false,
          "description": "<html><body>WorkManager Enqueue<br><br><code>WorkContinuations</code> cannot be enqueued automatically.  You must call <code>enqueue()</code> on a <code>WorkContinuation</code> to have it and its parent continuations enqueued inside <code>WorkManager</code>.<br><br>Issue id: EnqueueWork</body></html>"
        },
        {
          "shortName": "AndroidLintApplySharedPref",
          "displayName": "Use apply() on SharedPreferences",
          "enabled": false,
          "description": "<html><body>Use <code>apply()</code> on <code>SharedPreferences</code><br><br>Consider using <code>apply()</code> instead of <code>commit</code> on shared preferences. Whereas <code>commit</code> blocks and writes its data to persistent storage immediately, <code>apply</code> will handle it in the background.<br><br>Issue id: ApplySharedPref</body></html>"
        },
        {
          "shortName": "AndroidLintGradleDeprecated",
          "displayName": "Deprecated Gradle Construct",
          "enabled": false,
          "description": "<html><body>Deprecated Gradle Construct<br><br>This detector looks for deprecated Gradle constructs which currently work but will likely stop working in a future update.<br><br>Issue id: GradleDeprecated</body></html>"
        },
        {
          "shortName": "AndroidLintUnsupportedTvHardware",
          "displayName": "Unsupported TV Hardware Feature",
          "enabled": false,
          "description": "<html><body>Unsupported TV Hardware Feature<br><br>The &lt;uses-feature> element should not require this unsupported TV hardware feature. Any uses-feature not explicitly marked with required=\"false\" is necessary on the device to be installed on. Ensure that any features that might prevent it from being installed on a TV device are reviewed and marked as not required in the manifest.<br><br>Issue id: UnsupportedTvHardware<br><br><a href=\"https://developer.android.com/training/tv/start/hardware.html#unsupported-features\">https://developer.android.com/training/tv/start/hardware.html#unsupported-features</a></body></html>"
        },
        {
          "shortName": "AndroidLintShortAlarm",
          "displayName": "Short or Frequent Alarm",
          "enabled": false,
          "description": "<html><body>Short or Frequent Alarm<br><br>Frequent alarms are bad for battery life. As of API 22, the <code>AlarmManager</code> will override near-future and high-frequency alarm requests, delaying the alarm at least 5 seconds into the future and ensuring that the repeat interval is at least 60 seconds.<br/>\n<br/>\nIf you really need to do work sooner than 5 seconds, post a delayed message or runnable to a Handler.<br><br>Issue id: ShortAlarm</body></html>"
        },
        {
          "shortName": "AndroidLintUnknownId",
          "displayName": "Reference to an unknown id",
          "enabled": false,
          "description": "<html><body>Reference to an unknown id<br><br>The <code>@+id/</code> syntax refers to an existing id, or creates a new one if it has not already been defined elsewhere. However, this means that if you have a typo in your reference, or if the referred view no longer exists, you do not get a warning since the id will be created on demand. This check catches errors where you have renamed an id without updating all of the references to it.<br><br>Issue id: UnknownId</body></html>"
        },
        {
          "shortName": "AndroidLintSimpleDateFormat",
          "displayName": "Implied locale in date format",
          "enabled": false,
          "description": "<html><body>Implied locale in date format<br><br>Almost all callers should use <code>getDateInstance()</code>, <code>getDateTimeInstance()</code>, or <code>getTimeInstance()</code> to get a ready-made instance of SimpleDateFormat suitable for the user's locale. The main reason you'd create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).<br/>\n<br/>\nTherefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing.<br><br>Issue id: SimpleDateFormat<br><br><a href=\"http://developer.android.com/reference/java/text/SimpleDateFormat.html\">http://developer.android.com/reference/java/text/SimpleDateFormat.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintNotSibling",
          "displayName": "RelativeLayout Invalid Constraints",
          "enabled": false,
          "description": "<html><body>Invalid Constraints<br><br>Layout constraints in a given <code>ConstraintLayout</code> or <code>RelativeLayout</code> should reference other views within the same relative layout (but not itself!)<br><br>Issue id: NotSibling</body></html>"
        },
        {
          "shortName": "AndroidLintStringFormatCount",
          "displayName": "Formatting argument types incomplete or inconsistent",
          "enabled": false,
          "description": "<html><body>Formatting argument types incomplete or inconsistent<br><br>When a formatted string takes arguments, it usually needs to reference the same arguments in all translations (or all arguments if there are no translations.<br/>\n<br/>\nThere are cases where this is not the case, so this issue is a warning rather than an error by default. However, this usually happens when a language is not translated or updated correctly.<br><br>Issue id: StringFormatCount</body></html>"
        },
        {
          "shortName": "AndroidLintTranslucentOrientation",
          "displayName": "Mixing screenOrientation and translucency",
          "enabled": false,
          "description": "<html><body>Mixing screenOrientation and translucency<br><br>Specifying a fixed screen orientation with a translucent theme isn't supported on apps with targetSdkVersion O or greater since there can be an another activity visible behind your activity with a conflicting request.<br/>\n<br/>\nFor example, your activity requests landscape and the visible activity behind your translucent activity request portrait. In this case the system can only honor one of the requests and currently prefers to honor the request from non-translucent activities since there is nothing visible behind them.<br/>\n<br/>\nDevices running platform version O or greater will throw an exception in your app if this state is detected.<br><br>Issue id: TranslucentOrientation</body></html>"
        },
        {
          "shortName": "AndroidLintCommitPrefEdits",
          "displayName": "Missing commit() on SharedPreference editor",
          "enabled": false,
          "description": "<html><body>Missing <code>commit()</code> on <code>SharedPreference</code> editor<br><br>After calling <code>edit()</code> on a <code>SharedPreference</code>, you must call <code>commit()</code> or <code>apply()</code> on the editor to save the results.<br><br>Issue id: CommitPrefEdits</body></html>"
        },
        {
          "shortName": "AndroidLintGradleDeprecatedConfiguration",
          "displayName": "Deprecated Gradle Configuration",
          "enabled": false,
          "description": "<html><body>Deprecated Gradle Configuration<br><br>Some Gradle configurations have been deprecated since Android Gradle Plugin 3.0.0 and will be removed in a future version of the Android Gradle Plugin.<br><br>Issue id: GradleDeprecatedConfiguration<br><br><a href=\"https://d.android.com/r/tools/update-dependency-configurations\">https://d.android.com/r/tools/update-dependency-configurations</a></body></html>"
        },
        {
          "shortName": "AndroidLintSourceLockedOrientationActivity",
          "displayName": "Activity is locked to an orientation",
          "enabled": false,
          "description": "<html><body>Activity is locked to an orientation<br><br>The <code>Activity</code> should not be locked to any orientation so that users<br/>\ncan take advantage of the multi-window environments and larger screens<br/>\navailable on Chrome OS. To fix the issue, consider calling <code>setRequestedOrientation</code><br/>\nwith the <code>ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR</code> or<br/>\n<code>ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED</code> options or removing the call<br/>\nall together.<br><br>Issue id: SourceLockedOrientationActivity</body></html>"
        },
        {
          "shortName": "AndroidLintDuplicatePlatformClasses",
          "displayName": "Duplicate Platform Classes",
          "enabled": false,
          "description": "<html><body>Duplicate Platform Classes<br><br>There are a number of libraries that duplicate not just functionality of the Android platform but using the exact same class names as the ones provided in Android -- for example the apache http classes. This can lead to unexpected crashes.<br/>\n<br/>\nTo solve this, you need to either find a newer version of the library which no longer has this problem, or to repackage the library (and all of its dependencies) using something like the <code>jarjar</code> tool, or finally, rewriting the code to use different APIs (for example, for http code, consider using <code>HttpUrlConnection</code> or a library like <code>okhttp</code>).<br><br>Issue id: DuplicatePlatformClasses</body></html>"
        },
        {
          "shortName": "AndroidLintServiceCast",
          "displayName": "Wrong system service casts",
          "enabled": false,
          "description": "<html><body>Wrong system service casts<br><br>When you call <code>Context#getSystemService()</code>, the result is typically cast to a specific interface. This lint check ensures that the cast is compatible with the expected type of the return value.<br><br>Issue id: ServiceCast</body></html>"
        },
        {
          "shortName": "AndroidLintPrivateResource",
          "displayName": "Using private resources",
          "enabled": false,
          "description": "<html><body>Using private resources<br><br>Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.<br/>\n<br/>\nTo fix this, copy the resource into your own project instead.<br><br>Issue id: PrivateResource</body></html>"
        },
        {
          "shortName": "AndroidLintInflateParams",
          "displayName": "Layout Inflation without a Parent",
          "enabled": false,
          "description": "<html><body>Layout Inflation without a Parent<br><br>When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored.<br><br>Issue id: InflateParams<br><br><a href=\"http://www.doubleencore.com/2013/05/layout-inflation-as-intended\">http://www.doubleencore.com/2013/05/layout-inflation-as-intended</a></body></html>"
        },
        {
          "shortName": "AndroidLintValidFragment",
          "displayName": "Fragment not instantiatable",
          "enabled": false,
          "description": "<html><body>Fragment not instantiatable<br><br>From the Fragment documentation:<br/>\n<b>Every</b> fragment must have an empty constructor, so it can be instantiated when restoring its activity's state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with <code>setArguments(Bundle)</code> and later retrieved by the Fragment with <code>getArguments()</code>.<br/>\n<br/>\nNote that this is no longer true when you are using <code>androidx.fragment.app.Fragment</code>; with the <code>FragmentFactory</code> you can supply any arguments you want (as of version androidx version 1.1).<br><br>Issue id: ValidFragment<br><br><a href=\"http://developer.android.com/reference/android/app/Fragment.html#Fragment()\">http://developer.android.com/reference/android/app/Fragment.html#Fragment()</a></body></html>"
        },
        {
          "shortName": "AndroidLintShiftFlags",
          "displayName": "Dangerous Flag Constant Declaration",
          "enabled": false,
          "description": "<html><body>Dangerous Flag Constant Declaration<br><br>When defining multiple constants for use in flags, the recommended style is to use the form <code>1 &lt;&lt; 2</code>, <code>1 &lt;&lt; 3</code>, <code>1 &lt;&lt; 4</code> and so on to ensure that the constants are unique and non-overlapping.<br><br>Issue id: ShiftFlags</body></html>"
        },
        {
          "shortName": "AndroidLintUnknownIdInLayout",
          "displayName": "Reference to an id that is not in the current layout",
          "enabled": false,
          "description": "<html><body>Reference to an id that is not in the current layout<br><br>The <code>@+id/</code> syntax refers to an existing id, or creates a new one if it has not already been defined elsewhere. However, this means that if you have a typo in your reference, or if the referred view no longer exists, you do not get a warning since the id will be created on demand.<br/>\n<br/>\nThis is sometimes intentional, for example where you are referring to a view which is provided in a different layout via an include. However, it is usually an accident where you have a typo or you have renamed a view without updating all the references to it.<br><br>Issue id: UnknownIdInLayout</body></html>"
        },
        {
          "shortName": "AndroidLintRestrictedApi",
          "displayName": "Restricted API",
          "enabled": false,
          "description": "<html><body>Restricted API<br><br>This API has been flagged with a restriction that has not been met.<br/>\n<br/>\nExamples of API restrictions:<br/>\n* Method can only be invoked by a subclass<br/>\n* Method can only be accessed from within the same library (defined by the Gradle library group id)<br/>\n* Method can only be accessed from tests.<br/>\n<br/>\nYou can add your own API restrictions with the <code>@RestrictTo</code> annotation.<br><br>Issue id: RestrictedApi</body></html>"
        },
        {
          "shortName": "AndroidLintWrongThread",
          "displayName": "Wrong Thread",
          "enabled": false,
          "description": "<html><body>Wrong Thread<br><br>Ensures that a method which expects to be called on a specific thread, is actually called from that thread. For example, calls on methods in widgets should always be made on the UI thread.<br><br>Issue id: WrongThread<br><br><a href=\"http://developer.android.com/guide/components/processes-and-threads.html#Threads\">http://developer.android.com/guide/components/processes-and-threads.html#Threads</a></body></html>"
        },
        {
          "shortName": "AndroidLintGradleIdeError",
          "displayName": "Gradle IDE Support Issues",
          "enabled": false,
          "description": "<html><body>Gradle IDE Support Issues<br><br>Gradle is highly flexible, and there are things you can do in Gradle files which can make it hard or impossible for IDEs to properly handle the project. This lint check looks for constructs that potentially break IDE support.<br><br>Issue id: GradleIdeError</body></html>"
        },
        {
          "shortName": "AndroidLintStringFormatInvalid",
          "displayName": "Invalid format string",
          "enabled": false,
          "description": "<html><body>Invalid format string<br><br>If a string contains a '%' character, then the string may be a formatting string which will be passed to <code>String.format</code> from Java code to replace each '%' occurrence with specific values.<br/>\n<br/>\nThis lint warning checks for two related problems:<br/>\n(1) Formatting strings that are invalid, meaning that <code>String.format</code> will throw exceptions at runtime when attempting to use the format string.<br/>\n(2) Strings containing '%' that are not formatting strings getting passed to a <code>String.format</code> call. In this case the '%' will need to be escaped as '%%'.<br/>\n<br/>\nNOTE: Not all Strings which look like formatting strings are intended for use by <code>String.format</code>; for example, they may contain date formats intended for <code>android.text.format.Time#format()</code>. Lint cannot always figure out that a String is a date format, so you may get false warnings in those scenarios. See the suppress help topic for information on how to suppress errors in that case.<br><br>Issue id: StringFormatInvalid</body></html>"
        },
        {
          "shortName": "AndroidLintInnerclassSeparator",
          "displayName": "Inner classes should use $ rather than .",
          "enabled": false,
          "description": "<html><body>Inner classes should use <code>$</code> rather than <code>.</code><br><br>When you reference an inner class in a manifest file, you must use '$' instead of '.' as the separator character, i.e. Outer$Inner instead of Outer.Inner.<br/>\n<br/>\n(If you get this warning for a class which is not actually an inner class, it's because you are using uppercase characters in your package name, which is not conventional.)<br><br>Issue id: InnerclassSeparator</body></html>"
        },
        {
          "shortName": "AndroidLintInconsistentLayout",
          "displayName": "Inconsistent Layouts",
          "enabled": false,
          "description": "<html><body>Inconsistent Layouts<br><br>This check ensures that a layout resource which is defined in multiple resource folders, specifies the same set of widgets.<br/>\n<br/>\nThis finds cases where you have accidentally forgotten to add a widget to all variations of the layout, which could result in a runtime crash for some resource configurations when a <code>findViewById()</code> fails.<br/>\n<br/>\nThere <b>are</b> cases where this is intentional. For example, you may have a dedicated large tablet layout which adds some extra widgets that are not present in the phone version of the layout. As long as the code accessing the layout resource is careful to handle this properly, it is valid. In that case, you can suppress this lint check for the given extra or missing views, or the whole layout<br><br>Issue id: InconsistentLayout</body></html>"
        },
        {
          "shortName": "AndroidLintSwitchIntDef",
          "displayName": "Missing @IntDef in Switch",
          "enabled": false,
          "description": "<html><body>Missing @IntDef in Switch<br><br>This check warns if a <code>switch</code> statement does not explicitly include all the values declared by the typedef <code>@IntDef</code> declaration.<br><br>Issue id: SwitchIntDef</body></html>"
        },
        {
          "shortName": "AndroidLintOrientation",
          "displayName": "Missing explicit orientation",
          "enabled": false,
          "description": "<html><body>Missing explicit orientation<br><br>The default orientation of a LinearLayout is horizontal. It's pretty easy to believe that the layout is vertical, add multiple children to it, and wonder why only the first child is visible (when the subsequent children are off screen to the right). This lint rule helps pinpoint this issue by warning whenever a LinearLayout is used with an implicit orientation and multiple children.<br/>\n<br/>\nIt also checks for empty LinearLayouts without an <code>orientation</code> attribute that also defines an <code>id</code> attribute. This catches the scenarios where children will be added to the <code>LinearLayout</code> dynamically. <br><br>Issue id: Orientation</body></html>"
        },
        {
          "shortName": "AndroidLintDuplicateDefinition",
          "displayName": "Duplicate definitions of resources",
          "enabled": false,
          "description": "<html><body>Duplicate definitions of resources<br><br>You can define a resource multiple times in different resource folders; that's how string translations are done, for example. However, defining the same resource more than once in the same resource folder is likely an error, for example attempting to add a new resource without realizing that the name is already used, and so on.<br><br>Issue id: DuplicateDefinition</body></html>"
        },
        {
          "shortName": "AndroidLintAaptCrash",
          "displayName": "Potential AAPT crash",
          "enabled": false,
          "description": "<html><body>Potential AAPT crash<br><br>Defining a style which sets <code>android:id</code> to a dynamically generated id can cause many versions of <code>aapt</code>, the resource packaging tool, to crash. To work around this, declare the id explicitly with <code>&lt;item type=\"id\" name=\"...\" /></code> instead.<br><br>Issue id: AaptCrash</body></html>"
        },
        {
          "shortName": "AndroidLintInvalidId",
          "displayName": "Invalid ID declaration",
          "enabled": false,
          "description": "<html><body>Invalid ID declaration<br><br>An id definition <b>must</b> be of the form <code>@+id/yourname</code>. The tools have not rejected strings of the form <code>@+foo/bar</code> in the past, but that was an error, and could lead to tricky errors because of the way the id integers are assigned.<br/>\n<br/>\nIf you really want to have different \"scopes\" for your id's, use prefixes instead, such as <code>login_button1</code> and <code>login_button2</code>.<br><br>Issue id: InvalidId</body></html>"
        },
        {
          "shortName": "AndroidLintIntentReset",
          "displayName": "Suspicious mix of setType and setData",
          "enabled": false,
          "description": "<html><body>Suspicious mix of <code>setType</code> and <code>setData</code><br><br>Intent provides the following APIs: <code>setData(Uri)</code> and <code>setType(String)</code>. Unfortunately, setting one clears the other. If you want to set both, you should call <code>setDataAndType(Uri, String)</code> instead.<br><br>Issue id: IntentReset</body></html>"
        },
        {
          "shortName": "AndroidLintPluralsCandidate",
          "displayName": "Potential Plurals",
          "enabled": false,
          "description": "<html><body>Potential Plurals<br><br>This lint check looks for potential errors in internationalization where you have translated a message which involves a quantity and it looks like other parts of the string may need grammatical changes.<br/>\n<br/>\nFor example, rather than something like this:\n<pre>\n  &lt;string name=\"try_again\">Try again in %d seconds.&lt;/string>\n</pre>\nyou should be using a plural:\n<pre>\n   &lt;plurals name=\"try_again\">\n        &lt;item quantity=\"one\">Try again in %d second&lt;/item>\n        &lt;item quantity=\"other\">Try again in %d seconds&lt;/item>\n    &lt;/plurals>\n</pre>\nThis will ensure that in other languages the right set of translations are provided for the different quantity classes.<br/>\n<br/>\n(This check depends on some heuristics, so it may not accurately determine whether a string really should be a quantity. You can use tools:ignore to filter out false positives.<br><br>Issue id: PluralsCandidate<br><br><a href=\"http://developer.android.com/guide/topics/resources/string-resource.html#Plurals\">http://developer.android.com/guide/topics/resources/string-resource.html#Plurals</a></body></html>"
        },
        {
          "shortName": "AndroidLintAssert",
          "displayName": "Assertions",
          "enabled": false,
          "description": "<html><body>Assertions<br><br>Assertions are not checked at runtime. There are ways to request that they be used by Dalvik (<code>adb shell setprop debug.assert 1</code>), but note that this is not implemented in ART (the newer runtime), and even in Dalvik the property is ignored in many places and can not be relied upon. Instead, perform conditional checking inside <code>if (BuildConfig.DEBUG) { }</code> blocks. That constant is a static final boolean which is true in debug builds and false in release builds, and the Java compiler completely removes all code inside the if-body from the app.<br/>\n<br/>\nFor example, you can replace <code>assert speed > 0</code> with <code>if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) { throw new AssertionError() }</code>.<br/>\n<br/>\n(Note: This lint check does not flag assertions purely asserting nullness or non-nullness; these are typically more intended for tools usage than runtime checks.)<br><br>Issue id: Assert<br><br><a href=\"https://code.google.com/p/android/issues/detail?id=65183\">https://code.google.com/p/android/issues/detail?id=65183</a></body></html>"
        },
        {
          "shortName": "AndroidLintAppIndexingService",
          "displayName": "App Indexing Background Services",
          "enabled": false,
          "description": "<html><body>App Indexing Background Services<br><br>Apps targeting Android 8.0 or higher can no longer rely on background services while listening for updates to the on-device index. Use a <code>BroadcastReceiver</code> for the <code>UPDATE_INDEX</code> intent to continue supporting indexing in your app.<br><br>Issue id: AppIndexingService<br><br><a href=\"https://firebase.google.com/docs/app-indexing/android/personal-content#add-a-broadcast-receiver-to-your-app\">https://firebase.google.com/docs/app-indexing/android/personal-content#add-a-broadcast-receiver-to-your-app</a></body></html>"
        },
        {
          "shortName": "AndroidLintPinSetExpiry",
          "displayName": "Validate <pin-set> expiration attribute",
          "enabled": false,
          "description": "<html><body>Validate <code>&lt;pin-set></code> expiration attribute<br><br>Ensures that the <code>expiration</code> attribute of the <code>&lt;pin-set></code> element is valid and has not already expired or is expiring soon<br><br>Issue id: PinSetExpiry<br><br><a href=\"https://developer.android.com/preview/features/security-config.html\">https://developer.android.com/preview/features/security-config.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintGradleGetter",
          "displayName": "Gradle Implicit Getter Call",
          "enabled": false,
          "description": "<html><body>Gradle Implicit Getter Call<br><br>Gradle will let you replace specific constants in your build scripts with method calls, so you can for example dynamically compute a version string based on your current version control revision number, rather than hardcoding a number.<br/>\n<br/>\nWhen computing a version name, it's tempting to for example call the method to do that <code>getVersionName</code>. However, when you put that method call inside the <code>defaultConfig</code> block, you will actually be calling the Groovy getter for the <code>versionName</code> property instead. Therefore, you need to name your method something which does not conflict with the existing implicit getters. Consider using <code>compute</code> as a prefix instead of <code>get</code>.<br><br>Issue id: GradleGetter</body></html>"
        },
        {
          "shortName": "AndroidLintInvalidNavigation",
          "displayName": "No start destination specified",
          "enabled": false,
          "description": "<html><body>No start destination specified<br><br>All <code>&lt;navigation></code> elements must have a start destination specified, and it must be a direct child of that <code>&lt;navigation></code>.<br><br>Issue id: InvalidNavigation</body></html>"
        },
        {
          "shortName": "AndroidLintProguardSplit",
          "displayName": "Proguard.cfg file contains generic Android rules",
          "enabled": false,
          "description": "<html><body>Proguard.cfg file contains generic Android rules<br><br>Earlier versions of the Android tools bundled a single <code>proguard.cfg</code> file containing a ProGuard configuration file suitable for Android shrinking and obfuscation. However, that version was copied into new projects, which means that it does not continue to get updated as we improve the default ProGuard rules for Android.<br/>\n<br/>\nIn the new version of the tools, we have split the ProGuard configuration into two halves:<br/>\n* A simple configuration file containing only project-specific flags, in your project<br/>\n* A generic configuration file containing the recommended set of ProGuard options for Android projects. This generic file lives in the SDK install directory which means that it gets updated along with the tools.<br/>\n<br/>\nIn order for this to work, the proguard.config property in the <code>project.properties</code> file now refers to a path, so you can reference both the generic file as well as your own (and any additional files too).<br/>\n<br/>\nTo migrate your project to the new setup, create a new <code>proguard-project.txt</code> file in your project containing any project specific ProGuard flags as well as any customizations you have made, then update your project.properties file to contain:<br/>\n<code>proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt</code><br><br>Issue id: ProguardSplit</body></html>"
        },
        {
          "shortName": "AndroidLintUnusedAttribute",
          "displayName": "Attribute unused on older versions",
          "enabled": false,
          "description": "<html><body>Attribute unused on older versions<br><br>This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the <code>minSdkVersion</code> attribute).<br/>\n<br/>\nThis is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.<br/>\n<br/>\nNote: This check does not only apply to attributes. For example, some tags can be unused too, such as the new <code>&lt;tag></code> element in layouts introduced in API 21.<br><br>Issue id: UnusedAttribute</body></html>"
        },
        {
          "shortName": "AndroidLintInvalidResourceFolder",
          "displayName": "Invalid Resource Folder",
          "enabled": false,
          "description": "<html><body>Invalid Resource Folder<br><br>This lint check looks for a folder name that is not a valid resource folder name; these will be ignored and not packaged by the Android Gradle build plugin.<br/>\n<br/>\nNote that the order of resources is very important; for example, you can't specify a language before a network code.<br/>\n<br/>\nSimilarly, note that to use 3 letter region codes, you have to use a special BCP 47 syntax: the prefix b+ followed by the BCP 47 language tag but with <code>+</code> as the individual separators instead of <code>-</code>. Therefore, for the BCP 47 language tag <code>nl-ABW</code> you have to use <code>b+nl+ABW</code>.<br><br>Issue id: InvalidResourceFolder<br><br><a href=\"http://developer.android.com/guide/topics/resources/providing-resources.html\">http://developer.android.com/guide/topics/resources/providing-resources.html</a><br><a href=\"https://tools.ietf.org/html/bcp47\">https://tools.ietf.org/html/bcp47</a></body></html>"
        },
        {
          "shortName": "AndroidLintStateListReachable",
          "displayName": "Unreachable state in a <selector>",
          "enabled": false,
          "description": "<html><body>Unreachable state in a <code>&lt;selector></code><br><br>In a selector, only the last child in the state list should omit a state qualifier. If not, all subsequent items in the list will be ignored since the given item will match all.<br><br>Issue id: StateListReachable</body></html>"
        },
        {
          "shortName": "AndroidLintResourceAsColor",
          "displayName": "Should pass resolved color instead of resource id",
          "enabled": false,
          "description": "<html><body>Should pass resolved color instead of resource id<br><br>Methods that take a color in the form of an integer should be passed an RGB triple, not the actual color resource id. You must call <code>getResources().getColor(resource)</code> to resolve the actual color value first.<br/>\n<br/>\nSimilarly, methods that take a dimension integer should be passed an actual dimension (call <code>getResources().getDimension(resource)</code><br><br>Issue id: ResourceAsColor</body></html>"
        },
        {
          "shortName": "AndroidLintDataBindingWithoutKapt",
          "displayName": "Data Binding without Annotation Processing",
          "enabled": false,
          "description": "<html><body>Data Binding without Annotation Processing<br><br>Apps that use Kotlin and data binding should also apply the kotlin-kapt plugin. <br><br>Issue id: DataBindingWithoutKapt<br><br><a href=\"https://kotlinlang.org/docs/reference/kapt.html\">https://kotlinlang.org/docs/reference/kapt.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintResourceCycle",
          "displayName": "Cycle in resource definitions",
          "enabled": false,
          "description": "<html><body>Cycle in resource definitions<br><br>There should be no cycles in resource definitions as this can lead to runtime exceptions.<br><br>Issue id: ResourceCycle</body></html>"
        },
        {
          "shortName": "AndroidLintInvalidWakeLockTag",
          "displayName": "Invalid Wake Lock Tag",
          "enabled": false,
          "description": "<html><body>Invalid Wake Lock Tag<br><br>Wake Lock tags must follow the naming conventions defined in the`PowerManager` documentation.<br><br>Issue id: InvalidWakeLockTag<br><br><a href=\"https://developer.android.com/reference/android/os/PowerManager.html\">https://developer.android.com/reference/android/os/PowerManager.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintDefaultLocale",
          "displayName": "Implied default locale in case conversion",
          "enabled": false,
          "description": "<html><body>Implied default locale in case conversion<br><br>Calling <code>String#toLowerCase()</code> or <code>#toUpperCase()</code> <b>without specifying an explicit locale</b> is a common source of bugs. The reason for that is that those methods will use the current locale on the user's device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for <code>i</code> is <b>not</b> <code>I</code>.<br/>\n<br/>\nIf you want the methods to just perform ASCII replacement, for example to convert an enum name, call <code>String#toUpperCase(Locale.US)</code> instead. If you really want to use the current locale, call <code>String#toUpperCase(Locale.getDefault())</code> instead.<br><br>Issue id: DefaultLocale<br><br><a href=\"http://developer.android.com/reference/java/util/Locale.html#default_locale\">http://developer.android.com/reference/java/util/Locale.html#default_locale</a></body></html>"
        },
        {
          "shortName": "AndroidLintRegistered",
          "displayName": "Class is not registered in the manifest",
          "enabled": false,
          "description": "<html><body>Class is not registered in the manifest<br><br>Activities, services and content providers should be registered in the <code>AndroidManifest.xml</code> file using <code>&lt;activity></code>, <code>&lt;service></code> and <code>&lt;provider></code> tags.<br/>\n<br/>\nIf your activity is simply a parent class intended to be subclassed by other \"real\" activities, make it an abstract class.<br><br>Issue id: Registered<br><br><a href=\"http://developer.android.com/guide/topics/manifest/manifest-intro.html\">http://developer.android.com/guide/topics/manifest/manifest-intro.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintFindViewByIdCast",
          "displayName": "Add Explicit Cast",
          "enabled": false,
          "description": "<html><body>Add Explicit Cast<br><br>In Android O, the <code>findViewById</code> signature switched to using generics, which means that most of the time you can leave out explicit casts and just assign the result of the <code>findViewById</code> call to variables of specific view classes.<br/>\n<br/>\nHowever, due to language changes between Java 7 and 8, this change may cause code to not compile without explicit casts. This lint check looks for these scenarios and suggests casts to be added now such that the code will continue to compile if the language level is updated to 1.8.<br><br>Issue id: FindViewByIdCast</body></html>"
        },
        {
          "shortName": "AndroidLintMissingQuantity",
          "displayName": "Missing quantity translation",
          "enabled": false,
          "description": "<html><body>Missing quantity translation<br><br>Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write \"1 book\", but for any other quantity we'd write \"n books\". This distinction between singular and plural is very common, but other languages make finer distinctions.<br/>\n<br/>\nThis lint check looks at each translation of a <code>&lt;plural></code> and makes sure that all the quantity strings considered by the given language are provided by this translation.<br/>\n<br/>\nFor example, an English translation must provide a string for <code>quantity=\"one\"</code>. Similarly, a Czech translation must provide a string for <code>quantity=\"few\"</code>.<br><br>Issue id: MissingQuantity<br><br><a href=\"http://developer.android.com/guide/topics/resources/string-resource.html#Plurals\">http://developer.android.com/guide/topics/resources/string-resource.html#Plurals</a></body></html>"
        },
        {
          "shortName": "AndroidLintAppCompatCustomView",
          "displayName": "Appcompat Custom Widgets",
          "enabled": false,
          "description": "<html><body>Appcompat Custom Widgets<br><br>In order to support features such as tinting, the appcompat library will automatically load special appcompat replacements for the builtin widgets. However, this does not work for your own custom views.<br/>\n<br/>\nInstead of extending the <code>android.widget</code> classes directly, you should instead extend one of the delegate classes in<br/>\n<code>androidx.appcompat.widget.AppCompatTextView</code>.<br><br>Issue id: AppCompatCustomView</body></html>"
        },
        {
          "shortName": "AndroidLintHalfFloat",
          "displayName": "Incorrect Half Float",
          "enabled": false,
          "description": "<html><body>Incorrect Half Float<br><br>Half-precision floating point are stored in a short data type, and should be manipulated using the <code>android.util.Half</code> class. This check flags usages where it appears that these values are used incorrectly.<br><br>Issue id: HalfFloat</body></html>"
        },
        {
          "shortName": "AndroidLintSQLiteString",
          "displayName": "Using STRING instead of TEXT",
          "enabled": false,
          "description": "<html><body>Using STRING instead of TEXT<br><br>In SQLite, any column can store any data type; the declared type for a column is more of a hint as to what the data should be cast to when stored.<br/>\n<br/>\nThere are many ways to store a string. <code>TEXT</code>, <code>VARCHAR</code>, <code>CHARACTER</code> and <code>CLOB</code> are string types, <b>but `STRING` is not</b>. Columns defined as STRING are actually numeric.<br/>\n<br/>\nIf you try to store a value in a numeric column, SQLite will try to cast it to a float or an integer before storing. If it can't, it will just store it as a string.<br/>\n<br/>\nThis can lead to some subtle bugs. For example, when SQLite encounters a string like <code>1234567e1234</code>, it will parse it as a float, but the result will be out of range for floating point numbers, so <code>Inf</code> will be stored! Similarly, strings that look like integers will lose leading zeroes.<br/>\n<br/>\nTo fix this, you can change your schema to use a <code>TEXT</code> type instead.<br><br>Issue id: SQLiteString<br><br><a href=\"https://www.sqlite.org/datatype3.html\">https://www.sqlite.org/datatype3.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintStringFormatMatches",
          "displayName": "String.format string doesn't match the XML format string",
          "enabled": false,
          "description": "<html><body><code>String.format</code> string doesn't match the XML format string<br><br>This lint check ensures the following:<br/>\n(1) If there are multiple translations of the format string, then all translations use the same type for the same numbered arguments<br/>\n(2) The usage of the format string in Java is consistent with the format string, meaning that the parameter types passed to String.format matches those in the format string.<br><br>Issue id: StringFormatMatches</body></html>"
        },
        {
          "shortName": "AndroidLintNestedScrolling",
          "displayName": "Nested scrolling widgets",
          "enabled": false,
          "description": "<html><body>Nested scrolling widgets<br><br>A scrolling widget such as a <code>ScrollView</code> should not contain any nested scrolling widgets since this has various usability issues<br><br>Issue id: NestedScrolling</body></html>"
        },
        {
          "shortName": "AndroidLintDuplicateIds",
          "displayName": "Duplicate ids within a single layout",
          "enabled": false,
          "description": "<html><body>Duplicate ids within a single layout<br><br>Within a layout, id's should be unique since otherwise <code>findViewById()</code> can return an unexpected view.<br><br>Issue id: DuplicateIds</body></html>"
        },
        {
          "shortName": "AndroidLintIncompatibleMediaBrowserServiceCompatVersion",
          "displayName": "Obsolete version of MediaBrowserServiceCompat",
          "enabled": false,
          "description": "<html><body>Obsolete version of MediaBrowserServiceCompat<br><br><code>MediaBrowserServiceCompat</code> from version 23.2.0 to 23.4.0 of the Support v4 Library used private APIs and will not be compatible with future versions of Android beyond Android N. Please upgrade to version 24.0.0 or higher of the Support Library.<br><br>Issue id: IncompatibleMediaBrowserServiceCompatVersion</body></html>"
        },
        {
          "shortName": "AndroidLintPropertyEscape",
          "displayName": "Incorrect property escapes",
          "enabled": false,
          "description": "<html><body>Incorrect property escapes<br><br>All backslashes and colons in .property files must be escaped with a backslash (). This means that when writing a Windows path, you must escape the file separators, so the path MyFiles should be written as <code>key=\\\\My\\\\Files.</code><br><br>Issue id: PropertyEscape</body></html>"
        },
        {
          "shortName": "AndroidLintWearStandaloneAppFlag",
          "displayName": "Invalid or missing wear standalone app flag",
          "enabled": false,
          "description": "<html><body>Invalid or missing Wear standalone app flag<br><br>Wearable apps should specify whether they can work standalone, without a phone app.Add a valid meta-data entry for <code>com.google.android.wearable.standalone</code> to your application element and set the value to <code>true</code> or <code>false</code>.\n<pre>\n`&lt;meta-data android:name=\"com.google.android.wearable.standalone\"\n            android:value=\"true\"/>`\n</pre>\n<br><br>Issue id: WearStandaloneAppFlag<br><br><a href=\"https://developer.android.com/training/wearables/apps/packaging.html\">https://developer.android.com/training/wearables/apps/packaging.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintMockLocation",
          "displayName": "Using mock location provider in production",
          "enabled": false,
          "description": "<html><body>Using mock location provider in production<br><br>Using a mock location provider (by requiring the permission <code>android.permission.ACCESS_MOCK_LOCATION</code>) should <b>only</b> be done in debug builds (or from tests). In Gradle projects, that means you should only request this permission in a test or debug source set specific manifest file.<br/>\n<br/>\nTo fix this, create a new manifest file in the debug folder and move the <code>&lt;uses-permission></code> element there. A typical path to a debug manifest override file in a Gradle project is src/debug/AndroidManifest.xml.<br><br>Issue id: MockLocation</body></html>"
        },
        {
          "shortName": "AndroidLintTestAppLink",
          "displayName": "Unmatched URLs",
          "enabled": false,
          "description": "<html><body>Unmatched URLs<br><br>Using one or more <code>tools:validation testUrl=\"some url\"/></code> elements in your manifest allows the link attributes in your intent filter to be checked for matches.<br><br>Issue id: TestAppLink</body></html>"
        },
        {
          "shortName": "AndroidLintImpliedQuantity",
          "displayName": "Implied Quantities",
          "enabled": false,
          "description": "<html><body>Implied Quantities<br><br>Plural strings should generally include a <code>%s</code> or <code>%d</code> formatting argument. In locales like English, the <code>one</code> quantity only applies to a single value, 1, but that's not true everywhere. For example, in Slovene, the <code>one</code> quantity will apply to 1, 101, 201, 301, and so on. Similarly, there are locales where multiple values match the <code>zero</code> and <code>two</code> quantities.<br/>\n<br/>\nIn these locales, it is usually an error to have a message which does not include a formatting argument (such as '%d'), since it will not be clear from the grammar what quantity the quantity string is describing.<br><br>Issue id: ImpliedQuantity<br><br><a href=\"http://developer.android.com/guide/topics/resources/string-resource.html#Plurals\">http://developer.android.com/guide/topics/resources/string-resource.html#Plurals</a></body></html>"
        },
        {
          "shortName": "AndroidLintValidActionsXml",
          "displayName": "Invalid Action Descriptor",
          "enabled": false,
          "description": "<html><body>Invalid Action Descriptor<br><br>Ensures that an actions XML file is properly formed<br><br>Issue id: ValidActionsXml</body></html>"
        },
        {
          "shortName": "AndroidLintExtraText",
          "displayName": "Extraneous text in resource files",
          "enabled": false,
          "description": "<html><body>Extraneous text in resource files<br><br>Layout resource files should only contain elements and attributes. Any XML text content found in the file is likely accidental (and potentially dangerous if the text resembles XML and the developer believes the text to be functional)<br><br>Issue id: ExtraText</body></html>"
        },
        {
          "shortName": "AndroidLintVectorDrawableCompat",
          "displayName": "Using VectorDrawableCompat",
          "enabled": false,
          "description": "<html><body>Using VectorDrawableCompat<br><br>To use VectorDrawableCompat, you need to make two modifications to your project. First, set <code>android.defaultConfig.vectorDrawables.useSupportLibrary = true</code> in your <code>build.gradle</code> file, and second, use <code>app:srcCompat</code> instead of <code>android:src</code> to refer to vector drawables.<br><br>Issue id: VectorDrawableCompat<br><br><a href=\"http://chris.banes.me/2016/02/25/appcompat-vector/#enabling-the-flag\">http://chris.banes.me/2016/02/25/appcompat-vector/#enabling-the-flag</a></body></html>"
        },
        {
          "shortName": "AndroidLintBlockedPrivateApi",
          "displayName": "Using Private APIs",
          "enabled": false,
          "description": "<html><body>Using Blocked Private API<br><br>Usage of restricted non-SDK interface is forbidden for this targetSDK. Accessing non-SDK methods or fields through reflection has a high likelihood to break your app between versions, and is being restricted to facilitate future app compatibility.<br><br>Issue id: BlockedPrivateApi<br><br><a href=\"https://developer.android.com/preview/restrictions-non-sdk-interfaces\">https://developer.android.com/preview/restrictions-non-sdk-interfaces</a></body></html>"
        },
        {
          "shortName": "AndroidLintInOrMmUsage",
          "displayName": "Using mm or in dimensions",
          "enabled": false,
          "description": "<html><body>Using <code>mm</code> or <code>in</code> dimensions<br><br>Avoid using <code>mm</code> (millimeters) or <code>in</code> (inches) as the unit for dimensions.<br/>\n<br/>\nWhile it should work in principle, unfortunately many devices do not report the correct true physical density, which means that the dimension calculations won't work correctly. You are better off using <code>dp</code> (and for font sizes, <code>sp</code>).<br><br>Issue id: InOrMmUsage</body></html>"
        },
        {
          "shortName": "AndroidLintWrongFolder",
          "displayName": "Resource file in the wrong res folder",
          "enabled": false,
          "description": "<html><body>Resource file in the wrong <code>res</code> folder<br><br>Resource files are sometimes placed in the wrong folder, and it can lead to subtle bugs that are hard to understand. This check looks for problems in this area, such as attempting to place a layout \"alias\" file in a <code>layout/</code> folder rather than the <code>values/</code> folder where it belongs.<br><br>Issue id: WrongFolder</body></html>"
        },
        {
          "shortName": "AndroidLintCommitTransaction",
          "displayName": "Missing commit() calls",
          "enabled": false,
          "description": "<html><body>Missing <code>commit()</code> calls<br><br>After creating a <code>FragmentTransaction</code>, you typically need to commit it as well<br><br>Issue id: CommitTransaction</body></html>"
        },
        {
          "shortName": "AndroidLintUsesMinSdkAttributes",
          "displayName": "Minimum SDK and target SDK attributes not defined",
          "enabled": false,
          "description": "<html><body>Minimum SDK and target SDK attributes not defined<br><br>The manifest should contain a <code>&lt;uses-sdk></code> element which defines the minimum API Level required for the application to run, as well as the target version (the highest API level you have tested the version for).<br><br>Issue id: UsesMinSdkAttributes<br><br><a href=\"http://developer.android.com/guide/topics/manifest/uses-sdk-element.html\">http://developer.android.com/guide/topics/manifest/uses-sdk-element.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintGradleDynamicVersion",
          "displayName": "Gradle Dynamic Version",
          "enabled": false,
          "description": "<html><body>Gradle Dynamic Version<br><br>Using <code>+</code> in dependencies lets you automatically pick up the latest available version rather than a specific, named version. However, this is not recommended; your builds are not repeatable; you may have tested with a slightly different version than what the build server used. (Using a dynamic version as the major version number is more problematic than using it in the minor version position.)<br><br>Issue id: GradleDynamicVersion</body></html>"
        },
        {
          "shortName": "AndroidLintDeprecated",
          "displayName": "Using deprecated resources",
          "enabled": false,
          "description": "<html><body>Using deprecated resources<br><br>Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You've been warned.<br><br>Issue id: Deprecated</body></html>"
        },
        {
          "shortName": "AndroidLintUnsupportedChromeOsCameraSystemFeature",
          "displayName": "Looking for Rear Camera only feature",
          "enabled": false,
          "description": "<html><body>Looking for Rear Camera only feature<br><br>You should look for the <code>FEATURE_CAMERA_ANY</code> features to include all<br/>\npossible cameras that may be on the device. Looking for <code>FEATURE_CAMERA</code><br/>\nonly looks for a rear facing camera, which certain tablets or Chrome OS<br/>\ndevices don't have. To fix the issue, look for <code>FEATURE_CAMERA_ANY</code> instead.<br><br>Issue id: UnsupportedChromeOsCameraSystemFeature</body></html>"
        },
        {
          "shortName": "AndroidLintFontValidationError",
          "displayName": "Validation of font files",
          "enabled": false,
          "description": "<html><body>Validation of font files<br><br>Look for problems in various font files.<br><br>Issue id: FontValidationError<br><br><a href=\"https://developer.android.com/guide/topics/text/downloadable-fonts.html\">https://developer.android.com/guide/topics/text/downloadable-fonts.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintCutPasteId",
          "displayName": "Likely cut & paste mistakes",
          "enabled": false,
          "description": "<html><body>Likely cut &amp; paste mistakes<br><br>This lint check looks for cases where you have cut &amp; pasted calls to <code>findViewById</code> but have forgotten to update the R.id field. It's possible that your code is simply (redundantly) looking up the field repeatedly, but lint cannot distinguish that from a case where you for example want to initialize fields <code>prev</code> and <code>next</code> and you cut &amp; pasted <code>findViewById(R.id.prev)</code> and forgot to update the second initialization to <code>R.id.next</code>.<br><br>Issue id: CutPasteId</body></html>"
        },
        {
          "shortName": "AndroidLintStopShip",
          "displayName": "Code contains STOPSHIP marker",
          "enabled": false,
          "description": "<html><body>Code contains <code>STOPSHIP</code> marker<br><br>Using the comment <code>// STOPSHIP</code> can be used to flag code that is incomplete but checked in. This comment marker can be used to indicate that the code should not be shipped until the issue is addressed, and lint will look for these.  In Gradle projects, this is only checked for non-debug (release) builds.<br><br>Issue id: StopShip</body></html>"
        },
        {
          "shortName": "AndroidLintWifiManagerPotentialLeak",
          "displayName": "WifiManager Leak",
          "enabled": false,
          "description": "<html><body>WifiManager Potential Leak<br><br>On versions prior to Android N (24), initializing the <code>WifiManager</code> via <code>Context#getSystemService</code> can cause a memory leak if the context is not the application context.<br/>\n<br/>\nIn many cases, it's not obvious from the code where the <code>Context</code> is coming from (e.g. it might be a parameter to a method, or a field initialized from various method calls). It's possible that the context being passed in is the application context, but to be on the safe side, you should consider changing <code>context.getSystemService(...)</code> to <code>context.getApplicationContext().getSystemService(...)</code>.<br><br>Issue id: WifiManagerPotentialLeak</body></html>"
        },
        {
          "shortName": "AndroidLintEllipsizeMaxLines",
          "displayName": "Combining Ellipsize and Maxlines",
          "enabled": false,
          "description": "<html><body>Combining Ellipsize and Maxlines<br><br>Combining <code>ellipsize</code> and <code>maxLines=1</code> can lead to crashes on some devices. Earlier versions of lint recommended replacing <code>singleLine=true</code> with <code>maxLines=1</code> but that should not be done when using <code>ellipsize</code>.<br><br>Issue id: EllipsizeMaxLines<br><br><a href=\"https://issuetracker.google.com/issues/36950033\">https://issuetracker.google.com/issues/36950033</a></body></html>"
        },
        {
          "shortName": "AndroidLintNamespaceTypo",
          "displayName": "Misspelled namespace declaration",
          "enabled": false,
          "description": "<html><body>Misspelled namespace declaration<br><br>Accidental misspellings in namespace declarations can lead to some very obscure error messages. This check looks for potential misspellings to help track these down.<br><br>Issue id: NamespaceTypo</body></html>"
        },
        {
          "shortName": "AndroidLintValidRestrictions",
          "displayName": "Invalid Restrictions Descriptor",
          "enabled": false,
          "description": "<html><body>Invalid Restrictions Descriptor<br><br>Ensures that an applications restrictions XML file is properly formed<br><br>Issue id: ValidRestrictions<br><br><a href=\"https://developer.android.com/reference/android/content/RestrictionsManager.html\">https://developer.android.com/reference/android/content/RestrictionsManager.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintUniqueConstants",
          "displayName": "Overlapping Enumeration Constants",
          "enabled": false,
          "description": "<html><body>Overlapping Enumeration Constants<br><br>The <code>@IntDef</code> annotation allows you to create a light-weight \"enum\" or type definition. However, it's possible to accidentally specify the same value for two or more of the values, which can lead to hard-to-detect bugs. This check looks for this scenario and flags any repeated constants.<br/>\n<br/>\nIn some cases, the repeated constant is intentional (for example, renaming a constant to a more intuitive name, and leaving the old name in place for compatibility purposes).  In that case, simply suppress this check by adding a <code>@SuppressLint(\"UniqueConstants\")</code> annotation.<br><br>Issue id: UniqueConstants</body></html>"
        },
        {
          "shortName": "AndroidLintInvalidAnalyticsName",
          "displayName": "Invalid Analytics name",
          "enabled": false,
          "description": "<html><body>Invalid Analytics Name<br><br>Event names and parameters must follow the naming conventions defined in the`FirebaseAnalytics#logEvent()` documentation.<br><br>Issue id: InvalidAnalyticsName<br><br><a href=\"http://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics#logEvent(java.lang.String,%20android.os.Bundle)\">http://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics#logEvent(java.lang.String,%20android.os.Bundle)</a></body></html>"
        },
        {
          "shortName": "AndroidLintPrivateApi",
          "displayName": "Using Private APIs",
          "enabled": false,
          "description": "<html><body>Using Private APIs<br><br>Using reflection to access hidden/private Android APIs is not safe; it will often not work on devices from other vendors, and it may suddenly stop working (if the API is removed) or crash spectacularly (if the API behavior changes, since there are no guarantees for compatibility).<br><br>Issue id: PrivateApi<br><br><a href=\"https://developer.android.com/preview/restrictions-non-sdk-interfaces\">https://developer.android.com/preview/restrictions-non-sdk-interfaces</a></body></html>"
        },
        {
          "shortName": "AndroidLintGradleDependency",
          "displayName": "Obsolete Gradle Dependency",
          "enabled": false,
          "description": "<html><body>Obsolete Gradle Dependency<br><br>This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find.<br><br>Issue id: GradleDependency</body></html>"
        },
        {
          "shortName": "AndroidLintFullBackupContent",
          "displayName": "Valid Full Backup Content File",
          "enabled": false,
          "description": "<html><body>Valid Full Backup Content File<br><br>Ensures that a <code>&lt;full-backup-content></code> file, which is pointed to by a <code>android:fullBackupContent attribute</code> in the manifest file, is valid<br><br>Issue id: FullBackupContent<br><br><a href=\"http://android-developers.blogspot.com/2015/07/auto-backup-for-apps-made-simple.html\">http://android-developers.blogspot.com/2015/07/auto-backup-for-apps-made-simple.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintLockedOrientationActivity",
          "displayName": "Activity is locked to an orientation",
          "enabled": false,
          "description": "<html><body>Activity is locked to an orientation<br><br>The <code>&lt;activity></code> element should not be locked to any orientation so that users can take advantage of the multi-window environments and larger screens on Chrome OS. To fix the issue, consider declaring the corresponding activity element with `screenOrientation=\"unspecified\"<code>or </code>\"fullSensor\"` attribute.<br><br>Issue id: LockedOrientationActivity<br><br><a href=\"https://developer.android.com/topic/arc/window-management\">https://developer.android.com/topic/arc/window-management</a></body></html>"
        },
        {
          "shortName": "AndroidLintVisibleForTests",
          "displayName": "Visible Only For Tests",
          "enabled": false,
          "description": "<html><body>Visible Only For Tests<br><br>With the <code>@VisibleForTesting</code> annotation you can specify an <code>otherwise=</code> attribute which specifies the intended visibility if the method had not been made more widely visible for the tests.<br/>\n<br/>\nThis check looks for accesses from production code (e.g. not tests) where the access would not have been allowed with the intended production visibility.<br><br>Issue id: VisibleForTests</body></html>"
        },
        {
          "shortName": "AndroidLintManifestResource",
          "displayName": "Manifest Resource References",
          "enabled": false,
          "description": "<html><body>Manifest Resource References<br><br>Elements in the manifest can reference resources, but those resources cannot vary across configurations (except as a special case, by version, and except for a few specific package attributes such as the application title and icon).<br><br>Issue id: ManifestResource</body></html>"
        },
        {
          "shortName": "AndroidLintMissingBackupPin",
          "displayName": "Missing Backup Pin",
          "enabled": false,
          "description": "<html><body>Missing Backup Pin<br><br>It is highly recommended to declare a backup <code>&lt;pin></code> element. Not having a second pin defined can cause connection failures when the particular site certificate is rotated and the app has not yet been updated.<br><br>Issue id: MissingBackupPin<br><br><a href=\"https://developer.android.com/preview/features/security-config.html\">https://developer.android.com/preview/features/security-config.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintAppLinksAutoVerifyWarning",
          "displayName": "Potential App Links Auto Verification Failure",
          "enabled": false,
          "description": "<html><body>Potential App Links Auto Verification Failure<br><br>Ensures that app links are correctly set and associated with website.<br><br>Issue id: AppLinksAutoVerifyWarning<br><br><a href=\"https://g.co/appindexing/applinks\">https://g.co/appindexing/applinks</a></body></html>"
        },
        {
          "shortName": "AndroidLintPendingBindings",
          "displayName": "Missing Pending Bindings",
          "enabled": false,
          "description": "<html><body>Missing Pending Bindings<br><br>When using a <code>ViewDataBinding</code> in a <code>onBindViewHolder</code> method, you <b>must</b> call <code>executePendingBindings()</code> before the method exits; otherwise the data binding runtime will update the UI in the next animation frame causing a delayed update and potential jumps if the item resizes.<br><br>Issue id: PendingBindings</body></html>"
        },
        {
          "shortName": "AndroidLintLocalSuppress",
          "displayName": "@SuppressLint on invalid element",
          "enabled": false,
          "description": "<html><body>@SuppressLint on invalid element<br><br>The <code>@SuppressAnnotation</code> is used to suppress Lint warnings in Java files. However, while many lint checks analyzes the Java source code, where they can find annotations on (for example) local variables, some checks are analyzing the <code>.class</code> files. And in class files, annotations only appear on classes, fields and methods. Annotations placed on local variables disappear. If you attempt to suppress a lint error for a class-file based lint check, the suppress annotation not work. You must move the annotation out to the surrounding method.<br><br>Issue id: LocalSuppress</body></html>"
        },
        {
          "shortName": "AndroidLintUniquePermission",
          "displayName": "Permission names are not unique",
          "enabled": false,
          "description": "<html><body>Permission names are not unique<br><br>The unqualified names or your permissions must be unique. The reason for this is that at build time, the <code>aapt</code> tool will generate a class named <code>Manifest</code> which contains a field for each of your permissions. These fields are named using your permission unqualified names (i.e. the name portion after the last dot).<br/>\n<br/>\nIf more than one permission maps to the same field name, that field will arbitrarily name just one of them.<br><br>Issue id: UniquePermission</body></html>"
        },
        {
          "shortName": "AndroidLintWrongViewCast",
          "displayName": "Mismatched view type",
          "enabled": false,
          "description": "<html><body>Mismatched view type<br><br>Keeps track of the view types associated with ids and if it finds a usage of the id in the Java code it ensures that it is treated as the same type.<br><br>Issue id: WrongViewCast</body></html>"
        },
        {
          "shortName": "AndroidLintNonResizeableActivity",
          "displayName": "Activity is set to be non resizeable",
          "enabled": false,
          "description": "<html><body>Activity is set to be non resizeable<br><br>The <code>&lt;activity></code> element should be allowed to be resized to allow users to take advantage of the multi-window environment on Chrome OS To fix the issue, consider declaring the corresponding activity element with <code>resizableActivity=\"true\"</code> attribute.<br><br>Issue id: NonResizeableActivity<br><br><a href=\"https://developer.android.com/topic/arc/window-management\">https://developer.android.com/topic/arc/window-management</a></body></html>"
        },
        {
          "shortName": "AndroidLintPxUsage",
          "displayName": "Using 'px' dimension",
          "enabled": false,
          "description": "<html><body>Using 'px' dimension<br><br>For performance reasons and to keep the code simpler, the Android system uses pixels as the standard unit for expressing dimension or coordinate values. That means that the dimensions of a view are always expressed in the code using pixels, but always based on the current screen density. For instance, if <code>myView.getWidth()</code> returns 10, the view is 10 pixels wide on the current screen, but on a device with a higher density screen, the value returned might be 15. If you use pixel values in your application code to work with bitmaps that are not pre-scaled for the current screen density, you might need to scale the pixel values that you use in your code to match the un-scaled bitmap source.<br><br>Issue id: PxUsage<br><br><a href=\"http://developer.android.com/guide/practices/screens_support.html#screen-independence\">http://developer.android.com/guide/practices/screens_support.html#screen-independence</a></body></html>"
        },
        {
          "shortName": "AndroidLintPermissionImpliesUnsupportedHardware",
          "displayName": "Permission Implies Unsupported Hardware",
          "enabled": false,
          "description": "<html><body>Permission Implies Unsupported Hardware<br><br>The &lt;uses-permission> element should not require a permission that implies an unsupported TV hardware feature. Google Play assumes that certain hardware related permissions indicate that the underlying hardware features are required by default. To fix the issue, consider declaring the corresponding uses-feature element with required=\"false\" attribute.<br><br>Issue id: PermissionImpliesUnsupportedHardware<br><br><a href=\"http://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions\">http://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions</a></body></html>"
        },
        {
          "shortName": "AndroidLintProguard",
          "displayName": "Using obsolete ProGuard configuration",
          "enabled": false,
          "description": "<html><body>Using obsolete ProGuard configuration<br><br>Using <code>-keepclasseswithmembernames</code> in a proguard config file is not correct; it can cause some symbols to be renamed which should not be.<br/>\nEarlier versions of ADT used to create proguard.cfg files with the wrong format. Instead of <code>-keepclasseswithmembernames</code> use <code>-keepclasseswithmembers</code>, since the old flags also implies \"allow shrinking\" which means symbols only referred to from XML and not Java (such as possibly CustomViews) can get deleted.<br><br>Issue id: Proguard<br><br><a href=\"http://http://code.google.com/p/android/issues/detail?id=16384\">http://http://code.google.com/p/android/issues/detail?id=16384</a></body></html>"
        },
        {
          "shortName": "AndroidLintNfcTechWhitespace",
          "displayName": "Whitespace in NFC tech lists",
          "enabled": false,
          "description": "<html><body>Whitespace in NFC tech lists<br><br>In a &lt;tech-list>, there can be whitespace around the &lt;tech> elements,but not inside them. This is because the code which reads in the tech list is currently very strict and will include the whitespace as part of the name.<br/>\n<br/>\nIn other words, use &lt;tech>name&lt;/tech>, not &lt;tech> name &lt;/tech>.<br><br>Issue id: NfcTechWhitespace<br><br><a href=\"https://code.google.com/p/android/issues/detail?id=65351\">https://code.google.com/p/android/issues/detail?id=65351</a></body></html>"
        },
        {
          "shortName": "AndroidLintInconsistentArrays",
          "displayName": "Inconsistencies in array element counts",
          "enabled": false,
          "description": "<html><body>Inconsistencies in array element counts<br><br>When an array is translated in a different locale, it should normally have the same number of elements as the original array. When adding or removing elements to an array, it is easy to forget to update all the locales, and this lint warning finds inconsistencies like these.<br/>\n<br/>\nNote however that there may be cases where you really want to declare a different number of array items in each configuration (for example where the array represents available options, and those options differ for different layout orientations and so on), so use your own judgement to decide if this is really an error.<br/>\n<br/>\nYou can suppress this error type if it finds false errors in your project.<br><br>Issue id: InconsistentArrays</body></html>"
        },
        {
          "shortName": "AndroidLintMissingLeanbackLauncher",
          "displayName": "Missing Leanback Launcher Intent Filter.",
          "enabled": false,
          "description": "<html><body>Missing Leanback Launcher Intent Filter.<br><br>An application intended to run on TV devices must declare a launcher activity for TV in its manifest using a <code>android.intent.category.LEANBACK_LAUNCHER</code> intent filter.<br><br>Issue id: MissingLeanbackLauncher<br><br><a href=\"https://developer.android.com/training/tv/start/start.html#tv-activity\">https://developer.android.com/training/tv/start/start.html#tv-activity</a></body></html>"
        },
        {
          "shortName": "AndroidLintCustomViewStyleable",
          "displayName": "Mismatched Styleable/Custom View Name",
          "enabled": false,
          "description": "<html><body>Mismatched Styleable/Custom View Name<br><br>The convention for custom views is to use a <code>declare-styleable</code> whose name matches the custom view class name. The IDE relies on this convention such that for example code completion can be offered for attributes in a custom view in layout XML resource files.<br/>\n<br/>\n(Similarly, layout parameter classes should use the suffix <code>_Layout</code>.)<br><br>Issue id: CustomViewStyleable</body></html>"
        },
        {
          "shortName": "AndroidLintReferenceType",
          "displayName": "Incorrect reference types",
          "enabled": false,
          "description": "<html><body>Incorrect reference types<br><br>When you generate a resource alias, the resource you are pointing to must be of the same type as the alias<br><br>Issue id: ReferenceType</body></html>"
        },
        {
          "shortName": "AndroidLintTextViewEdits",
          "displayName": "TextView should probably be an EditText instead",
          "enabled": false,
          "description": "<html><body>TextView should probably be an EditText instead<br><br>Using a <code>&lt;TextView></code> to input text is generally an error, you should be using <code>&lt;EditText></code> instead.  <code>EditText</code> is a subclass of <code>TextView</code>, and some of the editing support is provided by <code>TextView</code>, so it's possible to set some input-related properties on a <code>TextView</code>. However, using a <code>TextView</code> along with input attributes is usually a cut &amp; paste error. To input text you should be using <code>&lt;EditText></code>.<br/>\n<br/>\nThis check also checks subclasses of <code>TextView</code>, such as <code>Button</code> and <code>CheckBox</code>, since these have the same issue: they should not be used with editable attributes.<br><br>Issue id: TextViewEdits</body></html>"
        },
        {
          "shortName": "AndroidLintRange",
          "displayName": "Outside Range",
          "enabled": false,
          "description": "<html><body>Outside Range<br><br>Some parameters are required to in a particular numerical range; this check makes sure that arguments passed fall within the range. For arrays, Strings and collections this refers to the size or length.<br><br>Issue id: Range</body></html>"
        },
        {
          "shortName": "AndroidLintXmlEscapeNeeded",
          "displayName": "Missing XML Escape",
          "enabled": false,
          "description": "<html><body>Missing XML Escape<br><br>When a string contains characters that have special usage in XML, you must escape the characters.<br><br>Issue id: XmlEscapeNeeded</body></html>"
        },
        {
          "shortName": "AndroidLintLongLogTag",
          "displayName": "Too Long Log Tags",
          "enabled": false,
          "description": "<html><body>Too Long Log Tags<br><br>Log tags are only allowed to be at most 23 tag characters long.<br><br>Issue id: LongLogTag</body></html>"
        },
        {
          "shortName": "AndroidLintStringShouldBeInt",
          "displayName": "String should be int",
          "enabled": false,
          "description": "<html><body>String should be int<br><br>The properties <code>compileSdkVersion</code>, <code>minSdkVersion</code> and <code>targetSdkVersion</code> are usually numbers, but can be strings when you are using an add-on (in the case of <code>compileSdkVersion</code>) or a preview platform (for the other two properties).<br/>\n<br/>\nHowever, you can not use a number as a string (e.g. \"19\" instead of 19); that will result in a platform not found error message at build/sync time.<br><br>Issue id: StringShouldBeInt</body></html>"
        },
        {
          "shortName": "AndroidLintInvalidImeActionId",
          "displayName": "Invalid imeActionId declaration",
          "enabled": false,
          "description": "<html><body>Invalid imeActionId declaration<br><br>android:imeActionId should not be a resourceId such as @+id/resName. It must be an integer constant, or an integer resource reference, as defined in EditorInfo.<br><br>Issue id: InvalidImeActionId<br><br><a href=\"https://developer.android.com/reference/android/view/inputmethod/EditorInfo.html\">https://developer.android.com/reference/android/view/inputmethod/EditorInfo.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintOnClick",
          "displayName": "onClick method does not exist",
          "enabled": false,
          "description": "<html><body><code>onClick</code> method does not exist<br><br>The <code>onClick</code> attribute value should be the name of a method in this View's context to invoke when the view is clicked. This name must correspond to a public method that takes exactly one parameter of type <code>View</code>.<br/>\n<br/>\nMust be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.<br><br>Issue id: OnClick</body></html>"
        },
        {
          "shortName": "AndroidLintInstantApps",
          "displayName": "Instant App Issues",
          "enabled": false,
          "description": "<html><body>Instant App Issues<br><br>This issue flags code that will not work correctly in Instant Apps<br><br>Issue id: InstantApps</body></html>"
        },
        {
          "shortName": "AndroidLintMissingLeanbackSupport",
          "displayName": "Missing Leanback Support.",
          "enabled": false,
          "description": "<html><body>Missing Leanback Support.<br><br>The manifest should declare the use of the Leanback user interface required by Android TV.<br/>\nTo fix this, add\n<pre>\n`&lt;uses-feature android:name=\"android.software.leanback\"   android:required=\"false\" />`\n</pre>\nto your manifest.<br><br>Issue id: MissingLeanbackSupport<br><br><a href=\"https://developer.android.com/training/tv/start/start.html#leanback-req\">https://developer.android.com/training/tv/start/start.html#leanback-req</a></body></html>"
        },
        {
          "shortName": "AndroidLintWrongRegion",
          "displayName": "Suspicious Language/Region Combination",
          "enabled": false,
          "description": "<html><body>Suspicious Language/Region Combination<br><br>Android uses the letter codes ISO 639-1 for languages, and the letter codes ISO 3166-1 for the region codes. In many cases, the language code and the country where the language is spoken is the same, but it is also often not the case. For example, while 'se' refers to Sweden, where Swedish is spoken, the language code for Swedish is <b>not</b> <code>se</code> (which refers to the Northern Sami language), the language code is <code>sv</code>. And similarly the region code for <code>sv</code> is El Salvador.<br/>\n<br/>\nThis lint check looks for suspicious language and region combinations, to help catch cases where you've accidentally used the wrong language or region code. Lint knows about the most common regions where a language is spoken, and if a folder combination is not one of these, it is flagged as suspicious.<br/>\n<br/>\nNote however that it may not be an error: you can theoretically have speakers of any language in any region and want to target that with your resources, so this check is aimed at tracking down likely mistakes, not to enforce a specific set of region and language combinations.<br><br>Issue id: WrongRegion</body></html>"
        },
        {
          "shortName": "AndroidLintMissingFirebaseInstanceTokenRefresh",
          "displayName": "Missing onRefreshToken callback",
          "enabled": false,
          "description": "<html><body>Missing Firebase Messaging Callback<br><br>Apps that use Firebase Cloud Messaging should implement the <code>FirebaseMessagingService#onNewToken()</code> callback in order to observe token changes.<br><br>Issue id: MissingFirebaseInstanceTokenRefresh<br><br><a href=\"https://firebase.google.com/docs/cloud-messaging/android/client#monitor-token-generation\">https://firebase.google.com/docs/cloud-messaging/android/client#monitor-token-generation</a></body></html>"
        },
        {
          "shortName": "AndroidLintIncludeLayoutParam",
          "displayName": "Ignored layout params on include",
          "enabled": false,
          "description": "<html><body>Ignored layout params on include<br><br>Layout parameters specified on an <code>&lt;include></code> tag will only be used if you also override <code>layout_width</code> and <code>layout_height</code> on the <code>&lt;include></code> tag; otherwise they will be ignored.<br><br>Issue id: IncludeLayoutParam<br><br><a href=\"http://stackoverflow.com/questions/2631614/does-android-xml-layouts-include-tag-really-work\">http://stackoverflow.com/questions/2631614/does-android-xml-layouts-include-tag-really-work</a></body></html>"
        },
        {
          "shortName": "AndroidLintMissingConstraints",
          "displayName": "Missing Constraints in ConstraintLayout",
          "enabled": false,
          "description": "<html><body>Missing Constraints in ConstraintLayout<br><br>The layout editor allows you to place widgets anywhere on the canvas, and it records the current position with designtime attributes (such as <code>layout_editor_absoluteX</code>). These attributes are <b>not</b> applied at runtime, so if you push your layout on a device, the widgets may appear in a different location than shown in the editor. To fix this, make sure a widget has both horizontal and vertical constraints by dragging from the edge connections.<br><br>Issue id: MissingConstraints</body></html>"
        },
        {
          "shortName": "AndroidLintSuspiciousImport",
          "displayName": "'import android.R' statement",
          "enabled": false,
          "description": "<html><body>'<code>import android.R</code>' statement<br><br>Importing <code>android.R</code> is usually not intentional; it sometimes happens when you use an IDE and ask it to automatically add imports at a time when your project's R class it not present.<br/>\n<br/>\nOnce the import is there you might get a lot of \"confusing\" error messages because of course the fields available on <code>android.R</code> are not the ones you'd expect from just looking at your own <code>R</code> class.<br><br>Issue id: SuspiciousImport</body></html>"
        },
        {
          "shortName": "AndroidLintWrongCall",
          "displayName": "Using wrong draw/layout method",
          "enabled": false,
          "description": "<html><body>Using wrong draw/layout method<br><br>Custom views typically need to call <code>measure()</code> on their children, not <code>onMeasure</code>. Ditto for onDraw, onLayout, etc.<br><br>Issue id: WrongCall</body></html>"
        },
        {
          "shortName": "AndroidLintJobSchedulerService",
          "displayName": "JobScheduler problems",
          "enabled": false,
          "description": "<html><body>JobScheduler problems<br><br>This check looks for various common mistakes in using the JobScheduler API: the service class must extend <code>JobService</code>, the service must be registered in the manifest and the registration must require the permission <code>android.permission.BIND_JOB_SERVICE</code>.<br><br>Issue id: JobSchedulerService<br><br><a href=\"https://developer.android.com/topic/performance/scheduling.html\">https://developer.android.com/topic/performance/scheduling.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintAppCompatMethod",
          "displayName": "Using Wrong AppCompat Method",
          "enabled": false,
          "description": "<html><body>Using Wrong AppCompat Method<br><br>When using the appcompat library, there are some methods you should be calling instead of the normal ones; for example, <code>getSupportActionBar()</code> instead of <code>getActionBar()</code>. This lint check looks for calls to the wrong method.<br><br>Issue id: AppCompatMethod<br><br><a href=\"http://developer.android.com/tools/support-library/index.html\">http://developer.android.com/tools/support-library/index.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintRecyclerView",
          "displayName": "RecyclerView Problems",
          "enabled": false,
          "description": "<html><body>RecyclerView Problems<br><br><code>RecyclerView</code> will <b>not</b> call <code>onBindViewHolder</code> again when the position of the item changes in the data set unless the item itself is invalidated or the new position cannot be determined.<br/>\n<br/>\nFor this reason, you should <b>only</b> use the position parameter while acquiring the related data item inside this method, and should <b>not</b> keep a copy of it.<br/>\n<br/>\nIf you need the position of an item later on (e.g. in a click listener), use <code>getAdapterPosition()</code> which will have the updated adapter position.<br><br>Issue id: RecyclerView</body></html>"
        },
        {
          "shortName": "AndroidLintMissingSuperCall",
          "displayName": "Missing Super Call",
          "enabled": false,
          "description": "<html><body>Missing Super Call<br><br>Some methods, such as <code>View#onDetachedFromWindow</code>, require that you also call the super implementation as part of your method.<br><br>Issue id: MissingSuperCall</body></html>"
        },
        {
          "shortName": "AndroidLintParcelCreator",
          "displayName": "Missing Parcelable CREATOR field",
          "enabled": false,
          "description": "<html><body>Missing Parcelable <code>CREATOR</code> field<br><br>According to the <code>Parcelable</code> interface documentation, \"Classes implementing the Parcelable interface must also have a static field called <code>CREATOR</code>, which is an object implementing the <code>Parcelable.Creator</code> interface.\"<br><br>Issue id: ParcelCreator<br><br><a href=\"http://developer.android.com/reference/android/os/Parcelable.html\">http://developer.android.com/reference/android/os/Parcelable.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintLocaleFolder",
          "displayName": "Wrong locale name",
          "enabled": false,
          "description": "<html><body>Wrong locale name<br><br>From the <code>java.util.Locale</code> documentation:<br/>\n\"Note that Java uses several deprecated two-letter codes. The Hebrew (\"he\") language code is rewritten as \"iw\", Indonesian (\"id\") as \"in\", and Yiddish (\"yi\") as \"ji\". This rewriting happens even if you construct your own Locale object, not just for instances returned by the various lookup methods.<br/>\n<br/>\nBecause of this, if you add your localized resources in for example <code>values-he</code> they will not be used, since the system will look for <code>values-iw</code> instead.<br/>\n<br/>\nTo work around this, place your resources in a <code>values</code> folder using the deprecated language code instead.<br><br>Issue id: LocaleFolder<br><br><a href=\"http://developer.android.com/reference/java/util/Locale.html\">http://developer.android.com/reference/java/util/Locale.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintScrollViewSize",
          "displayName": "ScrollView size validation",
          "enabled": false,
          "description": "<html><body>ScrollView size validation<br><br>ScrollView children must set their <code>layout_width</code> or <code>layout_height</code> attributes to <code>wrap_content</code> rather than <code>fill_parent</code> or <code>match_parent</code> in the scrolling dimension<br><br>Issue id: ScrollViewSize</body></html>"
        },
        {
          "shortName": "AndroidLintParcelClassLoader",
          "displayName": "Default Parcel Class Loader",
          "enabled": false,
          "description": "<html><body>Default Parcel Class Loader<br><br>The documentation for <code>Parcel#readParcelable(ClassLoader)</code> (and its variations) says that you can pass in <code>null</code> to pick up the default class loader. However, that ClassLoader is a system class loader and is not able to find classes in your own application.<br/>\n<br/>\nIf you are writing your own classes into the <code>Parcel</code> (not just SDK classes like <code>String</code> and so on), then you should supply a <code>ClassLoader</code> for your application instead; a simple way to obtain one is to just call <code>getClass().getClassLoader()</code> from your own class.<br><br>Issue id: ParcelClassLoader<br><br><a href=\"http://developer.android.com/reference/android/os/Parcel.html\">http://developer.android.com/reference/android/os/Parcel.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintImplicitSamInstance",
          "displayName": "Implicit SAM Instances",
          "enabled": false,
          "description": "<html><body>Implicit SAM Instances<br><br>Kotlin's support for SAM (single accessor method) interfaces lets you pass a lambda to the interface. This will create a new instance on the fly even though there is no explicit constructor call. If you pass one of these lambdas or method references into a method which (for example) stores or compares the object identity, unexpected results may happen.<br><br>Issue id: ImplicitSamInstance</body></html>"
        },
        {
          "shortName": "AndroidLintDeviceAdmin",
          "displayName": "Malformed Device Admin",
          "enabled": false,
          "description": "<html><body>Malformed Device Admin<br><br>If you register a broadcast receiver which acts as a device admin, you must also register an <code>&lt;intent-filter></code> for the action <code>android.app.action.DEVICE_ADMIN_ENABLED</code>, without any <code>&lt;data></code>, such that the device admin can be activated/deactivated.<br/>\n<br/>\nTo do this, add\n<pre>\n`&lt;intent-filter>`\n    `&lt;action android:name=\"android.app.action.DEVICE_ADMIN_ENABLED\" />`\n`&lt;/intent-filter>`\n</pre>\nto your <code>&lt;receiver></code>.<br><br>Issue id: DeviceAdmin</body></html>"
        },
        {
          "shortName": "AndroidLintBrokenIterator",
          "displayName": "Broken Iterator",
          "enabled": false,
          "description": "<html><body>Broken Iterator<br><br><b>For LinkedHashMap:</b><br/>\n<br/>\nThe spliterators returned by <code>LinkedHashMap</code> in Android Nougat (API levels 24 and 25) use the wrong order (inconsistent with the iterators, which use the correct order), despite reporting <code>Spliterator.ORDERED</code>. You may use the following code fragments to obtain a correctly ordered <code>Spliterator</code> on API level 24 and 25:<br/>\n<br/>\nFor a Collection view <code>c = lhm.entrySet()</code>, <code>c = lhm.keySet()</code> or <code>c = lhm.values()</code>, use <code>java.util.Spliterators.spliterator(c, c.spliterator().characteristics())</code> instead of <code>c.spliterator()</code>.<br/>\n<br/>\nInstead of <code>c.stream()</code> or <code>c.parallelStream()</code>, use <code>java.util.stream.StreamSupport.stream(spliterator, false)</code> to construct a<br/>\n(nonparallel) Stream from such a <code>Spliterator</code>.<br/>\n<br/>\n<b>For Vector:</b><br/>\n<br/>\nThe <code>listIterator()</code> returned for a <code>Vector</code> has a broken <code>add()</code> implementation on Android N (API level 24). Consider switching to <code>ArrayList</code> and if necessary adding synchronization.<br><br>Issue id: BrokenIterator<br><br><a href=\"https://developer.android.com/reference/java/util/LinkedHashMap\">https://developer.android.com/reference/java/util/LinkedHashMap</a></body></html>"
        },
        {
          "shortName": "AndroidLintUnusedQuantity",
          "displayName": "Unused quantity translations",
          "enabled": false,
          "description": "<html><body>Unused quantity translations<br><br>Android defines a number of different quantity strings, such as <code>zero</code>, <code>one</code>, <code>few</code> and <code>many</code>. However, many languages do not distinguish grammatically between all these different quantities.<br/>\n<br/>\nThis lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up).<br/>\n<br/>\nFor example, in Chinese, only the <code>other</code> quantity is used, so even if you provide translations for <code>zero</code> and <code>one</code>, these strings will <b>not</b> be returned when <code>getQuantityString()</code> is called, even with <code>0</code> or <code>1</code>.<br><br>Issue id: UnusedQuantity<br><br><a href=\"http://developer.android.com/guide/topics/resources/string-resource.html#Plurals\">http://developer.android.com/guide/topics/resources/string-resource.html#Plurals</a></body></html>"
        },
        {
          "shortName": "AndroidLintSuspicious0dp",
          "displayName": "Suspicious 0dp dimension",
          "enabled": false,
          "description": "<html><body>Suspicious 0dp dimension<br><br>Using 0dp as the width in a horizontal LinearLayout with weights is a useful trick to ensure that only the weights (and not the intrinsic sizes) are used when sizing the children.<br/>\n<br/>\nHowever, if you use 0dp for the opposite dimension, the view will be invisible. This can happen if you change the orientation of a layout without also flipping the 0dp dimension in all the children.<br><br>Issue id: Suspicious0dp</body></html>"
        },
        {
          "shortName": "AndroidLintWrongConstant",
          "displayName": "Incorrect constant",
          "enabled": false,
          "description": "<html><body>Incorrect constant<br><br>Ensures that when parameter in a method only allows a specific set of constants, calls obey those rules.<br><br>Issue id: WrongConstant</body></html>"
        },
        {
          "shortName": "AndroidLintMultipleUsesSdk",
          "displayName": "Multiple <uses-sdk> elements in the manifest",
          "enabled": false,
          "description": "<html><body>Multiple <code>&lt;uses-sdk></code> elements in the manifest<br><br>The <code>&lt;uses-sdk></code> element should appear just once; the tools will <b>not</b> merge the contents of all the elements so if you split up the attributes across multiple elements, only one of them will take effect. To fix this, just merge all the attributes from the various elements into a single &lt;uses-sdk> element.<br><br>Issue id: MultipleUsesSdk<br><br><a href=\"http://developer.android.com/guide/topics/manifest/uses-sdk-element.html\">http://developer.android.com/guide/topics/manifest/uses-sdk-element.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintNewApi",
          "displayName": "Calling new methods on older versions",
          "enabled": false,
          "description": "<html><body>Calling new methods on older versions<br><br>This check scans through all the Android API calls in the application and warns about any calls that are not available on <b>all</b> versions targeted by this application (according to its minimum SDK attribute in the manifest).<br/>\n<br/>\nIf you really want to use this API and don't need to support older devices just set the <code>minSdkVersion</code> in your <code>build.gradle</code> or <code>AndroidManifest.xml</code> files.<br/>\n<br/>\nIf your code is <b>deliberately</b> accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the <code>@TargetApi</code> annotation specifying the local minimum SDK to apply, such as <code>@TargetApi(11)</code>, such that this check considers 11 rather than your manifest file's minimum SDK as the required API level.<br/>\n<br/>\nIf you are deliberately setting <code>android:</code> attributes in style definitions, make sure you place this in a <code>values-v</code><i>NN</i> folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.<br/>\n<br/>\nSimilarly, you can use tools:targetApi=\"11\" in an XML file to indicate that the element will only be inflated in an adequate context.<br><br>Issue id: NewApi</body></html>"
        },
        {
          "shortName": "AndroidLintMergeMarker",
          "displayName": "Code contains merge marker",
          "enabled": false,
          "description": "<html><body>Code contains merge marker<br><br>Many version control systems leave unmerged files with markers such as &lt;&lt;&lt; in the source code. This check looks for these markers, which are sometimes accidentally left in, particularly in resource files where they don't break compilation.<br><br>Issue id: MergeMarker</body></html>"
        },
        {
          "shortName": "AndroidLintGridLayout",
          "displayName": "GridLayout validation",
          "enabled": false,
          "description": "<html><body>GridLayout validation<br><br>Declaring a layout_row or layout_column that falls outside the declared size of a GridLayout's <code>rowCount</code> or <code>columnCount</code> is usually an unintentional error.<br><br>Issue id: GridLayout</body></html>"
        },
        {
          "shortName": "AndroidLintImpliedTouchscreenHardware",
          "displayName": "Missing declaration of uses-feature for touchscreen",
          "enabled": false,
          "description": "<html><body>Hardware feature touchscreen not explicitly marked as optional<br><br>Apps require the <code>android.hardware.touchscreen</code> feature by default. If you want your app to be available on TV, you must also explicitly declare that a touchscreen is not required as follows:<br/>\n<code>&lt;uses-feature android:name=\"android.hardware.touchscreen\" android:required=\"false\"/></code><br><br>Issue id: ImpliedTouchscreenHardware<br><br><a href=\"https://developer.android.com/guide/topics/manifest/uses-feature-element.html\">https://developer.android.com/guide/topics/manifest/uses-feature-element.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintGradleCompatible",
          "displayName": "Incompatible Gradle Versions",
          "enabled": false,
          "description": "<html><body>Incompatible Gradle Versions<br><br>There are some combinations of libraries, or tools and libraries, that are incompatible, or can lead to bugs. One such incompatibility is compiling with a version of the Android support libraries that is not the latest version (or in particular, a version lower than your <code>targetSdkVersion</code>).<br><br>Issue id: GradleCompatible</body></html>"
        },
        {
          "shortName": "AndroidLintUntranslatable",
          "displayName": "Translated Untranslatable",
          "enabled": false,
          "description": "<html><body>Translated Untranslatable<br><br>Strings can be marked with <code>translatable=false</code> to indicate that they are not intended to be translated, but are present in the resource file for other purposes (for example for non-display strings that should vary by some other configuration qualifier such as screen size or API level).<br/>\n<br/>\nThere are cases where translators accidentally translate these strings anyway, and lint will flag these occurrences with this lint check.<br><br>Issue id: Untranslatable</body></html>"
        },
        {
          "shortName": "AndroidLintInvalidUsesTagAttribute",
          "displayName": "Invalid name attribute for uses element.",
          "enabled": false,
          "description": "<html><body>Invalid <code>name</code> attribute for <code>uses</code> element.<br><br>The &lt;uses> element in <code>&lt;automotiveApp></code> should contain a valid value for the <code>name</code> attribute.<br/>\nValid values are <code>media</code>, <code>notification</code>, or <code>sms</code>.<br><br>Issue id: InvalidUsesTagAttribute<br><br><a href=\"https://developer.android.com/training/auto/start/index.html#auto-metadata\">https://developer.android.com/training/auto/start/index.html#auto-metadata</a></body></html>"
        },
        {
          "shortName": "AndroidLintTypos",
          "displayName": "Spelling error",
          "enabled": false,
          "description": "<html><body>Spelling error<br><br>This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged.<br><br>Issue id: Typos</body></html>"
        },
        {
          "shortName": "AndroidLintMissingTvBanner",
          "displayName": "TV Missing Banner",
          "enabled": false,
          "description": "<html><body>TV Missing Banner<br><br>A TV application must provide a home screen banner for each localization if it includes a Leanback launcher intent filter. The banner is the app launch point that appears on the home screen in the apps and games rows.<br><br>Issue id: MissingTvBanner<br><br><a href=\"http://developer.android.com/training/tv/start/start.html#banner\">http://developer.android.com/training/tv/start/start.html#banner</a></body></html>"
        },
        {
          "shortName": "AndroidLintDiscouragedPrivateApi",
          "displayName": "Using Private APIs",
          "enabled": false,
          "description": "<html><body>Using Discouraged Private API<br><br>Usage of restricted non-SDK interface may throw an exception at runtime. Accessing non-SDK methods or fields through reflection has a high likelihood to break your app between versions, and is being restricted to facilitate future app compatibility.<br><br>Issue id: DiscouragedPrivateApi<br><br><a href=\"https://developer.android.com/preview/restrictions-non-sdk-interfaces\">https://developer.android.com/preview/restrictions-non-sdk-interfaces</a></body></html>"
        },
        {
          "shortName": "AndroidLintSdCardPath",
          "displayName": "Hardcoded reference to /sdcard",
          "enabled": false,
          "description": "<html><body>Hardcoded reference to <code>/sdcard</code><br><br>Your code should not reference the <code>/sdcard</code> path directly; instead use <code>Environment.getExternalStorageDirectory().getPath()</code>.<br/>\n<br/>\nSimilarly, do not reference the <code>/data/data/</code> path directly; it can vary in multi-user scenarios. Instead, use <code>Context.getFilesDir().getPath()</code>.<br><br>Issue id: SdCardPath<br><br><a href=\"http://developer.android.com/guide/topics/data/data-storage.html#filesExternal\">http://developer.android.com/guide/topics/data/data-storage.html#filesExternal</a></body></html>"
        },
        {
          "shortName": "AndroidLintWebViewApiAvailability",
          "displayName": "WebView API Availability",
          "enabled": false,
          "description": "<html><body>WebView API Availability<br><br>The <code>androidx.webkit</code> library is a static library you can add to your Android application allowing you to use new APIs on older platform versions, targeting more devices.<br><br>Issue id: WebViewApiAvailability<br><br><a href=\"https://developer.android.com/reference/androidx/webkit/package-summary\">https://developer.android.com/reference/androidx/webkit/package-summary</a></body></html>"
        },
        {
          "shortName": "AndroidLintMissingVersion",
          "displayName": "Missing application name/version",
          "enabled": false,
          "description": "<html><body>Missing application name/version<br><br>You should define the version information for your application.<br/>\n<code>android:versionCode</code>: An integer value that represents the version of the application code, relative to other versions.<br/>\n<br/>\n<code>android:versionName</code>: A string value that represents the release version of the application code, as it should be shown to users.<br><br>Issue id: MissingVersion<br><br><a href=\"http://developer.android.com/tools/publishing/versioning.html#appversioning\">http://developer.android.com/tools/publishing/versioning.html#appversioning</a></body></html>"
        },
        {
          "shortName": "AndroidLintGradlePath",
          "displayName": "Gradle Path Issues",
          "enabled": false,
          "description": "<html><body>Gradle Path Issues<br><br>Gradle build scripts are meant to be cross platform, so file paths use Unix-style path separators (a forward slash) rather than Windows path separators (a backslash). Similarly, to keep projects portable and repeatable, avoid using absolute paths on the system; keep files within the project instead. To share code between projects, consider creating an android-library and an AAR dependency<br><br>Issue id: GradlePath</body></html>"
        },
        {
          "shortName": "AndroidLintWrongCase",
          "displayName": "Wrong case for view tag",
          "enabled": false,
          "description": "<html><body>Wrong case for view tag<br><br>Most layout tags, such as &lt;Button>, refer to actual view classes and are therefore capitalized. However, there are exceptions such as &lt;fragment> and &lt;include>. This lint check looks for incorrect capitalizations.<br><br>Issue id: WrongCase<br><br><a href=\"http://developer.android.com/guide/components/fragments.html\">http://developer.android.com/guide/components/fragments.html</a></body></html>"
        },
        {
          "shortName": "AndroidLintResAuto",
          "displayName": "Hardcoded Package in Namespace",
          "enabled": false,
          "description": "<html><body>Hardcoded Package in Namespace<br><br>In Gradle projects, the actual package used in the final APK can vary; for example,you can add a <code>.debug</code> package suffix in one version and not the other. Therefore, you should <b>not</b> hardcode the application package in the resource; instead, use the special namespace <code>http://schemas.android.com/apk/res-auto</code> which will cause the tools to figure out the right namespace for the resource regardless of the actual package used during the build.<br><br>Issue id: ResAuto</body></html>"
        },
        {
          "shortName": "AndroidLintExtraTranslation",
          "displayName": "Extra translation",
          "enabled": false,
          "description": "<html><body>Extra translation<br><br>If a string appears in a specific language translation file, but there is no corresponding string in the default locale, then this string is probably unused. (It's technically possible that your application is only intended to run in a specific locale, but it's still a good idea to provide a fallback.)<br/>\n<br/>\nNote that these strings can lead to crashes if the string is looked up on any locale not providing a translation, so it's important to clean them up.<br><br>Issue id: ExtraTranslation</body></html>"
        },
        {
          "shortName": "AndroidLintMissingId",
          "displayName": "Fragments should specify an id or tag",
          "enabled": false,
          "description": "<html><body>Fragments should specify an <code>id</code> or <code>tag</code><br><br>If you do not specify an android:id or an android:tag attribute on a &lt;fragment> element, then if the activity is restarted (for example for an orientation rotation) you may lose state. From the fragment documentation:<br/>\n<br/>\n\"Each fragment requires a unique identifier that the system can use to restore the fragment if the activity is restarted (and which you can use to capture the fragment to perform transactions, such as remove it).<br/>\n<br/>\n* Supply the android:id attribute with a unique ID.<br/>\n* Supply the android:tag attribute with a unique string.<br/>\nIf you provide neither of the previous two, the system uses the ID of the container view.<br><br>Issue id: MissingId<br><br><a href=\"http://developer.android.com/guide/components/fragments.html\">http://developer.android.com/guide/components/fragments.html</a></body></html>"
        }
      ]
    },
    {
      "name": "MongoJS",
      "inspections": [
        {
          "shortName": "MongoJSResolveInspection",
          "displayName": "Resolution problems",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection reports problems related to MongoJS reference resolution\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "XML",
      "inspections": [
        {
          "shortName": "SpringXmlModelInspection",
          "displayName": "Spring Model",
          "enabled": false,
          "description": "Spring XML model validation"
        },
        {
          "shortName": "XmlWrongRootElement",
          "displayName": "Wrong root element",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks if root tag name is the same as in &lt;doctype&gt;. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "XmlDefaultAttributeValue",
          "displayName": "Redundant default attribute value assignment",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for redundant default XML attribute value assignment.\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedClassUsageInspection",
          "displayName": "Deprecated API usage in XML",
          "enabled": true,
          "description": "<html>\n<body>\nChecks for usages of deprecated classes and methods in XML.\n</body>\n</html>"
        },
        {
          "shortName": "SpringRequiredPropertyInspection",
          "displayName": "Required Properties",
          "enabled": false,
          "description": "Checks bean properties marked with @Required annotation.<br>\nSee also <strong>Required Annotation Inspection</strong>"
        },
        {
          "shortName": "SpringFactoryMethodInspection",
          "displayName": "Spring Bean Factory Method",
          "enabled": false,
          "description": "Validates <strong>&lt;bean&gt;</strong> \"factory-method\"."
        },
        {
          "shortName": "UnparsedCustomBeanInspection",
          "displayName": "Unparsed custom Spring beans",
          "enabled": false,
          "description": "Reports custom Spring beans of unknown type (corresponding custom namespace handler not run yet)."
        },
        {
          "shortName": "SpringIncorrectResourceTypeInspection",
          "displayName": "Incorrect Resource Type",
          "enabled": false,
          "description": "Validates resource type (e.g. file type)"
        },
        {
          "shortName": "ContextComponentScanInconsistencyInspection",
          "displayName": "Context Component Scan",
          "enabled": false,
          "description": "Component-scan inconsistencies"
        },
        {
          "shortName": "XmlInvalidId",
          "displayName": "Unresolved ID",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for unresolved \"id\" attributes in XML.\n</body>\n</html>"
        },
        {
          "shortName": "SpringBeanInstantiationInspection",
          "displayName": "Spring Bean Instantiation",
          "enabled": false,
          "description": "Spring Bean Instantiation Inspection"
        },
        {
          "shortName": "XmlUnusedNamespaceDeclaration",
          "displayName": "Unused XML schema declaration",
          "enabled": false,
          "description": "<html>\n<body>\nChecks for unused namespace declarations and location hints in XML\n</body>\n</html>"
        },
        {
          "shortName": "SpringBeanNameConventionInspection",
          "displayName": "Spring Bean Names Convention",
          "enabled": false,
          "description": "Checks bean id to comply with recommended naming conventions."
        },
        {
          "shortName": "SpringInjectionValueStyleInspection",
          "displayName": "Spring Injection Value Style",
          "enabled": false,
          "description": "Checks for injection values set via <strong>&lt;value&gt;</strong> or\n<strong>&lt;ref&gt;</strong> subtags and offers to replace them with corresponding attributes."
        },
        {
          "shortName": "SpringBeanConstructorArgInspection",
          "displayName": "Constructor Tag Injection",
          "enabled": false,
          "description": "Validate Constructor Arg Injection"
        },
        {
          "shortName": "XmlHighlighting",
          "displayName": "XML highlighting",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights XML validation problems in the results of batch code inspection.\n</body>\n</html>"
        },
        {
          "shortName": "UtilSchemaInspection",
          "displayName": "Util Schema",
          "enabled": false,
          "description": "Validates Spring \"util\" scheme tags."
        },
        {
          "shortName": "SpringXmlAutowireExplicitlyInspection",
          "displayName": "Autowired Dependencies",
          "enabled": false,
          "description": "Make autowired dependencies explicit"
        },
        {
          "shortName": "SpringBeanLookupMethodInspection",
          "displayName": "Lookup Method",
          "enabled": false,
          "description": "Validates nested <strong>&lt;lookup-method&gt;</strong> in <strong>&lt;bean&gt;</strong>"
        },
        {
          "shortName": "CheckTagEmptyBody",
          "displayName": "XML tag empty body",
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>empty</b> tag body.\nThe validation works in XML / JSP / JSPX / HTML/ XHTML file types. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "XmlUnboundNsPrefix",
          "displayName": "Unbound XML namespace prefix",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for unbound namespace prefixes in XML.\n</body>\n</html>"
        },
        {
          "shortName": "AbstractBeanReferencesInspection",
          "displayName": "Abstract Beans References",
          "enabled": false,
          "description": "Validate that references are not abstract beans"
        },
        {
          "shortName": "XmlPathReference",
          "displayName": "File path resolving in XML",
          "enabled": false,
          "description": "<html>\n<body>\nHighlights unresolved file references in XML.\n</body>\n</html>"
        },
        {
          "shortName": "InjectionValueTypeInspection",
          "displayName": "Injection Value Type",
          "enabled": false,
          "description": "Checks value types for Spring injections (properties & constructor arguments)"
        },
        {
          "shortName": "SpringInjectionValueConsistencyInspection",
          "displayName": "Injection Value Consistency",
          "enabled": false,
          "description": "Spring Injection Value Consistency Inspection"
        },
        {
          "shortName": "RequiredBeanTypeInspection",
          "displayName": "Required Bean Type",
          "enabled": false,
          "description": "Checks bean reference for required bean type."
        },
        {
          "shortName": "SpringPublicFactoryMethodInspection",
          "displayName": "Spring Bean Public Factory Method",
          "enabled": false,
          "description": "Validates method referenced in <strong>&lt;bean&gt;</strong> \"factory-method\" is <code>public</code>."
        },
        {
          "shortName": "DuplicatedBeanNamesInspection",
          "displayName": "Duplicate Bean Name",
          "enabled": false,
          "description": "Checks duplicated bean names"
        },
        {
          "shortName": "SpringBeanDepedencyCheckInspection",
          "displayName": "Spring Bean Dependency Check",
          "enabled": false,
          "description": "Dependency checking for collaborators, primitive types and collections"
        },
        {
          "shortName": "SpringXmlAutowiringInspection",
          "displayName": "Spring Bean Autowiring",
          "enabled": false,
          "description": "Checks autowiring problems in a Spring bean defined in XML context"
        },
        {
          "shortName": "CheckXmlFileWithXercesValidator",
          "displayName": "File does not pass external validation",
          "enabled": false,
          "description": "<html>\n<body>\nThoroughly checks XML files for DTD / schema compliance using Xerces validator.\nThe validation works in XML or XHTML file types. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "SpringInactiveProfileHighlightingInspection",
          "displayName": "Inactive profile highlighting",
          "enabled": false,
          "description": "Highlights inactive profiles in Spring XML contexts."
        },
        {
          "shortName": "CheckDtdRefs",
          "displayName": "Unresolved DTD reference",
          "enabled": false,
          "description": "<html>\n<body>\nChecks consistency of <b>DTD</b> specific references, e.g. references to XML entity or to DTD element declaration.\nThe validation works in DTD or XML file types. <br>\n\n</body>\n</html>"
        },
        {
          "shortName": "XmlDuplicatedId",
          "displayName": "Duplicate ID",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection checks for duplicate \"id\" attributes in XML.\n</body>\n</html>"
        },
        {
          "shortName": "SpringBeanAttributesInspection",
          "displayName": "Spring Bean Attributes",
          "enabled": false,
          "description": "Validates Spring <strong>&lt;bean&gt;</strong> attributes."
        },
        {
          "shortName": "SpringScopesInspection",
          "displayName": "Spring Scopes",
          "enabled": false,
          "description": "Validates <strong>&lt;bean&gt;</strong> \"scope\" attribute"
        },
        {
          "shortName": "SpringPlaceholdersInspection",
          "displayName": "Spring Placeholders",
          "enabled": false,
          "description": "Placeholders resolve errors"
        },
        {
          "shortName": "XmlDeprecatedElement",
          "displayName": "Deprecated elements",
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection checks for deprecated XML elements.\n<p>The elements can be marked by XML comment or documentation tag with text \"deprecated\".\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "TestNG",
      "inspections": [
        {
          "shortName": "ConstantTestNGAssertArgument",
          "displayName": "Constant TestNG assert argument",
          "enabled": false,
          "description": "<html>\n<body>\nReports constant arguments to TestNG assertTrue, assertFalse,\nassertNull and assertNotNull method calls. Calls to these methods with such\nconstant arguments will either always fail or always succeed.\nSuch statements can easily be left over after refactoring and are probably not intended.\n<p>\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "TestNGDataProvider",
          "displayName": "Data provider problems",
          "enabled": false,
          "description": "<html><body>\nThis inspection checks that data provider method exists and is accessible.\n</body></html>"
        },
        {
          "shortName": "UndeclaredTests",
          "displayName": "Undeclared test",
          "enabled": false,
          "description": "<html><body>\n    This inspection checks if none of your testng.xml files contains current test class.\n</body></html>"
        },
        {
          "shortName": "DuplicatedDataProviderNames",
          "displayName": "Duplicated data provider names",
          "enabled": false,
          "description": "<html>\n<body>\nInspection detects TestNG data providers with equal names.\n</body>\n</html>"
        },
        {
          "shortName": "ConvertJavadoc",
          "displayName": "TestNG Javadoc can be converted to annotations",
          "enabled": false,
          "description": "<html><body>\n    This inspection asserts your TestNG tests with Javadoc annotations and allows to convert them to JDK annotations.\n</body></html>"
        },
        {
          "shortName": "SimplifiedTestNGAssertion",
          "displayName": "Simplifiable TestNG assertion",
          "enabled": false,
          "description": "<html>\n<body>\nReports any TestNG <b>assert</b> calls which can be replaced by simpler but equivalent calls.\n<table>\n  <tr><th>Example</th><th>&rarr;</th><th>Replacement</th></tr>\n\n  <tr>\n    <td><code>assertEquals(x(), <b>true</b>);</code></td>\n    <td></td>\n    <td><code>assertTrue(x());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(y() != null);</code></td>\n    <td></td>\n    <td><code>assertNotNull(y());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(z == z());</code></td>\n    <td></td>\n    <td><code>assertSame(z, z());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(a.equals(a()));</code></td>\n    <td></td>\n    <td><code>assertEquals(a, a());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(<b>false</b>);</code></td>\n    <td></td>\n    <td><code>fail();</code></td>\n  </tr>\n</table>\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "ConvertOldAnnotations",
          "displayName": "Old TestNG annotation @Configuration is used",
          "enabled": false,
          "description": "<html><body>\n    This inspection will assert to convert your older @Configuration TestNG annotions to the new\n    @BeforeXXX/@AfterXXX style annotations.\n</body></html>"
        },
        {
          "shortName": "DataProviderReturnType",
          "displayName": "Invalid data provider return type",
          "enabled": false,
          "description": "<html>\n<body>\nInspection checks that method which is marked with <b>@DataProvider</b> annotation\nreturns <b>Object[][]</b> or <b>Iterator&lt;Object&gt;</b>.\n</body>\n</html>"
        },
        {
          "shortName": "dependsOnMethodTestNG",
          "displayName": "'dependsOnMethods' problem",
          "enabled": false,
          "description": "<html><body>\n    This inspection checks that the dependsOnMethod attribute points to a valid, accessable\n    @Test annotated method in the current class, or any of its parent classes.\n</body></html>\n"
        },
        {
          "shortName": "AssertEqualsBetweenInconvertibleTypesTestNG",
          "displayName": "'assertEquals()' between objects of inconvertible types",
          "enabled": false,
          "description": "<html><body>\nReports any calls to TestNG's <b>assertEquals()</b>\nmethod where the expected result and actual result arguments are of incompatible\ntypes. While such a call might theoretically be useful, most likely it represents a bug.\n<!-- tooltip end -->\n<p>\n</body></html>"
        },
        {
          "shortName": "ExpectedExceptionNeverThrownTestNG",
          "displayName": "Expected exception never thrown in test method body",
          "enabled": false,
          "description": "<html>\n<body>\nReports checked exceptions expected by a TestNG test method,\nwhich are never thrown inside the method body.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MisorderedAssertEqualsArgumentsTestNG",
          "displayName": "Misordered 'assertEquals()' arguments",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to TestNG <b>assertEquals()</b> which have the actual result argument and the expected argument in the wrong order.\nFor TestNG the correct order is <code>(actual, expected)</code>.\nSuch calls will behave fine for assertions which pass but may give confusing error reports on failure.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "JUnitTestNG",
          "displayName": "JUnit Test can be converted to TestNG",
          "enabled": false,
          "description": "<html><body>\n    This inspection will convert your existing JUnit based unit tests into TestNG based unit tests.\n</body></html>"
        },
        {
          "shortName": "groupsTestNG",
          "displayName": "Groups problem",
          "enabled": false,
          "description": "<html><body>\n    This inspection checks that group name is acceptable according to a list of known groups.\n</body></html>"
        },
        {
          "shortName": "AssertsWithoutMessagesTestNG",
          "displayName": "Message missing on TestNG assertion",
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to TestNG <b>assertXXX()</b> or <b>fail()</b> methods that do not have an error message string argument.\nAn error message on assertion failure may help clarify the test case's intent.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Internationalization",
      "inspections": [
        {
          "shortName": "UnnecessaryUnicodeEscape",
          "displayName": "Unnecessary unicode escape sequence",
          "enabled": false,
          "description": "<html>\n<body>\nReports unicode escape sequences that are unnecessary, i.e. the file's encoding can handle the character without escaping it.\nUnicode control characters, except for line feed and tab,  are not reported by this inspection.\n  <!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "LossyEncoding",
          "displayName": "Lossy encoding",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection warns you of characters that the current document encoding is incapable to represent. <br>\n\nFor example, when you are <br>\n<ul>\n  <li>typing international characters in a document configured to <b>US-ASCII</b> charset. Some characters will be lost on save.</li>\n  <li>or loading <b>UTF-8</b>-encoded file using <b>ISO-8859-1</b> one-byte charset. Some characters will be displayed incorrectly.</li>\n</ul>\n\nYou fix this by changing the file encoding,\neither by specifying the encoding directly in the file, e.g. by editing <b>encoding=</b> attribute in the XML prolog of XML file,\nor configuring the <b>Settings|Project Settings|File Encodings</b> .\n\n</body>\n</html>"
        },
        {
          "shortName": "AbsoluteAlignmentInUserInterface",
          "displayName": "Absolute alignment used in AWT/Swing code",
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of absolute alignment constants from AWT and Swing. Internationalized applications should make use of\nrelative alignment, because it respects locale component orientation settings.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MagicCharacter",
          "displayName": "Magic character",
          "enabled": false,
          "description": "<html>\n<body>\nReports \"magic characters\", which are character literals used without being named by a constant declaration.\nMagic characters can result in code whose intention is unclear, and may result in errors if a magic\ncharacter is changed in one code location but not another. Such use can complicate internationalization\nefforts.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DialogTitleCapitalization",
          "displayName": "Incorrect string capitalization",
          "enabled": false,
          "description": "<html><body>\nThis inspection checks strings in method parameters and return values annotated with @Nls annotation with \"capitalization\" parameter\nto confirm with capitalization rules, which is required by most platform UI guidelines.\n</body></html>"
        },
        {
          "shortName": "CallToSuspiciousStringMethod",
          "displayName": "Call to suspicious String method",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>equals()</b>, <b>equalsIgnoreCase()</b>, <b>compareTo()</b> or <b>compareToIgnoreCase()</b> on <b>String</b> objects.\nSuch calls are usually incorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitDefaultCharsetUsage",
          "displayName": "Implicit usage of platform's default charset",
          "enabled": false,
          "description": "<html>\n<body>\nReports method and constructor calls which implicitly use the platform's default charset.\nThese can produce different results on (e.g. foreign language) systems that use a different default charset,\nresulting in unexpected behaviour. A quick-fix could be suggested to specify explicit UTF-8 charset\nif the corresponding overloaded method is available.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "TimeToString",
          "displayName": "Call to 'Time.toString()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>toString()</b> on <b>java.sql.Time</b> objects. Such calls are usually\nincorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "HardCodedStringLiteral",
          "displayName": "Hard coded strings",
          "enabled": false,
          "description": "<html>\n<body>\n\nReports any instances of hardcoded String literals. Hardcoded string literals are probably errors in\nan internationalized environment. This inspection won't report empty strings and strings consisting of only whitespace.\n\n<p>\n  The checkboxes below may be used to further specialize whether this inspection should report\n  strings in:\n<ul>\n  <li>assert statements, like in <b><font color=\"#000080\">assert str.equals(<font color=\"#008000\">\"message\"</font>)</font></b></li>\n  <li>exception constructor calls, like in <b><font color=\"#000080\">new Exception(<font color=\"#008000\">\"message\"</font>)</font></b></li>\n  <li>JUnit assert calls, like in <b><font color=\"#000080\">assertEquals(str, <font color=\"#008000\">\"message\"</font>)</font></b></li>\n  <li>the only argument to a method returning String, like in <b><font color=\"#000080\">getStringByKey(<font\n      color=\"#008000\">\"key\"</font>)</font></b></li>\n  <li>literals with value of legal and existing class name like <b><font color=\"#000080\">Class.forName(<font color=\"#008000\">\"java.lang.Object\"</font>);</font></b>\n  </li>\n  <li>literals with value of legal and existing property key <b><font color=\"#000080\">bundle.getString(<font color=\"#008000\">\"authentication.failed\"</font>);</font></b>\n  </li>\n</ul>\n\nThere is a quickfix provided that transforms a Java code string literal\ninto a <b><font color=\"#000080\">java.util.ResourceBundle.getString()</font></b>\nmethod call.\n</body>\n</html>\n"
        },
        {
          "shortName": "StringTokenizer",
          "displayName": "Use of StringTokenizer",
          "enabled": false,
          "description": "<html>\n<body>\nReports any use of the <b>StringTokenizer</b> class. Many uses of\n<b>StringTokenizer</b> are incorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateStringLiteralInspection",
          "displayName": "Duplicate string literal",
          "enabled": false,
          "description": "<html>\n<body>\nReports all string literals which are replicated unchanged throughout the project.\n<br> For example:\n<code><pre>\nclass C1 { String CONST1=<b><font color=\"#000080\">\"duplicate string\"</font></b>; }\nclass C2 { String CONST2=<b><font color=\"#000080\">\"duplicate string\"</font></b>; }\n</pre>\n</code>\n\nThe '<b>Ignore @PropertyKey expressions</b>' option allows you to ignore\nstrings passed as arguments to methods annotated with <b>org.jetbrains.annotations.PropertyKey</b> annotation.\n</body>\n</html>\n"
        },
        {
          "shortName": "NonAsciiCharacters",
          "displayName": "Non-ASCII characters",
          "enabled": false,
          "description": "<html>\n<body>\n\nThis inspection warns you of the code accidentally written in the wrong encoding.<br>\n\nFor example, <br>\n<ul>\n  <li>Non-ASCII characters used in the names/strings/comments or</li>\n  <li>Identifiers written in different languages\n    (e.g. when in the variable \"<code>my<span color=\"red\">C</span>ollection</code>\"\n    the letter <code><span color=\"red\">C</span></code> written in Cyrillic) or</li>\n  <li>Unicode symbols used in comments or strings\n    (e.g. long dashes and arrows in the comment\n    \"<code>// a <span color=\"red\">→</span> !a <span color=\"red\">—</span> please note</code>\")</li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringToUpperWithoutLocale",
          "displayName": "Call to 'String.toUpperCase()' or 'toLowerCase()' without a Locale",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>toUpperCase()</b> or\n<b>toLowerCase()</b> on <b>String</b> objects which\ndo not specify a <b>java.util.Locale</b>.\nIn these cases the default locale of the system is used, which can cause problems in an internationalized environment.\n<p>\nFor example the code <b>\"i\".toUpperCase().equals(\"I\")</b> returns <b>false</b> in the Turkish and Azerbaijani locales,\nwhere the dotted and dotless 'i' are separate letters.\nCalling <b>toUpperCase()</b> on an English string containing an 'i', when running on a Turkish system, will return incorrect results.\nAlternatively when dealing with strings that should be treated locale independently, like HTML tags, this can lead to errors.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenation",
          "displayName": "String concatenation",
          "enabled": false,
          "description": "<html>\n<body>\nReports any String concatenation (<b>+</b>). Concatenation is usually\nincorrect in an internationalized environment, and should be replaced by uses of\n<b>java.text.MessageFormat</b> or similar classes.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NumericToString",
          "displayName": "Call to Numeric 'toString()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>toString()</b> on numeric objects. Such calls are usually\nincorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "CharacterComparison",
          "displayName": "Character comparison",
          "enabled": false,
          "description": "<html>\n<body>\nReports any ordinal comparison of <b>char</b> values. In an internationalized\nenvironment, such comparisons are rarely correct.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DateToString",
          "displayName": "Call to 'Date.toString()'",
          "enabled": false,
          "description": "<html>\n<body>\nReports any call of <b>toString()</b> on <b>java.util.Date</b> objects. Such calls are usually\nincorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SimpleDateFormatWithoutLocale",
          "displayName": "Instantiating a SimpleDateFormat without a Locale",
          "enabled": false,
          "description": "<html>\n<body>\nReports any instantiations of <b>java.util.SimpleDateFormat</b>\nwhich do not specify a <b>java.util.Locale</b>.\nSuch calls are usually incorrect in an internationalized environment.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Gradle",
      "inspections": [
        {
          "shortName": "GradleKotlinxCoroutinesDeprecation",
          "displayName": "Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Gradle",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports <b>kotlinx.coroutines</b> libraries dependencies in Gradle that should be updated in order\nto be compatible with Kotlin 1.3+.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Bitwise operation issues",
      "inspections": [
        {
          "shortName": "ShiftOutOfRange",
          "displayName": "Shift operation by inappropriate constant",
          "enabled": false,
          "description": "<html>\n<body>\nReports shift operations\nwhere the value shifted by is constant and outside of the reasonable range. Integer\nshift operations outside of the range <b>0..31</b> and long shift operations outside of the\nrange <b>0..63</b> are reported. Shifting by negative or overly large values is almost certainly\na coding error.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IncompatibleMaskJS",
          "displayName": "Incompatible bitwise mask operation",
          "enabled": false,
          "description": "<html>\n<body>\nReports bitwise mask expressions which are guaranteed to\nevaluate to <b>true</b> or <b>false</b>.\nExpressions checked are of the form <b><i>(var & constant1) == constant2</i></b> or\n<b><i>(var | constant1) == constant2</i></b>, where <b><i>constant1</i></b>\nand <b><i>constant2</i></b> are incompatible bitmask constants.\n</body>\n</html>\n"
        },
        {
          "shortName": "PointlessBitwiseExpressionJS",
          "displayName": "Pointless bitwise expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless bitwise expressions.  Such expressions include <b>and</b>ing with zero,\n<b>or</b>ing by zero,\nand shift by zero.  Such expressions may be the result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n</body>\n</html>\n"
        },
        {
          "shortName": "IncompatibleMask",
          "displayName": "Incompatible bitwise mask operation",
          "enabled": false,
          "description": "<html>\n<body>\nReports bitwise mask expressions which are guaranteed to\nevaluate to <b>true</b> or <b>false</b>.\nExpressions checked are of the form <b><i>(var & constant1) == constant2</i></b> or\n<b><i>(var | constant1) == constant2</i></b>, where <b><i>constant1</i></b>\nand <b><i>constant2</i></b> are incompatible bitmask constants.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JSBitwiseOperatorUsage",
          "displayName": "Bitwise operator usage",
          "enabled": false,
          "description": "<html>\n<body>\nReports suspicious usages of bitwise AND (\"<b>&</b>\") and OR (\"<b>|</b>\") operators.\nUsually it is a common typo and user expect a result according to the boolean operations AND (\"<b>&&</b>\") and OR (\"<b>||</b>\").\n</body>\n</html>"
        },
        {
          "shortName": "PointlessBitwiseExpression",
          "displayName": "Pointless bitwise expression",
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless bitwise\nexpressions. Such expressions include <b>and</b>ing with zero, <b>or</b>ing by zero,\nand shifting by zero. Such expressions may be the result of automated refactorings\nnot completely followed through to completion, and in any case are unlikely to be what the developer\nintended to do.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ShiftOutOfRangeJS",
          "displayName": "Shift operation by inappropriate constant",
          "enabled": false,
          "description": "<html>\n<body>\nReports shift operations where the value shifted by is constant and outside of the reasonable range.  Integer\nshift operations outside of the range <b>0..31</b> are reported.\nShifting by negative or overly large values is almost certainly a coding error.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Java interop issues",
      "inspections": [
        {
          "shortName": "PackageDirectoryMismatch",
          "displayName": "Package name does not match containing directory",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports file's <b>package</b> directive not matching the location of the file.\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaCollectionsStaticMethodOnImmutableList",
          "displayName": "Call of Java mutator method on immutable Kotlin collection",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection report calls of Java mutator methods (like <b>fill</b>, <b>reverse</b>, <b>shuffle</b>, <b>sort</b>) on an immutable Kotlin collection.\nThis will likely produce an <b>UnsupportedOperationException</b> at runtime.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinInternalInJava",
          "displayName": "Usage of Kotlin internal declarations from Java",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports usages of Kotlin internal declarations in Java code from a different module.\n</body>\n</html>\n"
        },
        {
          "shortName": "HasPlatformType",
          "displayName": "Function or property has platform type",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports functions and properties that have a platform type. In order to prevent unexpected errors, the type should be declared explicitly.\n</body>\n</html>\n"
        },
        {
          "shortName": "PlatformExtensionReceiverOfInline",
          "displayName": "Unsafe call of inline function with nullable extension receiver",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports potentially unsafe calls of inline functions with flexible nullable (platform type with unknown nullability) extension receivers.\nIn Kotlin 1.0 or 1.1, such calls do not include nullability check in bytecode,\nbut in Kotlin 1.2, nullability check is included and can provoke NPE if actual receiver is null.\nIt's recommended to add explicit <b>!!</b> if exception is what you want,\nor consider changing the function's receiver type to nullable if it should work without exceptions.\n</body>\n</html>"
        },
        {
          "shortName": "FakeJvmFieldConstant",
          "displayName": "Kotlin non-const property used as Java constant",
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  This inspection reports non-<b>const</b> Kotlin properties used as Java annotation arguments.\n  It is possible for a property which is annotated with <b>@JvmField</b>,\n  has an initializer that can be evaluated at compile-time, has a primitive or <b>String</b> type.\n  Such properties have a <b>ConstantValue</b> attribute in bytecode in Kotlin 1.1-1.2.\n  This attribute allows javac to fold usages of the corresponding field and use that field in annotations.\n  This can cause incorrect behavior in case of separate or incremental compilation in mixed Java/Kotlin code.\n</p>\n<p>\n  This behavior is subject to change in Kotlin 1.3 (no <b>ConstantValue</b> attribute any more).\n  Recommended action: replace the <b>@JvmField</b> annotation with a <b>const</b> modifier on a relevant Kotlin property or inline it.\n</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantNotNullExtensionReceiverOfInline",
          "displayName": "Not-null extension receiver of inline function can be made nullable",
          "enabled": false,
          "description": "<html>\n<body>\nThis inspection reports inline functions with not-null extension receivers which does not use the fact that extension receiver is not null.\nSuch functions are dangerous to call in Kotlin 1.2 on actual nullable flexible receiver type.\nConsider making receiver type nullable.\n</body>\n</html>"
        }
      ]
    }
  ]
}